
/**
 * Created by Administrator on 2017/3/6.
 */
$(function() {
	var lineAll;		 //时间轴总长度
    var lineDay;         //一天的总长度
    var lineHours;		 //每小时的长度
    var spanPointer;     //指针自身宽度/2
    var time;			 //指针运动定时器
	var Divs;

	var kolse = false;
	var qel1;
	var hel1;
	var qel2;
	var hel2;
	var spWidth = $("#all").width();

	var Nm;
	var nuTm;

	var offsetHtml = $("html").width() / 2;
	var inpWidth = $("#inp").width() / 2;

	var isdrag = false;
	var NowLeft, disX;
	var setWidth = $("html").width() / 2;
	var oDiv2 = document.getElementById("parst");
	var ten = 30;     // 不影响体验 设定 一小时最小宽度60px 
	var kos = true;
	var timeMove;    // web 计时器

	var level;
	var unit;
	var changeFlag = false;
	var yxMapClick = true;
	var rectPoint1;
	var rectPoint3;

	var ifLayer;
	var pictureFlag=true;
	var selected1=false;
	var selected2=false;

	var fileUrl="";

	var flagCan = false;

    var isLogin=false;
	var glColor = "";
	//自由驱动工作室
// 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 ToChineseSpell
//函数使用,本表收录的字符的Unicode编码范围为19968至40869, XDesigner 整理
	var strChineseFirstPY = "";
//此处收录了375个多音字,
	var oMultiDiff = { "19969": "DZ", "19975": "WM", "19988": "QJ", "20048": "YL", "20056": "SC", "20060": "NM", "20094": "QG", "20127": "QJ", "20167": "QC", "20193": "YG", "20250": "KH", "20256": "ZC", "20282": "SC", "20285": "QJG", "20291": "TD", "20314": "YD", "20340": "NE", "20375": "TD", "20389": "YJ", "20391": "CZ", "20415": "PB", "20446": "YS", "20447": "SQ", "20504": "TC", "20854": "QJ", "20911": "PF",  "20608": "KG", "20857": "ZC",  "20985": "AW", "21032": "PB", "21048": "XQ", "21049": "SC", "21089": "YS", "21119": "JC", "21242": "SB", "21273": "SC", "21305": "YP", "21306": "QO", "21330": "ZC", "21333": "SDC", "21345": "QK", "21378": "CA", "21397": "SC", "21414": "XS", "21442": "SC", "21477": "JG", "21480": "TD", "21484": "ZS", "21494": "YX", "21505": "YX", "21512": "HG", "21523": "XH", "21537": "PB", "21542": "PF", "21549": "KH", "21571": "E", "21574": "DA", "21588": "TD", "21589": "O", "21618": "ZC", "21621": "KHA", "21632": "ZJ", "21654": "KG", "21679": "LKG", "21683": "KH", "21710": "A", "21719": "YH", "21734": "WOE", "21769": "A", "21780": "WN", "21804": "XH", "21834": "A", "21899": "ZD", "21903": "RN", "21908": "WO", "21939": "ZC", "21956": "SA", "21964": "YA", "21970": "TD", "22003": "A", "22031": "JG", "22040": "XS", "22060": "ZC", "22066": "ZC", "22079": "MH", "22129": "XJ", "22179": "XA", "22237": "NJ", "22244": "TD", "22280": "JQ", "22300": "YH", "22313": "XW", "22331": "YQ", "22343": "YJ", "22351": "PH", "22395": "DC", "22412": "TD", "22484": "PB", "22500": "PB", "22534": "ZD", "22549": "DH", "22561": "PB", "22612": "TD", "22771": "KQ", "22831": "HB", "22841": "JG", "22855": "QJ", "22865": "XQ", "23013": "ML", "23081": "WM", "23487": "SX", "23558": "QJ", "23561": "YW", "23586": "YW", "23614": "YW", "23615": "SN", "23631": "PB", "23646": "ZS", "23663": "ZT", "23673": "YG", "23762": "TD", "23769": "ZS", "23780": "QJ", "23884": "QK", "24055": "XH", "24113": "DC", "24162": "ZC", "24191": "GA", "24273": "QJ", "24324": "NL", "24377": "TD", "24378": "QJ", "24439": "PF", "24554": "ZS", "24683": "TD", "24694": "WE", "24733": "LK", "24925": "TN", "25094": "ZG", "25100": "XQ", "25103": "XH", "25153": "PB", "25170": "PB", "25179": "KG", "25203": "PB", "25240": "ZS", "25282": "FB", "25303": "NA", "25324": "KG", "25341": "ZY", "25373": "WZ", "25375": "XJ", "25384": "A", "25457": "A", "25528": "SD", "25530": "SC", "25552": "TD", "25774": "ZC", "25874": "ZC", "26044": "YW", "26080": "WM", "26292": "PB", "26333": "PB", "26355": "ZY", "26366": "CZ", "26397": "ZC", "26399": "QJ", "26415": "ZS", "26451": "SB", "26526": "ZC", "26552": "JG", "26561": "TD", "26588": "JG", "26597": "CZ", "26629": "ZS", "26638": "YL", "26646": "XQ", "26653": "KG", "26657": "XJ", "26727": "HG", "26894": "ZC", "26937": "ZS", "26946": "ZC", "26999": "KJ", "27099": "KJ", "27449": "YQ", "27481": "XS", "27542": "ZS", "27663": "ZS", "27748": "TS", "27784": "SC", "27788": "ZD", "27795": "TD", "27812": "O", "27850": "PB", "27852": "MB", "27895": "SL", "27898": "PL", "27973": "QJ", "27981": "KH", "27986": "HX", "27994": "XJ", "28044": "YC", "28065": "WG", "28177": "SM", "28267": "QJ", "28291": "KH", "28337": "ZQ", "28463": "TL", "28548": "DC", "28601": "TD", "28689": "PB", "28805": "JG", "28820": "QG", "28846": "PB", "28952": "TD", "28975": "ZC", "29100": "A", "29325": "QJ", "29575": "SL", "29602": "FB", "30010": "TD", "30044": "CX", "30058": "PF", "30091": "YSP", "30111": "YN", "30229": "XJ", "30427": "SC", "30465": "SX", "30631": "YQ", "30655": "QJ", "30684": "QJG", "30707": "SD", "30729": "XH", "30796": "LG", "30917": "PB", "31074": "NM", "31085": "JZ", "31109": "SC", "31181": "ZC", "31192": "MLB", "31293": "JQ", "31400": "YX", "31584": "YJ", "31896": "ZN", "31909": "ZY", "31995": "XJ", "32321": "PF", "32327": "ZY", "32418": "HG", "32420": "XQ", "32421": "HG", "32438": "LG", "32473": "GJ", "32488": "TD", "32521": "QJ", "32527": "PB", "32562": "ZSQ", "32564": "JZ", "32735": "ZD", "32793": "PB", "33071": "PF", "33098": "XL", "33100": "YA", "33152": "PB", "33261": "CX", "33324": "BP", "33333": "TD", "33406": "YA", "33426": "WM", "33432": "PB", "33445": "JG", "33486": "ZN", "33493": "TS", "33507": "QJ", "33540": "QJ", "33544": "ZC", "33564": "XQ", "33617": "YT", "33632": "QJ", "33636": "XH", "33637": "YX", "33694": "WG", "33705": "PF", "33728": "YW", "33882": "SR", "34067": "WM", "34074": "YW", "34121": "QJ", "34255": "ZC", "34259": "XL", "34425": "JH", "34430": "XH", "34485": "KH", "34503": "YS", "34532": "HG", "34552": "XS", "34558": "YE", "34593": "ZL", "34660": "YQ", "34892": "XH", "34928": "SC", "34999": "QJ", "35048": "PB", "35059": "SC", "35098": "ZC", "35203": "TQ", "35265": "JX", "35299": "JX", "35782": "SZ", "35828": "YS", "35830": "E", "35843": "TD", "35895": "YG", "35977": "MH", "36158": "JG", "36228": "QJ", "36426": "XQ", "36466": "DC", "36710": "JC", "36711": "ZYG", "36767": "PB", "36866": "SK", "36951": "YW", "37034": "YX", "37063": "XH", "37218": "ZC", "37325": "ZC", "38063": "PB", "38079": "TD", "38085": "QY", "38107": "DC", "38116": "TD", "38123": "YD", "38224": "HG", "38241": "XTC", "38271": "ZC", "38415": "YE", "38426": "KH", "38461": "YD", "38463": "AE", "38466": "PB", "38477": "XJ", "38518": "YT", "38551": "WK", "38585": "ZC", "38704": "XS", "38739": "LJ", "38761": "GJ", "38808": "SQ", "39048": "JG", "39049": "XJ", "39052": "HG", "39076": "CZ", "39271": "XT", "39534": "TD", "39552": "TD", "39584": "PB", "39647": "SB", "39730": "LG", "39748": "TPB", "40109": "ZQ", "40479": "ND", "40516": "HG", "40536": "HG", "40583": "QJ", "40765": "YQ", "40784": "QJ", "40840": "YK", "40863": "QJG" };
	//监听浏览器视图的大小变化（以确保时间轴显示正常以及指针位置随窗口大小变化之后的正确显示）
	$(window).resize(function () {
		ifLayer = ifTime($(".select span").html());
		
		//调整时间轴布局随窗口大小变化之后的正确显示
		if (!Boolean(ifLayer)) {
		    var ds = $("#dateStyle").width() - ($("#dateStyle").width() / $("#dateStyle span").length);
			  $("#all").css("width", ds);
			  var Wd = $(".mellDay").width() / 24;
			  var LoneOne = Wd * (8+1) + "px";
			  var LoneTwo = Wd * (20+1) + "px";
			  var LineOne = Wd * 16 + "px";
			  var LineTwo = Wd * 4 + "px";
			  var str=""
			  if (Tm >= 6 && Tm < 18) {
			      $("#all").css("left", LoneOne);
						//alert("控制进度条--走 当天 8时预报")
			  } else if (Tm < 6) {
			      $("#all").css("left", LoneTwo);
						//alert("控制进度条--走 前一天 20时预报")
			  } else if (Tm >= 18) {
			      $("#all").css("left", LoneTwo);
						//alert("控制进度条--走 当天 20时预报")
			  }
		} else {
			  var ds = $("#dateStyle").width() - ($("#dateStyle").width() / $("#dateStyle span").length)+1;
				//最后一个div的width  它与第二个mellDay的第一个bbb相同
			  var lastIndex=$("#all").find(".bbb").length;
				var secondSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

				
			  if (Tm >= 6 && Tm < 18) {
			      $("#all").css("width", ds + secondSmall*3);
			      //var lengthMS = $(".mellDay").length;
						//$("#all").css("width", ds * (lengthMS-1) + Wd*9);
			  } else if (Tm < 6) {
			      $("#all").css("width", ds + secondSmall*7);
			      //var lengthMS = $(".mellDay").length;
						//$("#all").css("width", ds * (lengthMS-1) + Wd*21);
			  } else if (Tm >= 18) {
			      $("#all").css("width", ds + secondSmall*7);
			      //var lengthMS = $(".mellDay").length;
						//$("#all").css("width", ds * (lengthMS-1) + Wd*21);
			  }

		    $("#all").css("left", "0");
		}



		lineAll = parseInt($("#all").css("width"));
		offsetHtml = $("html").width() / 2;
		$("#scorlSep").css("left", 80);
		$("#inp").css("left", 45);
		
		//调整指针位置随窗口大小变化之后的正确显示
		if(!ifLayer){
			//避免变量污染 重新定义获取存在颜色的div个数
	    var smarlDiv = $(".red").length;
	    var bigDiv = $(".redMellDay").length;
	    var smarlWidthQel3
	    var smarlWidth = $(".mellDay").eq(0).find(".bbb").width() + 1;  // +1是因为有1px的border
	    var bigWidth = $(".mellDay").width();
	    var smarlWidthQel2 = $(".mellDay").eq(qel2 - 1).find(".bbb").width() + 1;
	    var qel1Length = $(".mellDay").eq(0).find(".bbb").length;
	    var bbbFloatValue = $(".mellDay").width() / qel1Length;
	    
	    var redLength = $(".red").length;
	    var redbbb = $(".red").eq(redLength - 1);
	    var redMellDay = redbbb.parent(".mellDay").index();
	    var tebDom = $(".mellDay").eq(0).find(".bbb").length; //第一个mellDay的。bbb的个数
	    var tebDomQel2 = $(".mellDay").eq(qel2 - 1).find(".bbb").length;  //类型二 第二种
	    var tebDomQel3;
	    var mellNum = $(".mellDay").length;
	  	if (Boolean(qel3)) {
	        tebDomQel3 = $(".mellDay").eq(qel2 + qel3 - 1).find(".bbb").length;  //类型二 第二种
	    }
			
			if (redMellDay <= 3) {
				if (redLength > tebDom) {
					redLength = 1;
					redMellDay = redMellDay + 1;
				}
			} else if (redMellDay - 3 >= mellNum - 1 && redLength > tebDom || redMellDay - 3 >= mellNum - 1 && redLength > tebDomQel2 || redMellDay - 3 >= mellNum - 1 && redLength >= tebDomQel3) {
				redMellDay = 3;
				redLength = 1;
			} else {
				if (Boolean(qel2) && qel3 == null) {
					if (redMellDay - 3 < qel1) {
						if (redLength > tebDom) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
					} else {
						if (redLength > tebDomQel2) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
					}
				} else if (Boolean(qel2) && Boolean(qel3)) {
					if (redMellDay - 3 < qel1) {
						if (redLength > tebDom) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
					} else {
						if (redLength > tebDomQel2) {
							redLength = 1;
							redMellDay = redMellDay + 1;

						}
						if (redMellDay - 3 >= $(".mellDay").length - qel3 - 1) {

							if (redLength > tebDomQel3) {
								redLength = 1;
								redMellDay = redMellDay + 1;
							}
						}
					}
				} else {
					if (redLength > tebDom) {
						redLength = 1;
						redMellDay = redMellDay + 1;
					}
				}
			}
	    
	    if (Boolean(qel3)) {
	        smarlWidthQel3 = $(".mellDay").eq(qel3 + qel2 - 1).find(".bbb").width() + 1;
	        ;  //类型二 第二种
	    }
			
			if (Boolean(qel2) && qel3 == null) {
				if (redMellDay - 3 >= qel1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {
				if (redMellDay - 3 >= $(".mellDay").length - qel3 - 1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					
					var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else if (redMellDay - 3 >= qel1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			} else {
				if ($(".mellDay").length <= bigDiv) {
					var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			}
			
		}else{
			var bigRed = $(".redMellDay").length;
			var smallRed = $(".red").length
			var firstMell = $(".mellDay").eq(0).width();
			var secondMell = $(".mellDay").eq(1).width();
			var lastIndex=$("#all").find(".bbb").length;
			var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;
			
			var oWd  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;
			var ches = $("#pointer").width();
			if (Boolean(qel2) && qel3 == null) {
				if(bigRed == 0){

					var red = $(".mellDay").eq(0).find(".red").length;
					var nomal = $(".mellDay").eq(0).find(".nomal").index();
					var lastWd = $(".mellDay").children("div:last-child").width();
					var nomalWd = $(".nomal").width();
					// 判断实况预报结合的 三种不同宽度：

					if( red < nomal + 1 ){
						var pointLine = oWd * red - ches/2 + "px";
						$("#pointer").css("left",pointLine);

					}else if( red == nomal + 1){

						var pointLine = (red-1)*oWd + nomalWd -ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}else{
						var pointLine = nomal * oWd + nomalWd + (red-nomal-1) * oWd - ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}

				}else if(bigRed > 0){
					var bigLine = (bigRed -1 )*secondMell;
					var smallLine = smallRed * secondSmall;
					var pointLine = firstMell + bigLine +smallLine - ches/2 + "px";
					$("#pointer").css("left",pointLine);
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {


			} else {
				if(bigRed == 0){

					var red = $(".mellDay").eq(0).find(".red").length;
					var nomal = $(".mellDay").eq(0).find(".nomal").index();
					var lastWd = $(".mellDay").children("div:last-child").width();
					var nomalWd = $(".nomal").width();
					// 判断实况预报结合的 三种不同宽度：

					if( red < nomal + 1 ){
						var pointLine = oWd * red - ches/2 + "px";
						$("#pointer").css("left",pointLine);

					}else if( red == nomal + 1){
						var pointLine = (red-1)*oWd + nomalWd -ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}else{
						var pointLine = nomal * oWd + nomalWd + (red-nomal-1) * oWd*hel1 - ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}

				}else if(bigRed > 0){
					var bigLine = (bigRed -1 )*secondMell;
					var smallLine = smallRed * secondSmall;
					var pointLine = firstMell + bigLine +smallLine - ches/2 + "px";
					$("#pointer").css("left",pointLine);
				}

			}

		}
		
	});


	function getDiv(time) {
		var num = $("#all").children(".mellDay").length;
		var next = $("#all .red").parent(".mellDay").nextAll(".mellDay").length;

		var index = 0;
		for (var i = 0, len = num - next - 1; i < len; i++) {
			var numDiv = $("#all").children(".mellDay").eq(i).children(".bbb").length;
			index += numDiv;
		}
		index += $("#all .red").length - 1;
		return time[index];
	}

	//根据刻度获取当前块的索引
	function getDivIndex(){
		var first = $(".mellDay").eq(0).find(".bbb").length;
		var redSmall = $(".red").length;
		var redBig = $(".redMellDay").length;
		var index = 0;
		for(i=1;i<redBig;i++){
			var len = $(".redMellDay").eq(i).find(".bbb").length;
			index += len;
		}
		if(redBig>0){
			index = index + first + redSmall -1;
		}else if(redBig == 0){
			index = redSmall -1;
		}

		return index;
	}

	//根据起报时间等参数换算文件名
	function getFileName(num, date, featureData) {
		var fileName = "";
		var yyyyMMddHH = date.format("yyyyMMdd");
		if (featureData.liveVisible) {
			var index = getDivIndex();
			if (Boolean(qel2) && !Boolean(qel3)) {
				if (Tm >= 6 && Tm < 18) {
					if (index <= liveTm) {
						//实况
						var HH = "";
						if (index < 10) {
							HH = "0" + index;
						} else {
							HH = "" + index;
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else {
						//6 7 8三个时间 点的预报路径
						if (index <= 8) {
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
							var XXX = parseInt(featureData.time[(index + 4 - 1)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);

						} else {
							//8点以后
							yyyyMMddHH = date.format("yyyyMMdd") + "08";

							var XXX = parseInt(featureData.time[(index - 9)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);

						}
					}

				} else if (Tm >= 18) {
					if (index <= liveTm) {
						//实况
						var HH = "";
						if (index < 10) {
							HH = "0" + index;
						} else {
							HH = "" + index;
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else {
						if (index <= 20) {
							//在 18 19 20 三个特殊时刻的路径
							var XXX = parseInt(featureData.time[(index - 9)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "08", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);

						} else {
							//20点以后
							var XXX = parseInt(featureData.time[(index - 21)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "20", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);

						}
					}

				} else if (Tm < 6) {
					var tmpTm = liveTm;
					if (liveTm == 23) {
						tmpTm = -1;
					}

					if (index <= tmpTm + 24) {
						var HH = "";
						if (index < 24) {
							if (index < 10) {
								HH = "0" + index;
							} else {
								HH = "" + index;
							}
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd");
						} else {
							HH = "0" + (index - 24);
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else {
						var i = Math.floor((tmpTm + 24 - 20) / hel1);
						var XXX = parseInt(featureData.time[(index - (tmpTm + 24 + 1)) + i]);
						if (XXX < 10) {
							XXX = "00" + XXX;
						} else if (10 <= XXX && XXX < 100) {
							XXX = "0" + XXX;
						} else if (XXX >= 100) {
							XXX = "" + XXX;
						}

						yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
						var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": XXX};
						fileName = npt.util.template(featureData.fileFormat, data);
					}
				}
			} else if (Boolean(qel3)) {


			} else {
				if (Tm >= 6 && Tm < 18) {
					if (index <= liveTm) {
						var HH = "";
						if (index < 10) {
							HH = "0" + index;
						} else {
							HH = "" + index;
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else if (liveTm == 5) {
						if (index == 6) {
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 7)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "08", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else if (liveTm == 6) {
						if (index == 7) {
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 8)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "08", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else if (liveTm == 7) {
						if (index == 8) {
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 9)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "08", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else {
						var i = Math.floor((liveTm - 8) / hel1);
						var XXX = parseInt(featureData.time[(index - (liveTm + 1)) + i]);
						if (XXX < 10) {
							XXX = "00" + XXX;
						} else if (10 <= XXX && XXX < 100) {
							XXX = "0" + XXX;
						} else if (XXX >= 100) {
							XXX = "" + XXX;
						}

						var data = {"yyyyMMddHH": yyyyMMddHH + "08", "XXX": XXX};
						fileName = npt.util.template(featureData.fileFormat, data);
					}

				} else if (Tm >= 18) {

					if (index <= liveTm) {
						var HH = "";
						if (index < 10) {
							HH = "0" + index;
						} else {
							HH = "" + index;
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else if (liveTm == 17) {
						if (index == 18) {
							yyyyMMddHH = moment(date).toDate().format("yyyyMMdd") + "08";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 19)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "20", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else if (liveTm == 18) {
						if (index == 19) {
							yyyyMMddHH = moment(date).toDate().format("yyyyMMdd") + "08";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 20)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "20", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else if (liveTm == 19) {
						if (index == 20) {
							yyyyMMddHH = moment(date).toDate().format("yyyyMMdd") + "08";
							var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": "012"};
							fileName = npt.util.template(featureData.fileFormat, data);
						} else {
							var XXX = parseInt(featureData.time[(index - 21)]);
							if (XXX < 10) {
								XXX = "00" + XXX;
							} else if (10 <= XXX && XXX < 100) {
								XXX = "0" + XXX;
							} else if (XXX >= 100) {
								XXX = "" + XXX;
							}

							var data = {"yyyyMMddHH": yyyyMMddHH + "20", "XXX": XXX};
							fileName = npt.util.template(featureData.fileFormat, data);
						}
					} else {
						var i = Math.floor((liveTm - 20) / hel1);
						var XXX = parseInt(featureData.time[(index - (liveTm + 1)) + i]);
						if (XXX < 10) {
							XXX = "00" + XXX;
						} else if (10 <= XXX && XXX < 100) {
							XXX = "0" + XXX;
						} else if (XXX >= 100) {
							XXX = "" + XXX;
						}

						var data = {"yyyyMMddHH": yyyyMMddHH + "20", "XXX": XXX};
						fileName = npt.util.template(featureData.fileFormat, data);
					}
				} else if (Tm < 6) {
					var tmpTm = liveTm;
					if (liveTm == 23) {
						tmpTm = -1;
					}

					if (index <= tmpTm + 24) {
						var HH = "";
						if (index < 24) {
							if (index < 10) {
								HH = "0" + index;
							} else {
								HH = "" + index;
							}
							yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd");
						} else {
							HH = "0" + (index - 24);
						}
						var data = {"yyyyMMddHH": yyyyMMddHH + HH};
						fileName = npt.util.template(featureData.liveFileFormat, data);
					} else {
						var i = Math.floor((tmpTm + 24 - 20) / hel1);
						var XXX = parseInt(featureData.time[(index - (tmpTm + 24 + 1)) + i]);
						if (XXX < 10) {
							XXX = "00" + XXX;
						} else if (10 <= XXX && XXX < 100) {
							XXX = "0" + XXX;
						} else if (XXX >= 100) {
							XXX = "" + XXX;
						}

						yyyyMMddHH = moment(date).subtract(1, "day").toDate().format("yyyyMMdd") + "20";
						var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": XXX};
						fileName = npt.util.template(featureData.fileFormat, data);
					}
				}
			}

		}else{

			if(Tm >= 6 && Tm < 18){
				yyyyMMddHH += "08";
			}else if(Tm >= 18){
				yyyyMMddHH += "20";
			}else if(Tm < 6){
				yyyyMMddHH = moment(date).subtract(1,"day").toDate().format("yyyyMMdd")+"20";
			}

			var XXX = parseInt(getDiv(featureData.time));
			if (XXX < 10) {
				XXX = "00" + XXX;
			} else if (10 <= XXX && XXX < 100) {
				XXX = "0" + XXX;
			} else if (XXX >= 100) {
				XXX = "" + XXX;
			}

			var data = {"yyyyMMddHH": yyyyMMddHH, "XXX": XXX};
			fileName = npt.util.template(featureData.fileFormat, data);
		}
		return fileName;
	}

	//根据起报时间等参数换算文件名
	function getFileName1(date, currentTime, featureData) {
		if(Tm<6){
			var startTime = moment(date).subtract(1,"day").toDate().format("yyyyMMdd");
		}else{
			var startTime = date.format("yyyyMMdd");
		}

		//console.log(currentTime)
		if (nuTm == 8) {
			startTime += "08"
		} else if (nuTm == 20) {
			startTime += "20";
		}

		var year1 = parseInt(startTime.substring(0, 4));
		var mouth1 = parseInt(startTime.substring(4, 6));
		var day1 = parseInt(startTime.substring(6, 8));
		var hour1 = parseInt(startTime.substring(8, 10));

		var startDateTime = new Date(year1, mouth1 - 1, day1, hour1);

		var year2 = parseInt(currentTime.substring(0, 4));
		var mouth2 = parseInt(currentTime.substring(5, 7));
		var day2 = parseInt(currentTime.substring(8, 10));
		var hour2 = parseInt(currentTime.substring(11, 13));

		var currentDateTime = new Date(year2, mouth2 - 1, day2, hour2);
		var s1 = currentDateTime.getTime(), s2 = startDateTime.getTime();
		var XXX = (s1 - s2) / 1000 / 60 / 60;
		if (XXX < 10) {
			XXX = "00" + XXX;
		} else if (10 <= XXX && XXX < 100) {
			XXX = "0" + XXX;
		} else if (XXX >= 100) {
			XXX = "" + XXX;
		}

		var data = {"yyyyMMddHH": startTime, "XXX": XXX};
		var fileName = npt.util.template(featureData.fileFormat, data);

		return fileName;
	}

	//  实况预报分界线提示
	$("#qzLine").mousemove(function () {
		$(".ybLine").css("display", "block");
	});

	$("#qzLine").mouseleave(function () {
		$(".ybLine").css("display", "none");
	});


	//点击刻度事件
	var title;

	function clickDiv(ifLayer) {
		for (i = 0; i < $(".bbb").length; i++) {
			$(".bbb").eq(i).click(function () {
				if(ifLayer){
					//判断播放按钮是否打开
					if (kolse) {
						$("#action").css("display", "block");
						$("#stop").css("display", "none")
					}
					//停止自动播放
					moveStop();

					title = $(this).attr("name");
					$("#pointer .xs").html(title + ":00");
					var indexClick2 = $(this).index();
					var indexClick1 = $(this).parent(".mellDay").index();

					//清除之前的样式
					$(".mellDay").removeClass("redMellDay");
					$(".bbb").removeClass("red");
					//因为$("#all")的第一个mellDay的下标是3。
					if (indexClick1 - 3 > 0) {
						//改变鼠标点击位置之前的mellDay的颜色
						for (j = 0; j <= indexClick1 - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					}
					//改变当前点击.bbb的之前的颜色
					for (k = 0; k <= indexClick2; k++) {
						$(".mellDay").eq(indexClick1 - 3).find(".bbb").eq(k).addClass("red");
					}

					var oB = $(".mellDay").eq(0).find(".bbb").length;
					var oGound = $(".mellDay").eq(0).find("#flexNone").length;
					//var oWidth = $(".mellDay").eq(0).find(".bbb").eq(0).width()+1;
					var oWidth  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;

					var flexWidth = $(".mellDay").eq(0).find("#flexNone").width();
					if(indexClick1 - 3 == 0){
						if( $(this).index() < oB-oGound ){

							var Line = ($(this).index()+1)*oWidth;
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = Line - spanPointer + "px";
							$("#pointer").css("left", poLeft);
						}else{
							var oAll = (oB-oGound) * oWidth;
							var chesWc = $(this).index()+1 - (oB-oGound);
							var lastWidth = $(".mellDay").eq(0).children("div:last-child").width();
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = chesWc*lastWidth + oAll - spanPointer +"px";
							$("#pointer").css("left", poLeft);
						}
					}else{
						var ches = indexClick1 - 3;
						var frist = $(".mellDay").eq(0).width();
						var second = $(".mellDay").eq(1).width();
						var last = $("#all").children(".mellDay:last-child").width();
						var small = $("#all").children(".mellDay:last-child").find(".bbb").width()+1;
						spanPointer = parseInt($("#pointer").width()) / 2;
						var poLeft = frist + last*(ches-1) + ($(this).index()+1)*small  - spanPointer +"px";
						$("#pointer").css("left", poLeft);

						var redLen = $(".red").length;
						var parent = $(".red").parent(".mellDay").find(".bbb").length;
						if(redLen == parent){
							$(".red").parent(".mellDay").addClass("redMellDay");
							$(".red").removeClass("red");
							var redMell = $(".redMellDay").length;
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = frist +  second*(redMell-1) - spanPointer +"px";
							$("#pointer").css("left", poLeft);
						}



					}




                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					if (!mapClickFlag) {
						initGif(featureData, 2);
					}

					getUrl(nuTm, newDate, featureData);

					if (currentLatLng != null && mapClickFlag) {
						pickValue(currentLatLng);
					}

					weekWidth(ifLayer);
				}else{
					//判断播放按钮是否打开
					if (kolse) {
						$("#action").css("display", "block");
						$("#stop").css("display", "none")
					}
					//停止自动播放
					moveStop();

					title = $(this).attr("name");
					$("#pointer .xs").html(title + ":00");
					var indexClick2 = $(this).index();
					var indexClick1 = $(this).parent(".mellDay").index();
					//清除之前的样式
					$(".mellDay").removeClass("redMellDay");
					$(".bbb").removeClass("red");
					//因为$("#all")的第一个mellDay的下标是3。
					if (indexClick1 - 3 > 0) {
						//改变鼠标点击位置之前的mellDay的颜色
						for (j = 0; j <= indexClick1 - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					}
					//改变当前点击.bbb的之前的颜色
					for (k = 0; k <= indexClick2; k++) {
						$(".mellDay").eq(indexClick1 - 3).find(".bbb").eq(k).addClass("red");
					}


					//确定指针的位置  1：盒子的总长度   2:指针宽度的一半   3： mellDay盒子个数  4:.bbb盒子的个数
					if (Boolean(qel2) && Boolean(qel3)) {
						if (indexClick1 - 3 >= qel1 + qel2 - 1) {
							var smarlWidth = $(".mellDay").eq(qel3 + qel2 - 1).find(".bbb").width() + 1;
							var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
							var DivWidth2 = (indexClick2 + 1) * (parseFloat(smarlWidth));//+1是因为。bbb有一像素的border
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px"
							$("#pointer").css("left", poLeft)


						} else if (indexClick1 - 3 >= qel1 && indexClick1 - 3 < qel1 + qel2) {
							var smarlWidth = $(".mellDay").eq(qel2 - 1).find(".bbb").width() + 1;
							var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
							var DivWidth2 = (indexClick2 + 1) * (parseFloat(smarlWidth));//+1是因为。bbb有一像素的border
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px"
							$("#pointer").css("left", poLeft)
						} else {
							var qel1Length = $(".mellDay").eq(0).find(".bbb").length;
							var bbbFloatValue = $(".mellDay").width() / qel1Length;
							var smarlWidth = $(".mellDay").eq(0).find(".bbb").width() + 1;
							var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
							var DivWidth2 = (indexClick2 + 1) * (parseFloat(bbbFloatValue));  //+1是因为。bbb有一像素的border
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px"
							$("#pointer").css("left", poLeft)
						}
					} else if (Boolean(qel2 && qel3 == null)) {
						if (indexClick1 - 3 >= qel1) {

							var smarlWidth = $(".mellDay").eq(qel2).find(".bbb").width() + 1;
							var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
							var DivWidth2 = (indexClick2 + 1) * (parseFloat(smarlWidth));//+1是因为。bbb有一像素的border
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px"
							$("#pointer").css("left", poLeft)
						} else {
							var qel1Length = $(".mellDay").eq(0).find(".bbb").length;
							var bbbFloatValue = $(".mellDay").width() / qel1Length;
							var smarlWidth = $(".mellDay").eq(0).find(".bbb").width() + 1;
							var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
							var DivWidth2 = (indexClick2 + 1) * (parseFloat(bbbFloatValue));  //+1是因为。bbb有一像素的border
							spanPointer = parseInt($("#pointer").width()) / 2;
							var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px"
							$("#pointer").css("left", poLeft)
						}
					} else {
						var DivWidth1 = (indexClick1 - 3) * parseFloat($(".mellDay").width());
						var DivWidth2 = (indexClick2 + 1) * (parseFloat($(".bbb").width() + 1));  //+1是因为。bbb有一像素的border
						spanPointer = parseInt($("#pointer").width()) / 2;
						var poLeft = DivWidth1 + DivWidth2 - spanPointer + "px";
						$("#pointer").css("left", poLeft);
					}


                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					if (!mapClickFlag) {
						initGif(featureData, 2);
					}

					getUrl(nuTm, newDate, featureData);

					if (currentLatLng != null && mapClickFlag) {
						pickValue(currentLatLng);
					}

					weekWidth(ifLayer);
				}



			})
		}
	}

	// 直接修改$("#pointer").html来显示   注意： 不通过位置坐标进行判断 以造成误差。
	function weekWidth(ifLayer) {
		//console.log(ifLayer)
		getDivIndex();
		var redOne = $(".redMellDay").length;   //红色大div的个数
		if (redOne == $(".mellDay").length) {
			redOne -= 1;
		}

		if(ifLayer){
			var redplace = parseInt($("#pointer").css("left"))+$("#pointer").width()/2-5;
			var messDay = $(".messDay").width()+1;
			var num = parseInt(redplace/messDay);

			var weekS = $(".messDay").eq(num).html();					//获取显示内容；
		        var dayS = $(".messDay").eq(num).find(".dayName").html();	//获取显示内容；
		        var str1 = weekS.substring(0, 2);	//截取
		        var str2 = dayS.substring(6, 9); //截取

		        $("#pointer b").html(str1);
		        $("#pointer p").html(str2);

		}else{
			var redTwo = $(".red").length;			//红色小div的个数
			    var mellDayWidth = $(".mellDay").width();  //红色大div的宽度
			    var messDayWidth = $(".messDay").width() + 1;  //标注栏目div的宽度
			    var bbbwidth = $(".mellDay").eq(0).find(".bbb").width() + 1; //红色小div的宽度
			var bbQel1Length = $(".mellDay").eq(0).find(".bbb").length;
			var bbQel2Width = $(".mellDay").eq(qel2).find(".bbb").width() + 1;
			var bbQel2Length = $(".mellDay").eq(qel2).find(".bbb").length;
			var allLeft = parseFloat($("#all").css("left"));
			var qel1Num = bbQel1Length * qel1;
			if (Boolean(qel2)) {
				if (redOne >= qel1) {
			            var numMessDay = parseInt((mellDayWidth * redOne + bbQel2Width * redTwo + allLeft) / messDayWidth);
			            var weekS = $(".messDay").eq(numMessDay).html();					//获取显示内容；
			            var dayS = $(".messDay").eq(numMessDay).find(".dayName").html();	//获取显示内容；
			            var str1 = weekS.substring(0, 2);	//截取
			            var str2 = dayS.substring(6, 9); //截取
			            $("#pointer b").html(str1);
			            $("#pointer p").html(str2);
			        } else {
			            var numMessDay = parseInt((mellDayWidth * redOne + bbbwidth * redTwo + allLeft) / messDayWidth);
			            var weekS = $(".messDay").eq(numMessDay).html();					//获取显示内容；
			            var dayS = $(".messDay").eq(numMessDay).find(".dayName").html();	//获取显示内容；
			            var str1 = weekS.substring(0, 2);	//截取
			            var str2 = dayS.substring(6, 9); //截取
			            $("#pointer b").html(str1);
			            $("#pointer p").html(str2);
			        }
			    } else {
			        //得到红色条末端的时候在第几个messDay范围内  直接读取 那个messDay里面的 week 与 day  不再做位置坐标判断。
			        var numMessDay = parseInt((mellDayWidth * redOne + bbbwidth * redTwo + allLeft) / messDayWidth);
			        var weekS = $(".messDay").eq(numMessDay).html();					//获取显示内容；
			        var dayS = $(".messDay").eq(numMessDay).find(".dayName").html();	//获取显示内容；
			        var str1 = weekS.substring(0, 2);	//截取
			        var str2 = dayS.substring(6, 9); //截取
			        $("#pointer b").html(str1);
			        $("#pointer p").html(str2);
			    }
		}



	}

	//开始自动播放
	$("#action").click(function () {
		kolse = true;
		$(this).toggle();
		$("#stop").toggle();
		timeMove(ifLayer);
	})

	// 点击上一个的时候 如果当前正在进行播放事件  切换播放暂停按钮
	if (kolse) {
		$("#action").css("display", "block");
		$("#stop").css("display", "none");
	}
	kolse = false;

	// 自动播放函数：
	function timeMove(ifLayer) {
		time = setInterval(function () {
			go(ifLayer); 			//下一个运动函数
			weekWidth(ifLayer);  	//更新时间
		}, 1500)
	}

	//暂停自动播放
	$("#stop").click(function () {
		kolse = false;
		$(this).toggle();
		$("#action").toggle();
		moveStop();
	})


	// //鼠标拖拽事件
	$("#pointer").mousedown(function (e) {
		var mouseClear = true;
		var xLiness;
		var lineMax;
		var lineMin;
		var ches = ($("html").width() - $("footer").width()) / 2;
		//阻止默认事件
	        stopDef(e);
	        //停止自动播放
	        moveStop();
	        //判断播放按钮是否打开
		if (kolse) {
			$("#action").css("display", "block");
			$("#stop").css("display", "none");
		}


		$("body").mousemove(function () {

			if (mouseClear) {
				var theEvent = window.event || arguments.callee.caller.arguments[0];
				var mX = theEvent.pageX ? theEvent.pageX : theEvent.x;
				xLiness = mX - ches - $("#pointer").width() / 2;
				lineMax = lineAll;
				lineMin = ches;

				if(ifLayer){
					if (Boolean(qel2) && !Boolean(qel3)) {

						var oLine = xLiness + $("#pointer").width()/2;
						var allLine = $("#all").width();
						var oPinter = $("#pointer").width();
						var first = $(".mellDay").eq(0).width()+1;
						var firstSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;
						//第一个mellDay的最后一个在一小时的当中与第一个相同

						var lastSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;

						var second = $(".mellDay").eq(1).width();
						//最后一个div的width  它与第二个mellDay的第一个bbb相同
						var lastIndex=$("#all").find(".bbb").length;
						var secondSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

						//第一个预报的小标
						var nomal = $(".mellDay").eq(0).find(".nomal").index();
						//var nomalwidth = $(".mellDay").eq(0).find(".nomal").width()+1;
						var nomalwidth  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;


						if(oLine < 0){
							oLine = 0;
						}else if(oLine > allLine){
							oLine = allLine;
						}

						$(".redMellDay").removeClass("redMellDay");
						$(".red").removeClass("red");

						if( oLine <= first){
							// 分为三种情况
							var o1 = nomal*firstSmall; //实况的长度
							var o2 = o1+nomalwidth;//第一个预报的长度
							//console.log(oLine)
							if(oLine >= o2 && oLine <= first){
								var len = parseInt((oLine - o2)/lastSmall);
								var lens = len+nomal+1;
								for(i=0;i<lens;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								if( $(".mellDay").eq(0).find(".bbb").length == $(".mellDay").eq(0).find(".red").length ){
									$(".mellDay").eq(0).find(".bbb").removeClass("red");
									$(".mellDay").eq(0).addClass("redMellDay");
								}

								var point = lens*lastSmall - oPinter/2 +"px";

								$("#pointer").css("left",point);

							}else if( o1< oLine && oLine <= o2){
								for(i=0;i<nomal+1+1;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								var point = o2 + nomalwidth - oPinter/2 +"px";
								$("#pointer").css("left",point);

							}else if( 0 <= oLine && oLine <= o1){
								var len = oLine/firstSmall;
								for(i=0;i<len+1;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								if(0<= oLine && oLine<= firstSmall){
									$(".mellDay").eq(0).find(".bbb").eq(0).addClass("red");
								}
								var red = $(".red").length;
								var point = red*firstSmall - oPinter/2 +"px";
								$("#pointer").css("left",point);

							}
							var reds = $(".red").length;
							var hours = $(".red").eq(reds-1).attr("name")+":00";

							if(reds == 0){
								var bigRedLength = $(".redMellDay").length;
								var noWell = $(".redMellDay").eq(bigRedLength-1).find(".bbb").length;
								var hours = $(".redMellDay").eq(bigRedLength-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
							}
							$("#pointer .xs").html(hours);


						}else{
							var len = parseInt( (oLine - first)/second );   // redMellDay
							var lenSmall = ((oLine - first)%second)/secondSmall;  //red

							for(i=0;i<len+1;i++){
								$(".mellDay").eq(i).addClass("redMellDay");
							}

							for(i=0;i<lenSmall;i++){
								$(".mellDay").eq(len+1).find(".bbb").eq(i).addClass("red");
							}

							var redMell = $(".redMellDay").length;
							var reds = $(".red").length;
							var point = first + (redMell-1)*second + reds*secondSmall - oPinter/2 +"px";
							$("#pointer").css("left",point)
							var hours = $(".red").eq(reds-1).attr("name")+":00";

							if(reds == 0){
								var bigRedLength = $(".redMellDay").length;
								var noWell = $(".redMellDay").eq(bigRedLength-1).find(".bbb").length;
								var hours = $(".redMellDay").eq(bigRedLength-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
							}
							$("#pointer .xs").html(hours);

						}
					} else if (Boolean(qel3)) {


					} else {

						var oLine = xLiness + $("#pointer").width()/2;
						var allLine = $("#all").width();
						var oPinter = $("#pointer").width();
						var first = $(".mellDay").eq(0).width()+1;


						var firstSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;


						//第一个mellDay的最后一个在一小时的当中与第一个相同

						var lastSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;


						var second = $(".mellDay").eq(1).width();
						//最后一个div的width  它与第二个mellDay的第一个bbb相同
						var lastIndex=$("#all").find(".bbb").length;
						var secondSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;


						//第一个预报的小标
						var nomal = $(".mellDay").eq(0).find(".nomal").index();

						var firstNomal;
						if(Tm<6){
							if(liveTm==23){
								firstNomal=24;
							}else{
								firstNomal=liveTm+1+24;
							}
						}else if(Tm>=6&&Tm<18){
							firstNomal=liveTm+1;
						}else{
							firstNomal=liveTm+1;
						}
						//第一个预报的宽度
						var nomalwidth  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[firstNomal]).width)+1;



						if(oLine < 0){
							oLine = 0;
						}else if(oLine > allLine){
							oLine = allLine;
						}

						$(".redMellDay").removeClass("redMellDay");
						$(".red").removeClass("red");

						var o1 = nomal*firstSmall; //实况的长度
						var o2 = o1+nomalwidth;//第一个预报的长度
						if(oLine <= first){
							if(oLine<=o1&&oLine>=0){
								//表示在实况的范围内拖拽
								var len = Math.floor(oLine/firstSmall);
								for(i=0;i<len;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								if(0<= oLine && oLine<= firstSmall){
									$(".mellDay").eq(0).find(".bbb").eq(0).addClass("red");
								}
								var red = $(".red").length;
								var point = red*firstSmall - oPinter/2 +"px";
								$("#pointer").css("left",point);
							}else if( o1< oLine && oLine <= o2){
								//第一个预报
								for(i=0;i<nomal+1;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								var point = o1 + nomalwidth - oPinter/2 +"px";
								$("#pointer").css("left",point);
							}else{
								var len = Math.ceil((oLine - o2)/secondSmall);
								var lens = len+nomal+1;
								for(i=0;i<lens;i++){
									$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
								}

								if( $(".mellDay").eq(0).find(".bbb").length == $(".mellDay").eq(0).find(".red").length ){
									$(".mellDay").eq(0).find(".bbb").removeClass("red");
									$(".mellDay").eq(0).addClass("redMellDay");
								}


								var point = len*secondSmall+o2 - oPinter/2 +"px";

								$("#pointer").css("left",point);
							}
						}else{
							var len = parseInt( (oLine - first)/second );   // redMellDay
							var lenSmall = ((oLine - first)%second)/secondSmall;  //red

							for(i=0;i<len+1;i++){
								$(".mellDay").eq(i).addClass("redMellDay");
							}

							for(i=0;i<lenSmall;i++){
								$(".mellDay").eq(len+1).find(".bbb").eq(i).addClass("red");
							}

							var redMell = $(".redMellDay").length;
							var reds = $(".red").length;
							var point = first + (redMell-1)*second + reds*secondSmall - oPinter/2 +"px";
							$("#pointer").css("left",point)
							var hours = $(".red").eq(reds-1).attr("name")+":00";

							if(reds == 0){
								var bigRedLength = $(".redMellDay").length;
								var noWell = $(".redMellDay").eq(bigRedLength-1).find(".bbb").length;
								var hours = $(".redMellDay").eq(bigRedLength-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
							}
							$("#pointer .xs").html(hours);
						}

						var reds = $(".red").length;
						var hours = $(".red").eq(reds-1).attr("name")+":00";

						if(reds == 0){
							var bigRedLength = $(".redMellDay").length;
							var noWell = $(".redMellDay").eq(bigRedLength-1).find(".bbb").length;
							var hours = $(".redMellDay").eq(bigRedLength-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
						}
						$("#pointer .xs").html(hours);
						}


				}else{
					var mellWidth = $(".mellDay").width();
					var bbbWidth = $(".mellDay").eq(0).find(".bbb").width() + 1;
					var bbbQelWidth = $(".mellDay").eq(qel1).find(".bbb").width() + 1;
					var bbbQelWidth3 = $(".mellDay").eq(qel1+qel2-1).find(".bbb").width() + 1;
					var Wd = $(".mellDay").width() / 24;
					var LoneOne = (Wd * 8);
					var LoneTwo = (Wd * 20);
					var LineOne = (Wd * 15.5);
					var LineTwo = (Wd * 3.5);


					if (Tm >= 8 && Tm <= 20) {
						if (xLiness <= 0) {
							xLiness = 0;
						} else if (xLiness >= lineMax) {
							xLiness = lineMax - 5;
						}
					} else {
						if (xLiness <= 0) {
							xLiness = 0;
						} else if (xLiness >= lineMax) {
							xLiness = lineMax - 5;
						}
					}
					xPointer = xLiness - spanPointer;

					xLinesspv = xLiness + parseFloat($("#all").css("left"));
					var teTime = xLinesspv % lineDay / lineHours;
					var teWeek = parseInt(xLinesspv / (lineAll / Divs) + newDate.getDay());
					var sow = document.getElementById("pointer b");
					bWeek(teWeek);
					$(".xs").html(parseInt(teTime) + ":00");
					var p = document.getElementsByClassName("pDay")[0];
					var numDay = newDate.getDate() + parseInt(xLinesspv / (lineAll / Divs));
					if (xLinesspv <= lineAll / Divs) {
						numDay = newDate.getDate();
					}
					DateCruer(p, numDay);

					$(".mellDay").removeClass("redMellDay");
					$(".bbb").removeClass("red");
					if(Boolean(qel3)){
						var a = xLiness;
						var redBnum = parseInt(a / mellWidth);
						if (redBnum >= qel1+qel2-1) {
							var redSnum = parseInt((a % mellWidth) / bbbQelWidth3);
							for (i = 0; i <= redBnum - 1; i++) {
								$(".mellDay").eq(i).addClass("redMellDay");
							}
							for (i = 0; i <= redSnum; i++) {
								$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
							}
							var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
							$("#pointer .xs").html(title + ":00");
							var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbQelWidth3 - spanPointer;
							$("#pointer").css("left", weizhi);

						}else if(redBnum >= qel1){
							var redSnum = parseInt((a % mellWidth) / bbbQelWidth);
							for (i = 0; i <= redBnum - 1; i++) {
								$(".mellDay").eq(i).addClass("redMellDay");
							}
							for (i = 0; i <= redSnum; i++) {
								$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
							}
							var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
							$("#pointer .xs").html(title + ":00");
							var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbQelWidth - spanPointer;
							$("#pointer").css("left", weizhi);

						} else {
							var redSnum = parseInt((a % mellWidth) / bbbWidth);
							for (i = 0; i <= redBnum - 1; i++) {
								$(".mellDay").eq(i).addClass("redMellDay");
							}
							for (i = 0; i <= redSnum; i++) {
								$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
							}
							var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
							$("#pointer .xs").html(title + ":00");
							var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbWidth - spanPointer;
							$("#pointer").css("left", weizhi);

						}
					}else if (Boolean(qel2)&&Boolean(qel3)) {
						var a = xLiness;
						var redBnum = parseInt(a / mellWidth);
						if (redBnum >= qel1) {
							var redSnum = parseInt((a % mellWidth) / bbbQelWidth);
							for (i = 0; i <= redBnum - 1; i++) {
								$(".mellDay").eq(i).addClass("redMellDay");
							}
							for (i = 0; i <= redSnum; i++) {
								$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
							}
							var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
							$("#pointer .xs").html(title + ":00");
							var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbQelWidth - spanPointer;
							$("#pointer").css("left", weizhi);

						} else {
							var redSnum = parseInt((a % mellWidth) / bbbWidth);
							for (i = 0; i <= redBnum - 1; i++) {
								$(".mellDay").eq(i).addClass("redMellDay");
							}
							for (i = 0; i <= redSnum; i++) {
								$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
							}
							var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
							$("#pointer .xs").html(title + ":00");
							var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbWidth - spanPointer;
							$("#pointer").css("left", weizhi);

						}
					} else {
						var a = xLiness;
						var redBnum = parseInt(a / mellWidth);
						var redSnum = parseInt((a % mellWidth) / bbbWidth);
						for (i = 0; i <= redBnum - 1; i++) {
							$(".mellDay").eq(i).addClass("redMellDay");
						}
						for (i = 0; i <= redSnum; i++) {
							$(".mellDay").eq(redBnum).find(".bbb").eq(i).addClass("red");
						}
						var title = $(".mellDay").eq(redBnum).find(".red").last().attr("name");
						$("#pointer .xs").html(title + ":00");
						var weizhi = redBnum * mellWidth + (redSnum + 1) * bbbWidth - spanPointer;
						$("#pointer").css("left", weizhi);
					}
				}

				weekWidth(ifLayer);
			}
		});

		$("body").mouseup(function () {
			mouseClear = false;

            var obj;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    obj=$("li.liSelect").text();
                }
            }else{
                obj=$(".select").children("span").html();
            }
			var featureData = getCheckedFeatureData(obj);
			getUrl(nuTm, startTime, featureData);



			if (currentLatLng != null && mapClickFlag && yxMapClick) {
				pickValue(currentLatLng);
			}

		});
	});
	
	// 鼠标离开时间轴隐藏时间信息
	$(".lineMv").mouseleave(function () {
		$("#time").css("display", "none");
	});


	// 前一个 （点击事件）
	$("#back").click(function () {

		//console.log(ifLayer)
		//停止自动播放
		moveStop();
		Back(ifLayer);
		weekWidth(ifLayer);
	})

	//后一个
	$("#go").click(function () {

		// 点击上一个的时候 如果当前正在进行播放事件  切换播放暂停按钮
		if (kolse) {
			$("#action").css("display", "block");
			$("#stop").css("display", "none")
		}
		kolse = false;
		//停止自动播放
		moveStop();
		go(ifLayer);
		weekWidth(ifLayer);
	})

	if(isMobile()){
		oDiv2.addEventListener('touchstart', thismousedown);
		oDiv2.addEventListener('touchend', thismouseup);
		oDiv2.addEventListener('touchmove', thismousemove);
	}else{
		oDiv2.addEventListener('mousedown', thismousedown);
		var bodyMouse=document.getElementsByTagName("body")[0];
		oDiv2.addEventListener('mouseup', thismouseup);
		oDiv2.addEventListener('mousemove', thismousemove);
	}


	// 每一次切换数据  初始化 时间轴起始位置
	function init() {
		$("#scorlSep").css("left", 80);
		$("#parst").css("left", 0);
		$("#inp").css("left", 45);
		//console.log(hel1)
		if (hel1 <= 24 && hel1 >= 6) {
			ten = 6;
		} else if (hel1 < 6 && hel1 >= 3) {
			if(ifLayer){
				ten=20;
			}else{
				ten=12
			}
			//ten = 12;
		} else if (hel1 < 3 && hel1 >= 1) {
			ten = 30;
		}

	}

	// centerPointer
	//执行顺序： 待动态完成.hours之后执行。
	function centerPointer(ifLayer) {

		if(ifLayer){
			var parstLeft = 0 - $(".hours").width() + "px";
			if (Boolean(qel2) && !Boolean(qel3)) {
				if(Tm<6){
					var temp=liveTm
					if(liveTm==23){
						temp=-1;
					}
					$("#parst").css("left", parseInt(parstLeft)*(24+temp+1)-10+"px");
				}else{
					$("#parst").css("left", parseInt(parstLeft)*(liveTm+1)-10+"px");
				}

			}else if (Boolean(qel3)) {


			} else {
				var a;var b;var c;
				a = (45 - (liveTm+1)) % hel1;
				b = Math.ceil((45 - (liveTm+1)) / hel1);
				if(a == 0){
					c = hel1*ten/2;
				}else{
					c = a*ten/2;
				}
				if(Tm>=6&&Tm<18){

					$("#parst").css("left", parseInt(parstLeft)*(liveTm+1)-c+"px");
				}else if(Tm<6){
					var tmpTm=liveTm;
					if(liveTm==23){
						a = (45 - (24+tmpTm+1)) % hel1;
						b = Math.ceil((45 - (24+tmpTm+1)) / hel1);
						if(a == 0){
							c = hel1*ten/2;
						}else{
							c = a*ten/2;
						}
						$("#parst").css("left", parseInt(parstLeft)*24-c+"px");
					}else{
						$("#parst").css("left",  parseInt(parstLeft)*(liveTm+1+24)-c+"px");
					}

				}else{
					$("#parst").css("left",  parseInt(parstLeft)*(liveTm+1)-c+"px");
				}

			}


		}else{
			if (Boolean(qel2) && !Boolean(qel3)) {
				var parstLeft = 0 - $(".hours").width() / 2- (hel1*ten-hel1 * ten/2) + "px";
				if((nuTm+hel1)>24){
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1-24)*ten-hel1 * ten/2) + "px";
				}else{
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1)*ten-hel1 * ten/2) + "px";
				}
				$("#parst").css("left", parstLeft);
			}else if (Boolean(qel3)) {
				var parstLeft = 0 - $(".hours").width() / 2- (hel1*ten-hel1 * ten/2) + "px";
				if((nuTm+hel1)>24){
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1-24)*ten-hel1 * ten/2) + "px";
				}else{
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1)*ten-hel1 * ten/2) + "px";
				}
				$("#parst").css("left", parstLeft);

			} else {
				var parstLeft = 0 - $(".hours").width() / 2- (hel1*ten-hel1 * ten/2) + "px";
				if((nuTm+hel1)>24){
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1-24)*ten-hel1 * ten/2) + "px";
				}else{
					parstLeft = 0 - $(".hours").width() / 2- ((nuTm+hel1)*ten-hel1 * ten/2) + "px";
				}
				$("#parst").css("left", parstLeft);
			}
		}

	}



	function chartJS() {
		var mobile = isMobile();
		if (mobile) {
			$("#echartss").css("height", "210px");
		}
	}

//移动端的title样式
	if (isMobile()) {
        //网页说明在手机端的处理
		$(".main_title1").attr("style", "display:block;width:100%;position: absolute;top: 50px;left:0;z-index: 999;")

		$(".main_title").attr("style", "padding-left:5px;padding-right:5px;border-radius:5px;width:130px;line-height: 20px;font-size: 16px;text-align: center;color:#fff;background: rgba(51, 51, 51, 0.3);margin:0 auto;");
        //下拉选择在手机端的处理
    $(".searchDiv").css({top:0,left:"20px"});
        $(".newText").css({top:50})
	} else {
		$(".main_title").attr("style", "padding-left:15px;padding-right:15px;border-radius:20px;width:250px;line-height: 40px;font-size:30px;text-align: center;color:#fff;background: rgba(51, 51, 51, 0.3);margin:0 auto;")

	}
	//  return   false  or  ture   进行判断是否是移动端还是PC端
	function isMobile() {
		var sUserAgent = navigator.userAgent.toLowerCase(),
			bIsIpad = sUserAgent.match(/ipad/i) == "ipad",
			bIsIphoneOs = sUserAgent.match(/iphone os/i) == "iphone os",
			bIsMidp = sUserAgent.match(/midp/i) == "midp",
			bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4",
			bIsUc = sUserAgent.match(/ucweb/i) == "ucweb",
			bIsAndroid = sUserAgent.match(/android/i) == "android",
			bIsCE = sUserAgent.match(/windows ce/i) == "windows ce",
			bIsWM = sUserAgent.match(/windows mobile/i) == "windows mobile",
			bIsWebview = sUserAgent.match(/webview/i) == "webview";
		return (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM);
	}

	// 动态创建li
	function creatLi(ifLayer) {
		var contUl = document.getElementById("parst");

		if(ifLayer) {
			for (i = 0; i < dayes - 1; i++) {
				var contLi = document.createElement("li");
				contLi.className = "days";
				contUl.appendChild(contLi)
			}
			var ds = ($("#dayZet").width() / $("#dayZet li").length);
			//var ds = 1440;

			var Wd = ds / 24;
			var key;
			if (Tm >= 6 && Tm < 18) {
				key=liveTm+1;
				var lengthMS = $(".days").length;
				$("#parst").css("width", ds * (lengthMS - 1) + Wd * 9);

				var oDiv = document.getElementsByClassName("days")[0];
				oDiv.style.width = (ds + Wd * 9) + "px";

				if (Boolean(qel2) && !Boolean(qel3)) {
					for (i = 0; i < qel1 + qel2; i++) {
						var days = document.getElementsByClassName("days")[i];

						var a = (33 - (liveTm+1)) % hel1;
						var b = Math.ceil((33 - (liveTm+1)) / hel1);
						var len = (liveTm+1) + b;
						var c;
						if(i == 0){
							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");

									aaa.style.width = 20 + "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");

									aaa.style.width =20+ "px";
									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", liveTm +1);
									aaa.innerHTML = (liveTm +1)%24;
									days.appendChild(aaa);
								}else{

									var aaa = document.createElement("div");
									//aaa.style.width = (Wd-0.3) * hel1 + "px";
									aaa.className = "bbb";
									//aaa.setAttribute("id","flexNone");

									aaa.style.width = 20*hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", (g + (j-(liveTm+1)) * hel1) );
									aaa.innerHTML = (g + (j-(liveTm+1)) * hel1) % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id","flexNone");
							days.style.width = 20 * 33 + "px";
						}else if (i <= qel1 - 1) {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name = ( 8 + (j+1)* hel1);
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel1 * 20 + "px"
								days.appendChild(aaa);
							}
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name =35+ (i-1)*24+j*hel2;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel2 * 20 + "px"
								days.appendChild(aaa);
							}
						}
					}
				} else if (Boolean(qel3)) {


				} else {
					qel2 = null;
					qel3 = null;
					hel2 = null;
					hel3 = null;
					for (var i = 0; i < qel1; i++) {
						var days = document.getElementsByClassName("days")[i];
						var a = (33 - (liveTm + 1)) % hel1;
						var b = Math.ceil((33 - (liveTm + 1)) / hel1);
						var len = (liveTm + 1) + b;
						var c;
						if (i == 0) {
							var g;
							for (j = 0; j < len; j++) {
								if (j <= liveTm) {
									var aaa = document.createElement("div");
									aaa.style.width = 20 + "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								} else if (j == liveTm + 1) {
									var aaa = document.createElement("div");
									if (a == 0) {
										c = a + hel1;
									} else {
										c = a;
									}
									g = (j - 1 + c);
									aaa.style.width =20* c + "px";
									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", c + j - 1);
									aaa.innerHTML = (c + j - 1) % 24;
									days.appendChild(aaa);

								} else {

									var aaa = document.createElement("div");
									aaa.style.width = 20*hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									var name = liveTm + c + (j - liveTm - 1) * hel1;
									aaa.setAttribute("name", name);
									aaa.innerHTML = name % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id", "flexNone");
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";
								var name = liveTm + c + b * hel1 + j * hel1+(i-1)*24;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel1 * 20 + "px"
								days.appendChild(aaa);
							}
						}
					}

				}


			} else if (Tm >= 18) {
				key=liveTm+1;
				var lengthMS = $(".days").length;
				$("#parst").css("width", ds * (lengthMS - 1) + Wd * 9);
				//$(".days").eq(lengthMS - 1).remove();

				var oDiv = document.getElementsByClassName("days")[0];
				oDiv.style.width = (ds + Wd * 9) + "px";

				if (Boolean(qel2) && !Boolean(qel3)) {
					for (i = 0; i < qel1 + qel2; i++) {
						var days = document.getElementsByClassName("days")[i];

						var a = (45 - (liveTm+1)) % hel1;
						var b = Math.ceil((45 - (liveTm+1)) / hel1);
						var len = (liveTm+1) + b;
						var c;
						if(i == 0){
							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");

									aaa.style.width = 20 + "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");

									g = liveTm+1;

									aaa.style.width =20+ "px";
									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", liveTm +1);
									aaa.innerHTML = (liveTm +1)%24;
									days.appendChild(aaa);
								}else{

									var aaa = document.createElement("div");
									aaa.className = "bbb";

									aaa.style.width = 20*hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", (g + (j-(liveTm+1)) * hel1) );
									aaa.innerHTML = (g + (j-(liveTm+1)) * hel1) % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id","flexNone");
							days.style.width = 20 * 45 + "px";
						}else if (i <= qel1 - 1) {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name = ( 8 + (j+1)* hel1);
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel1 * 20 + "px"
								days.appendChild(aaa);
							}
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name =47+ (i-1)*24+j*hel2;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel2 * 20 + "px"
								days.appendChild(aaa);
							}

						}
					}
				} else if (Boolean(qel3)) {


				} else {
					qel2 = null;
					qel3 = null;
					hel2 = null;
					hel3 = null;
					for (var i = 0; i < qel1; i++) {
						var days = document.getElementsByClassName("days")[i];
						var a = (45 - (liveTm + 1)) % hel1;
						var b = Math.ceil((45 - (liveTm + 1)) / hel1);
						var len = (liveTm + 1) + b;
						var c;
						if (i == 0) {
							var g;
							for (j = 0; j < len; j++) {
								if (j <= liveTm) {
									var aaa = document.createElement("div");
									aaa.style.width =20+ "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								} else if (j == liveTm + 1) {
									var aaa = document.createElement("div");

									if (a == 0) {
										c = a + hel1;
									} else {
										c = a;
									}
									g = (j - 1 + c);
									aaa.style.width = 20 * c + "px";

									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");

									aaa.setAttribute("name", c + j - 1);
									aaa.innerHTML = (c + j - 1) % 24;
									days.appendChild(aaa);

								} else {

									var aaa = document.createElement("div");
									aaa.style.width =20* hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									var name = liveTm + c + (j - liveTm - 1) * hel1;
									aaa.setAttribute("name", name);
									aaa.innerHTML = name % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id", "flexNone");
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";
								aaa.style.width = 20 * hel1 + "px";
								var name = liveTm + c + b * hel1 + j * hel1+(i-1)*24;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								days.appendChild(aaa);

							}

						}
					}

				}


			} else if (Tm < 6) {
				if(liveTm==23){
					key=24;
				}else{
					key=24+liveTm+1;
				}
				var lengthMS = $(".days").length;
				$("#parst").css("width", ds * (lengthMS - 1) + Wd * 9);

				var oDiv = document.getElementsByClassName("days")[0];
				oDiv.style.width = (ds + Wd * 9) + "px";

				if (Boolean(qel2) && !Boolean(qel3)) {
					for (i = 0; i < qel1 + qel2; i++) {
						var days = document.getElementsByClassName("days")[i];

						var a = (45 - (liveTm+1)) % hel1;
						var b = Math.ceil((45 - (liveTm+1)) / hel1);
						var len = (liveTm+1) + b;
						var c;
						if(i == 0){
							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");

									aaa.style.width = 20 + "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");

									g = liveTm+1;

									aaa.style.width =20+ "px";
									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", liveTm +1);
									aaa.innerHTML = (liveTm +1)%24;
									days.appendChild(aaa);
								}else{

									var aaa = document.createElement("div");
									aaa.className = "bbb";

									aaa.style.width = 20*hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									aaa.setAttribute("name", (g + (j-(liveTm+1)) * hel1) );
									aaa.innerHTML = (g + (j-(liveTm+1)) * hel1) % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id","flexNone");
							days.style.width = 20 * 45 + "px";
						}else if (i <= qel1 - 1) {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name = ( 8 + (j+1)* hel1);
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel1 * 20 + "px"
								days.appendChild(aaa);
							}
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";

								var name =47+ (i-1)*24+j*hel2;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								aaa.style.width=hel2 * 20 + "px"
								days.appendChild(aaa);
							}

						}

					}
				} else if (Boolean(qel3)) {


				} else {
					qel2 = null;
					qel3 = null;
					hel2 = null;
					hel3 = null;
					for (var i = 0; i < qel1; i++) {
						var days = document.getElementsByClassName("days")[i];

						var a;
						var b ;
						var len;
						var c;
						if (i == 0) {
							var tmpTm=liveTm;
							if(liveTm==23){
								tmpTm=-1
							}
							a = (45 - (24+tmpTm + 1)) % hel1;
							b = Math.ceil((45 - (24+tmpTm + 1)) / hel1);
							len = (24+tmpTm + 1) + b;
							var g;
							for (j = 0; j < len; j++) {
								if (j <= 24+tmpTm) {
									var aaa = document.createElement("div");
									aaa.style.width =20 + "px";
									aaa.className = "hours";
									aaa.setAttribute("name", j);
									aaa.innerHTML = j % 24;
									days.appendChild(aaa);
								} else if (j == 24+tmpTm+ 1) {
									var aaa = document.createElement("div");

									if (a == 0) {
										c = a + hel1;
									} else {
										c = a;
									}
									g = (j - 1 + c);
									aaa.style.width =20 * c + "px";

									aaa.className = "hours nomal";
									aaa.setAttribute("id", "flexNone");

									aaa.setAttribute("name", c + j - 1);
									aaa.innerHTML = (c + j - 1) % 24;
									days.appendChild(aaa);

								} else {

									var aaa = document.createElement("div");
									aaa.style.width = 20 * hel1 + "px";
									aaa.className = "hours";
									aaa.setAttribute("id", "flexNone");
									var name = 24+tmpTm + c + (j - (24+tmpTm)- 1) * hel1;
									aaa.setAttribute("name", name);
									aaa.innerHTML = name % 24;
									days.appendChild(aaa);
								}

							}
							days.setAttribute("id", "flexNone");
						} else {
							var days = document.getElementsByClassName("days")[i];
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "hours";
								aaa.style.width = 20 * hel1 + "px";
								var name = 24+tmpTm + c + b * hel1 + j * hel1+(i-1)*24;
								aaa.setAttribute("name", name);
								aaa.innerHTML = name % 24;
								days.appendChild(aaa);

							}

						}
					}

				}

			}
			var htmlSey = $(".hours").eq(key).html();

			$("#inp p").html(htmlSey + ":00");

		}else{
			if((nuTm+hel1)>24){
				dayes=dayes+1;
			}
			for (i = 0; i < dayes - 1; i++) {
				var contLi = document.createElement("li");
				contLi.className = "days";
				contUl.appendChild(contLi)
			}
			if (Boolean(qel2) && !Boolean(qel3)) {

				for (i = 0; i < qel1 + qel2; i++) {
					var mellDiv = document.getElementsByClassName("days")[i];
					if (i <= qel1 - 1) {
						for (j = 0; j < 24 / hel1; j++) {
							var aaa = document.createElement("div");
							aaa.className = "hours";
							mellDiv.appendChild(aaa);
						}
					} else {
						for (j = 0; j < 24 / hel2; j++) {
							var aaa = document.createElement("div");
							aaa.className = "hours";
							mellDiv.appendChild(aaa);
						}
					}
				}
				var hoursWidth = hel1 * ten + "px";
				$(".hours").css("width", hoursWidth);
			} else if (Boolean(qel3)) {
				for (i = 0; i < qel1 + qel2 + qel3; i++) {
					$(".esDay").css({"width":ten*24})
					var mellDiv = document.getElementsByClassName("days")[i];
					if (i <= qel1 - 1) {
						for (j = 0; j < 24 / hel1; j++) {
							var aaa = document.createElement("div");
							aaa.className = "hours";
							aaa.style.width = ten*hel1 + "px";
							mellDiv.appendChild(aaa);

						}
					} else if (i < qel1 - 1 + qel2) {
						for (j = 0; j < 24 / hel2; j++) {
							var aaa = document.createElement("div");
							aaa.className = "hours";
							aaa.style.width = ten*hel2 + "px";
							mellDiv.appendChild(aaa);
						}

					} else {
						for (j = 0; j < 24 / hel3; j++) {
							var aaa = document.createElement("div");
							aaa.className = "hours";
							aaa.style.width = ten*hel3 + "px";
							mellDiv.appendChild(aaa);
						}

					}
				}

				if((nuTm+hel1)>24){
					$(".days").eq(0).css({"margin-left":((nuTm+hel1-24)*ten-hel1 * ten/2)});
				}else{
					$(".days").eq(0).css({"margin-left":((nuTm+hel1)*ten-hel1 * ten/2)});

				}
			}
			else {

				qel2 = null;
				qel3 = null;
				hel2 = null;
				hel3 = null;

				for (i = 0; i < dayes-1; i++) {
					var mellDiv = document.getElementsByClassName("days")[i];
					for (j = 0; j < 24 / hel1; j++) {
						var aaa = document.createElement("div");
						aaa.className = "hours";
						mellDiv.appendChild(aaa);
					}
				}
				var hoursWidth = hel1 * ten + "px";
				$(".hours").css("width", hoursWidth);


				if((nuTm+hel1)>24){
					$(".days").eq(0).css({"margin-left":((nuTm+hel1-24)*ten-hel1 * ten/2)});
				}else{
					$(".days").eq(0).css({"margin-left":((nuTm+hel1)*ten-hel1 * ten/2)});

				}



			}

			if (Tm >= 6 && Tm < 18) {
				for (i = 0; i < $(".hours").length; i++) {
					var mis = (timeSam[i] + 8);
					$(".hours").eq(i).attr("name", mis);
					$(".hours").eq(i).html(mis % 24);
				}
			} else if (Tm < 6 || Tm >= 18) {
				for (i = 0; i < $(".hours").length; i++) {
					var mis = (timeSam[i] + 20);
					$(".hours").eq(i).attr("name", mis);
					$(".hours").eq(i).html(mis % 24);
				}
			}

			var htmlSey = $(".hours").eq(0).html();
			$("#inp p").html(htmlSey + ":00");


			if (Boolean(qel3)) {

				var gum = $("#parst").find(".days").length;

				var numLeng = qel1 + qel2 - 1;
				for (i = numLeng; i < gum; i++) {
					$("#parst").find(".days").eq(i).find("div").attr("id", "right");
				}
			}
		}

	}

	// 不同时差跨度修正
	function celSever(ifLayer) {
		if(ifLayer){

		}else{
			if (Boolean(qel2) && qel3 == null) {
				for (i = qel1; i < $("#parst li").length; i++) {
					var child = $("#parst li").eq(i).children();
					var childWidth = hel2 * ten + "px";
					child.css("width", childWidth);
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {

			} else {
				return
			}
		}

	}

	//因为存在跨天问题  日期的现实必须单独处理 不能与包裹小时创建  与小时同级存在  用position定位
	function creatDate(ifLayer) {
		if(ifLayer){
			var liWidth = $("#parst li div").width();
			var divDate = document.createElement("ol");
			var parst = document.getElementById("parst");
			divDate.className = "dayZet";
			for (i = 0; i < dayes; i++) {
				var liDate = document.createElement("li");
				liDate.className = "esDay"
				divDate.appendChild(liDate);
			}

			parst.appendChild(divDate);
			if (Tm >= 6 && Tm < 18) {
				var teDay;
				var dt = new Date();
				dt = new Date(dt);
				dt = desend(dt, 1 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;
				for (i = 0; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd")
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * 20 + "px";
				var lenOne = (24 - 8 - 1) * 20 + "px";
				var lenTwo = (8 + 1) * 20 + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);

				$(".esDay").eq(lengths).css("width", lenTwo);
			} else if (Tm >= 18) {
				var teDay;
				var dt = new Date();
				dt = new Date(dt);
				dt = desend(dt, 2 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;

				for (i = -1; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd");
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * 20 + "px";
				var lenOne = (24 - 20 - 1) * 20 + "px";
				var lenTwo = (8 + 1) * 20 + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);

				$(".esDay").eq(lengths).css("width", lenTwo);
			}else{
				var teDay;
				var dt = new Date();
				dt =moment(dt).subtract(1,"day").toDate().setHours(20);
				dt = new Date(dt);
				dt = desend(dt, 2 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;

				for (i = -1; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd");
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * 20 + "px";
				var lenOne = (24 - 20 - 1) * 20 + "px";
				var lenTwo = (20 + 1) * 20 + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);

				$(".esDay").eq(lengths).css("width", lenTwo);
			}
		}else{
			var liWidth = $("#parst li div").width();
			var divDate = document.createElement("ol");
			var parst = document.getElementById("parst");
			divDate.className = "dayZet";
			var kuaDay=true;
			if((nuTm+hel1)>24){
				dayes=dayes-1;
				kuaDay=false;
			}
			for (i = 0; i < dayes; i++) {
				var liDate = document.createElement("li");
				liDate.className = "esDay"
				divDate.appendChild(liDate);
			}

			parst.appendChild(divDate);
			if (Tm >= 6 && Tm < 18) {
				var teDay;
				if(kuaDay){
					var dt = new Date();
				}else{
					var dt =moment(new Date()).subtract(-1,"day").toDate();
				}

				dt = new Date(dt);
				dt = desend(dt, 1 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;
				for (i = 0; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd")
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * ten + "px";
				var lenOne = (24 - 8 - 1) * ten + "px";
				var lenTwo = (8 + 1) * ten + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);

				$(".esDay").eq(lengths).css("width", lenTwo);
			} else if (Tm >= 18) {
				var teDay;
				if(kuaDay){
					var dt = new Date();
				}else{
					var dt = moment(new Date()).subtract(-1,"day").toDate();
				}

				dt = new Date(dt);
				dt = desend(dt, 2 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;

				for (i = -1; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd");
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * ten + "px";
				var lenOne = (24 - 20 - 1) * ten + "px";
				var lenTwo = (20 + 1) * ten + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);

				$(".esDay").eq(lengths).css("width", lenTwo);
			}else if(Tm<6){
				var teDay;
				if(kuaDay){
					var dt = new Date();
				}else{
					var dt = moment(new Date()).subtract(-1,"day").toDate();
				}

				dt=moment(dt).subtract(1,"day").toDate().setHours(20);
				dt = new Date(dt);
				dt = desend(dt, 2 * 24);
				dt = dt.Format("yyyy-MM-dd");
				var fit = $(".esDay").length;

				for (i = -1; i < fit; i++) {
					dt = new Date(dt);
					dt = add(dt, 24);
					dt = dt.Format("yyyy-MM-dd");
					$(".esDay").eq(i).html(dt);
				}
				var lenAll = 24 * ten + "px";
				var lenOne = (24 - 20 - 1) * ten + "px";
				var lenTwo = (20 + 1) * ten + "px";
				var lengths = $(".esDay").length - 1;
				$(".esDay").css("width", lenAll);
				$(".esDay").eq(lengths).css("width", lenTwo);
			}

		}

	}

	function thismousedown(e) {
		var event = e || window.event;
		event.preventDefault();
		isdrag = true;
		NowLeft = parseInt(oDiv2.style.left + 0);
		if(event.type=="mousedown"){
			disX =event.pageX;
		}else{
			disX = event.touches[0].pageX;
		}


		clearInterval(timeMove);
		$(".goStart").removeAttr("id");


		$(".change").css("display", "none");
		return false;
	}

	function thismousemove(e) {
		var event = e || window.event;
		event.preventDefault();
		if (isdrag) {
			if(event.type=="mousemove"){
				oDiv2.style.left = NowLeft + event.pageX - disX + 'px';
			}else{
				oDiv2.style.left = NowLeft + event.touches[0].pageX - disX + 'px';

			}

			return false;
		}
	}

	function add(date, day) {
		day = parseInt(day);
		var interTimes = day * 60 * 60 * 1000;
		interTimes = parseInt(interTimes);
		return new Date(Date.parse(date) + interTimes);
	}

	function desend(date, day) {
		day = parseInt(day);
		var interTimes = day * 60 * 60 * 1000;
		interTimes = parseInt(interTimes);
		return new Date(Date.parse(date) - interTimes);
	}

	function thismouseup() {
		isdrag = false;
		var parsetLeft = parseInt($("#parst").css("left"));
		var parsetWidth = $("#parst").width();
		if(ifLayer){
			if (parsetLeft >= 0) {
				var startLeft = 0 + "px";
				$("#parst").css("left", startLeft)
			} else if (parsetLeft <= 0 - parsetWidth) {
				var endLeft = 2 + 0 - parsetWidth + "px";
				$("#parst").css("left", endLeft);
			}
		}else{
			var temp;
			if((nuTm+hel1)>24){
				temp=((nuTm+hel1-24)*ten-hel1*ten/2)
			}else {
				temp = ((nuTm + hel1) * ten - hel1 * ten / 2);
			}

			if (parsetLeft >= -temp) {
				var startLeft = -temp + "px";
				$("#parst").css("left", startLeft)
			} else if (parsetLeft <= 0 - parsetWidth) {
				var endLeft = 2 + 0 - parsetWidth + "px";
				$("#parst").css("left", endLeft);
			}

		}

		var arry = hoursDel(ifLayer);
		var lenNum = arry[0];
		var left_Ul = arry[1] + "px";
		$("#parst").animate({left: left_Ul}, 200);
		if(ifLayer){
			var divName = parseInt($(".hours").eq(lenNum).attr("name"));
			var numHours = (divName % 24).toString();
			if (numHours.length < 2) {
				numHours = 0 + numHours;
			}
			var numDay = parseInt(divName / 24);
			$("#inp p").html(numHours + ":00");
			var dayHtml = $(".dayZet li").eq(numDay).html();
			var currentTime = dayHtml + " " + numHours + ":00";
		}else{
			var divName = parseInt($(".hours").eq(lenNum).attr("name"));
			var numHours = (divName % 24).toString();
			if (numHours.length < 2) {
				numHours = 0 + numHours;
			}
			var numDay = parseInt(divName / 24);
			$("#inp p").html(numHours + ":00");
			if((nuTm+hel1)>24){
				var dayHtml = $(".dayZet li").eq(numDay-1).html();
			}else{
				var dayHtml = $(".dayZet li").eq(numDay).html();
			}

			var currentTime = dayHtml + " " + numHours + ":00";
		}


		var startLeft=parseInt($("#parst").css("left"));
		var index=parseInt((-startLeft)/20);
		var numHours1=$(".hours").eq(index-1).html();
        var obj;
        if(newLujing){
            if($("li.liSelect").text()=="全部"){
                var i=$("li.liPage_liSelect").index();
                obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
            }else{
                obj=$("li.liSelect").text();
            }
        }else{
            obj=$(".select").children("span").html();
        }
		var featureData = getCheckedFeatureData(obj);
		if(ifLayer){
			if (Boolean(qel2) && !Boolean(qel3)) {
				var a,b;
				var firstForeLeft;
				//全部实况的结束时的left
				var shikLeft;
				//结束时的的left
				var endForeLeft=$("#parst").width();
				var  firstDayForeLeft
				if(Tm>=6&&Tm<18){
					firstForeLeft=(liveTm+1)*20+10;
					shikLeft=(liveTm+1)*20;
					firstDayForeLeft=33*20-10;
				}else if(Tm<6){
					var tmpTm=liveTm;
					if(liveTm == 23){
						tmpTm=-1
					}
					firstForeLeft=(24+tmpTm+1)*20+10;
					shikLeft=(24+tmpTm+1)*20;
					firstDayForeLeft=45*20-10;
				}else if(Tm>=18){
					firstForeLeft=(liveTm+1)*20+10;
					shikLeft=(liveTm+1)*20;
					firstDayForeLeft=45*20-10;
				}
				getUrl2(startTime,  featureData,arry[1],shikLeft,firstForeLeft,endForeLeft,parseInt(numHours),firstDayForeLeft)

			} else if (Boolean(qel3)) {


			} else {
				var a,b;
				var firstForeLeft;
				//全部实况的结束时的left
				var shikLeft;
				//结束时的的left
				var endForeLeft=$("#parst").width();

				if(Tm>=6&&Tm<18){
					a = (33 - (liveTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(liveTm+1)*20+b;
					shikLeft=(liveTm+1)*20;
				}else if(Tm<6){
					var tmpTm=liveTm
					if(liveTm == 23){
						tmpTm=-1
					}
					a = (45 - (24+tmpTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(24+tmpTm+1)*20+b;
					shikLeft=(24+tmpTm+1)*20;
				}else if(Tm>=18){
					a = (33 - (liveTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(liveTm+1)*20+b;
					shikLeft=(liveTm+1)*20;
				}
				var startLeft=parseInt($("#parst").css("left"));
				var index=parseInt((-startLeft)/20);
				var numHours1=$(".hours").eq(index-1).html();
                var obj;
                if(newLujing){
                    if($("li.liSelect").text()=="全部"){
                        var i=$("li.liPage_liSelect").index();
                        obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                    }else{
                        obj=$("li.liSelect").text();
                    }
                }else{
                    obj=$(".select").children("span").html();
                }
				var featureData = getCheckedFeatureData(obj);
				getUrl2(startTime,  featureData,arry[1],shikLeft,firstForeLeft,endForeLeft,parseInt(numHours),b)

			}
		}else{
			getUrl1(startTime, currentTime, featureData);
			
		}

		if (currentLatLng != null) {
			pickValue1(currentLatLng);
		}

	}

	//  **  偏移量问题：     解决方案一   ul外套一个div 让div-center  ul的left从0开始计算。
	function hoursDel(ifLayer) {
		var leftUl = Math.abs(parseInt($("#parst").css("left")));   // 必定为负值
		//console.log(leftUl)
		var divWidth = parseInt($(".hours").width());
		var liWidth = parseInt($("#parst li").width());
		var severWidth = parseInt($("#parst li").eq(qel1).children(".hours").width());
		var lenNum,
			severWidth3,
			animaLeft;


		if(ifLayer){

			if (Boolean(qel3)) {
				severWidth3 = parseInt($("#parst li").eq(qel1 + qel2 - 1).find("div").width());

				var arr = new Array();
				arr.push(lenNum);
				arr.push(animaLeft);

				return arr;
			}else if (Boolean(qel2) && qel3 == null) {
				var a,b;
				var firstForeLeft;
				//全部实况的结束时的left
				var shikLeft;
				//结束时的的left
				var endForeLeft=$("#parst").width();
				var  firstDayForeLeft
				var  tempIndex;
				if(Tm>=6&&Tm<18){
					firstForeLeft=(liveTm+1)*20+10;
					shikLeft=(liveTm+1)*20;
					firstDayForeLeft=33*20-10;
					tempIndex=32;
				}else if(Tm<6){
					var tmpTm=liveTm;
					if(liveTm == 23){
						tmpTm=-1
					}
					firstForeLeft=(24+tmpTm+1)*20+10;
					shikLeft=(24+tmpTm+1)*20;
					firstDayForeLeft=45*20-10;
					tempIndex=44;
				}else if(Tm>=18){
					firstForeLeft=(liveTm+1)*20+10;
					shikLeft=(liveTm+1)*20;
					firstDayForeLeft=45*20-10;
					tempIndex=44;
				}

				var startLeft=parseInt($("#parst").css("left"));
				if(-startLeft>endForeLeft-30){
					var index=Math.floor((shikLeft-10)/20)+Math.floor((endForeLeft-firstForeLeft-b)/60);
				}else{
					var index=(-startLeft)/20;
				}

				var numHours1=$(".hours").eq(index-1).html();

				if(-startLeft<firstDayForeLeft-5){
					var num=Math.floor((-startLeft)/20);
					startLeft=-num*20-10;
				}else if(-startLeft>=firstDayForeLeft-5&&-startLeft<=firstDayForeLeft+5){
					var num=tempIndex;
					startLeft=-firstDayForeLeft;
				}else if(-startLeft>firstDayForeLeft+5&&-startLeft<=endForeLeft-30){
					var num=tempIndex+Math.ceil((-startLeft-firstDayForeLeft-10)/60);
					startLeft=-firstDayForeLeft-40-Math.floor((-startLeft-firstDayForeLeft-10)/60)*20*3;

				}else{
					var num=tempIndex+Math.ceil((endForeLeft-30-firstDayForeLeft-10)/60);
					startLeft=-firstDayForeLeft-40-Math.floor((endForeLeft-30-firstDayForeLeft-10)/60)*20*3;
				}

				var arr = new Array();
				arr.push(num);
				arr.push(startLeft);

				return arr;

			} else if (Boolean(qel2) && Boolean(qel3)) {

			} else{
				var a,b;
				var firstForeLeft;
				//全部实况的结束时的left
				var shikLeft;
				//结束时的的left
				var endForeLeft=$("#parst").width();

				if(Tm>=6&&Tm<18){
					a = (33 - (liveTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(liveTm+1)*20+b;
					shikLeft=(liveTm+1)*20;
				}else if(Tm<6){
					var tmpTm=liveTm
					if(liveTm == 23){
						tmpTm=-1
					}
					a = (45 - (24+tmpTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(24+tmpTm+1)*20+b;
					shikLeft=(24+tmpTm+1)*20;
				}else if(Tm>=18){
					a = (33 - (liveTm+1)) % hel1;
					if(a ==0){
						b =20*hel1/2;
					}else{
						b=20*a/2;
					}
					firstForeLeft=(liveTm+1)*20+b;
					shikLeft=(liveTm+1)*20;
				}
				var startLeft=parseInt($("#parst").css("left"));
				if(-startLeft>=endForeLeft-30){
					var index=Math.floor((shikLeft-10)/20)+Math.floor((endForeLeft-firstForeLeft-b)/60);
				}else{
					var index=(-startLeft)/20;
				}

				var numHours1=$(".hours").eq(index-1).html();
				if(-startLeft<=shikLeft){
					var num=Math.floor((-startLeft)/20);
					startLeft=-num*20-10;
				}else if(-startLeft>shikLeft&&-startLeft<=firstForeLeft){
					var num=Math.floor((shikLeft)/20);
					startLeft=-shikLeft-b;
				}else if(-startLeft>firstForeLeft&&-startLeft<=endForeLeft-30){
					var num=Math.floor((shikLeft)/20)+1+Math.floor((-startLeft-firstForeLeft)/60);
					startLeft=-firstForeLeft-b-30-Math.floor((-startLeft-firstForeLeft)/60)*60;
				}else{
					var num=Math.floor((shikLeft)/20)+Math.floor((endForeLeft-firstForeLeft-b)/60);
					startLeft=-endForeLeft+30;
				}

				var arr = new Array();
				arr.push(num);
				arr.push(startLeft);

				return arr;

			}
		}else{

			if (Boolean(qel3)) {

				if((nuTm+hel1)>24){
					var temp=$(".hours").width() / 2+((nuTm+hel1-24)*ten-hel1 * ten/2);
				}else{
					var temp= $(".hours").width() / 2+ ((nuTm+hel1)*ten-hel1 * ten/2);
				}
				if(leftUl<=liWidth*qel1-36 +temp){
					divWidth = parseInt($(".hours").eq(0).width())
					lenNum =Math.ceil((leftUl-temp)/divWidth);
					var tabNum =Math.ceil((leftUl-temp)/divWidth);
					animaLeft = (0 - tabNum*divWidth-temp);
				}else if(leftUl<=liWidth*qel1+18+temp){
					var nums = (24/hel1)*qel1;
					lenNum =nums;
					animaLeft = -(liWidth*qel1+18+temp);
				}else if(leftUl>liWidth*qel1+18+temp && leftUl<= 72*(qel1+qel2-1)+liWidth*qel1+18+temp){
					severWidth = parseInt($(".days").eq(qel1).children(".hours").width());
					var nums = (24/hel1)*qel1;
					lenNum = Math.abs(parseInt((leftUl-liWidth*qel1+36-temp)/severWidth))+nums;
					var tabNum =Math.abs(parseInt((leftUl-liWidth*qel1+36-temp)/severWidth));
					animaLeft = (0 - tabNum*severWidth-(liWidth*qel1+18+temp));
				}else if(leftUl>72*(qel1+qel2-1)+liWidth*qel1+18+temp&&leftUl<=72*(qel1+qel2-1)+liWidth*qel1+18+temp+36+144){
					var nums = (24/hel1)*qel1;
					var nums2 = (24/hel2)*(qel2-1)
					lenNum =nums+nums2;


					animaLeft = (0 -(72*(qel1+qel2-1)+liWidth*qel1+18+temp+36+144));

				}else{
					severWidth3 = parseInt($(".days").eq(qel1 + qel2 - 1).find(".hours").width());
					var nums = (24/hel1)*qel1;
					var nums2 = (24/hel2)*(qel2-1)
					lenNum = Math.floor((leftUl-(72*(qel1+qel2-1)+liWidth*qel1+18+temp)-36)/severWidth3)+nums+nums2;

					var tabNum =  Math.floor((leftUl-(72*(qel1+qel2-1)+liWidth*qel1+18+temp)-36)/severWidth3);
					animaLeft = (0 -(72*(qel1+qel2-1)+liWidth*qel1+18+temp) - (tabNum+1)*severWidth3-36);
				}
				var arr = new Array();
				arr.push(lenNum);
				arr.push(animaLeft);

				return arr;
			}else if (Boolean(qel2) && qel3 == null) {
				if (leftUl < liWidth * qel1) {
					lenNum = Math.abs(parseInt(leftUl / divWidth));
					var tabNum = parseInt(leftUl / divWidth);
					animaLeft = (0 - tabNum * divWidth - divWidth / 2);
				} else {
					var nums = (24 / hel1) * qel1;
					lenNum = Math.abs(parseInt((leftUl - liWidth * qel1) / severWidth)) + nums;
					var tabNum = Math.abs(parseInt((leftUl - liWidth * qel1) / severWidth));
					animaLeft = (0 - liWidth * qel1 - tabNum * severWidth - severWidth / 2);
				}

				var arr = new Array();
				arr.push(lenNum);
				arr.push(animaLeft);

				return arr;

			} else if (Boolean(qel2) && Boolean(qel3)) {
				if (leftUl < liWidth * qel1) {

					lenNum = Math.abs(parseInt(leftUl / divWidth));
					var tabNum = parseInt(leftUl / divWidth);
					animaLeft = (0 - tabNum * divWidth - divWidth / 2);
				} else if (leftUl >= liWidth * qel1 && leftUl < liWidth * (qel1 + qel2 - 1)) {

					var nums = (24 / hel1) * qel1;
					lenNum = Math.abs(parseInt((leftUl - liWidth * qel1) / severWidth)) + nums;
					var tabNum = Math.abs(parseInt((leftUl - liWidth * qel1) / severWidth));
					animaLeft = (0 - liWidth * qel1 - tabNum * severWidth - severWidth / 2);
				} else {
					var nums = (24 / hel1) * qel1;
					var nums2 = (24 / hel2) * (qel2 - 1)
					lenNum = Math.abs(parseInt((leftUl - liWidth * (qel1 + qel2 - 1)) / severWidth3)) + nums + nums2;

					var tabNum = Math.abs(parseInt((leftUl - liWidth * (qel1 + qel2 - 1)) / severWidth3));
					animaLeft = (0 - liWidth * (qel1 + qel2 - 1) - tabNum * severWidth3 - severWidth3);
				}
				var arr = new Array();
				arr.push(lenNum);
				arr.push(animaLeft);
				return arr;
			} else{
				var temp;
				if((nuTm+hel1)>24){
					temp=((nuTm+hel1-24)*ten-hel1*ten/2)
					leftUl=leftUl-temp;
				}else{
					temp=((nuTm+hel1)*ten-hel1*ten/2);
					leftUl=leftUl-temp;
				}

				var tabNum = parseInt(leftUl / divWidth);
				animaLeft = (0 - tabNum * divWidth - divWidth / 2-temp);
				lenNum = Math.abs(parseInt(leftUl / divWidth));
				var arr = new Array();
				arr.push(lenNum);
				arr.push(animaLeft);
				return arr;
			}


		}

	}

	function DayLes(ifLayer) {
		for (i = 0; i < dayes; i++) {
			var crDiv = document.createElement("div");
			var allDiv = document.getElementById("all");
			crDiv.className = "mellDay";
			allDiv.appendChild(crDiv);
		}


		if(ifLayer){
			var oDiv;      // 总共有多少小时
    			var oWidth;    // 单位1小时的宽度
    			var oLength;   // 第一天小DIV总个数
			var windowLine = $(window).width();

			var ds = ($("#dateStyle").width() / $("#dateStyle span").length);

			var Wd = ds / 24;

			if (Tm >= 6 && Tm < 18) {
				var lengthMS = $(".mellDay").length;
				$("#all").css("width", ds * (lengthMS-1) + Wd*9);
				$(".mellDay").eq(lengthMS-1).remove();

				var oDiv = document.getElementsByClassName("mellDay")[0];
				oDiv.style.width = (ds + Wd*9)+"px";

				if (qel2 != 0 && qel3 == null) {  //前3天逐1小时，后7天逐3小时

					for (i = 0; i < qel1 + qel2; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){

							var a = (33 - (liveTm+1)) % hel1;
							var b = Math.ceil((33 - (liveTm+1)) / hel1);
							var len = (liveTm+1) + b;

							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j);
									mellDiv.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-1+c);

									aaa.className = "bbb nomal";

									var name = g%24;
									aaa.setAttribute("name",name);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");

									aaa.className = "bbb";

									aaa.setAttribute("name", (g + (j-(liveTm+1)) * hel1) % 24 );
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else if (i <= qel1 - 1) {
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";

								aaa.setAttribute("name",( 8 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						} else {
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 8 + (j+1)* hel2) % 24 );
								mellDiv.appendChild(aaa);

							}
						}

					}

				} else if (Boolean(qel2) && Boolean(qel3)) {


				} else {


					qel2 = null;
					hel2 = null;
					for (i = 0; i < 10; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){

							var a = (33 - (liveTm+1)) % hel1;
							var b = Math.ceil((33 - (liveTm+1)) / hel1);
							var len = (liveTm+1) + b;

							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j);
									mellDiv.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-1+c);
									aaa.style.width = (Wd-0.3) * c + "px";

									aaa.className = "bbb nomal";
									aaa.setAttribute("id","flexNone");
									var name = g%24;
									aaa.setAttribute("name",name);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");
									aaa.style.width = (Wd-0.3) * hel1 + "px";
									aaa.className = "bbb";
									aaa.setAttribute("id","flexNone");

									aaa.setAttribute("name", (g + (j-(liveTm+1)) * hel1) % 24 );
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else{

							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 8 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						}

					}
				}


			} else if (Tm >= 18) {

				var lengthMS = $(".mellDay").length;
				$("#all").css("width", ds * (lengthMS-1) + Wd*21);
				$(".mellDay").eq(lengthMS-1).remove();

				var oDiv = document.getElementsByClassName("mellDay")[0];
				oDiv.style.width = (ds + Wd*21)+"px";

				if (qel2 != 0 && qel3 == null) {

					for (i = 0; i < qel1 + qel2; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){

							var a = (45 - (liveTm+1)) % hel1;
							var b = Math.ceil((45 - (liveTm+1)) / hel1);
							var len = (liveTm+1) + b;
							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j);
									mellDiv.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-1+c);

									aaa.className = "bbb nomal";

									var name = g%24;
									aaa.setAttribute("name",name);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");

									aaa.className = "bbb";
									aaa.setAttribute("name", (g + (j - (liveTm +1)) * hel1) % 24);
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else if (i <= qel1 - 1) {
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";

								aaa.setAttribute("name",( 20 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						} else {
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 20 + (j+1)* hel2) % 24 );
								mellDiv.appendChild(aaa);
							}
						}
					}

				} else if (Boolean(qel2) && Boolean(qel3)) {


				} else {


					qel2 = null;
					hel2 = null;
					for (i = 0; i < 10; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){

							var a = (45 - (liveTm+1)) % hel1;
							var b = Math.ceil((45 - (liveTm+1)) / hel1);
							var len = (liveTm+1) + b;
							var g;
							for (j = 0; j < len; j++) {
								if(j <= liveTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j);
									mellDiv.appendChild(aaa);
								}else if(j == liveTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-1+c);
									aaa.style.width = (Wd-0.3) * c + "px";
									aaa.className = "bbb nomal";
									aaa.setAttribute("id","flexNone");
									var name = g%24;
									aaa.setAttribute("name",name);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");
									aaa.style.width = (Wd-0.3) * hel1 + "px";
									aaa.className = "bbb";
									aaa.setAttribute("id","flexNone");

									aaa.setAttribute("name", (g + (j - (liveTm +1)) * hel1) % 24);
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else{

							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 20 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						}

					}
				}

			}else if (Tm < 6 ){

				var lengthMS = $(".mellDay").length;
				$("#all").css("width", ds * (lengthMS-1) + Wd*21);
				$(".mellDay").eq(lengthMS-1).remove();

				var oDiv = document.getElementsByClassName("mellDay")[0];
				oDiv.style.width = (ds + Wd*21)+"px";

				if (qel2 != 0 && qel3 == null) {

					for (i = 0; i < qel1 + qel2; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){
							var tmpTm = liveTm;
							if(liveTm == 23){
								tmpTm = -1;
							}

							var a = (45 - (24+tmpTm+1)) % hel1;
							var b = Math.ceil((45 - (24+tmpTm+1)) / hel1);
							var len = (24+tmpTm+1) + b;

							var g;
							for (j = 0; j < len; j++) {
								if(j <= 24+tmpTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j % 24);
									mellDiv.appendChild(aaa);
								}else if(j == 24+tmpTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-24-1+c);

									aaa.className = "bbb nomal";
									aaa.setAttribute("name", g%24);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");
									aaa.className = "bbb";

									aaa.setAttribute("name", (g + (j - (24+tmpTm +1)) * hel1) % 24);
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else if (i <= qel1 - 1) {
							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";

								aaa.setAttribute("name",( 20 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						} else {
							for (j = 0; j < 24 / hel2; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 20 + (j+1)* hel2) % 24 );
								mellDiv.appendChild(aaa);
							}
						}
					}

				} else if (Boolean(qel2) && Boolean(qel3)) {


				} else {

					qel2 = null;
					hel2 = null;
					for (i = 0; i < 10; i++) {
						var mellDiv = document.getElementsByClassName("mellDay")[i];

						if(i == 0){
							var tmpTm = liveTm;
							if(liveTm == 23){
								tmpTm = -1;
							}

							var a = (45 - (24+tmpTm+1)) % hel1;
							var b = Math.ceil((45 - (24+tmpTm+1)) / hel1);
							var len = (24+tmpTm+1) + b;

							var g;
							for (j = 0; j < len; j++) {
								if(j <= 24+tmpTm ){
									var aaa = document.createElement("div");
									aaa.className = "bbb";
									aaa.setAttribute("name",j % 24);
									mellDiv.appendChild(aaa);
								}else if(j == 24+tmpTm +1){
									var aaa = document.createElement("div");
									var c;
									if(a == 0){
										c = a + hel1;
									}else{
										c = a;
									}
									g = (j-24-1+c);
									aaa.style.width = (Wd-0.3) * c + "px";
									aaa.className = "bbb nomal";
									aaa.setAttribute("id","flexNone");
									aaa.setAttribute("name", g%24);
									mellDiv.appendChild(aaa);

								}else{

									var aaa = document.createElement("div");
									aaa.style.width = (Wd-0.3) * hel1 + "px";
									aaa.className = "bbb";
									aaa.setAttribute("id","flexNone");

									aaa.setAttribute("name", (g + (j - (24+tmpTm +1)) * hel1) % 24);
									mellDiv.appendChild(aaa);
								}

							}
							mellDiv.setAttribute("id","flexNone");
						}else{

							for (j = 0; j < 24 / hel1; j++) {
								var aaa = document.createElement("div");
								aaa.className = "bbb";
								aaa.setAttribute("name",( 20 + (j+1)* hel1) % 24 );
								mellDiv.appendChild(aaa);
							}
						}

					}
				}
			}






		}else{

			if (qel2 != 0 && qel3 == null) {

				for (i = 0; i < qel1 + qel2 + 1; i++) {
					var mellDiv = document.getElementsByClassName("mellDay")[i];
					if (i <= qel1 - 1) {
						for (j = 0; j < 24 / hel1; j++) {
							var aaa = document.createElement("div");
							aaa.className = "bbb";
							mellDiv.appendChild(aaa);
						}
					} else {
						for (j = 0; j < 24 / hel2; j++) {
							var aaa = document.createElement("div");
							aaa.className = "bbb";
							mellDiv.appendChild(aaa);
						}
					}
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {

				for (i = 0; i < qel1 + qel2 + 1 + qel3; i++) {
					var mellDiv = document.getElementsByClassName("mellDay")[i];
					if (i <= qel1 - 1) {
						for (j = 0; j < 24 / hel1; j++) {
							var aaa = document.createElement("div");
							aaa.className = "bbb";
							mellDiv.appendChild(aaa);
						}
					} else if (i < qel1 - 1 + qel2) {
						for (j = 0; j < 24 / hel2; j++) {
							var aaa = document.createElement("div");
							aaa.className = "bbb";
							mellDiv.appendChild(aaa);
						}
					} else {
						for (j = 0; j < 24 / hel3; j++) {
							var aaa = document.createElement("div");
							aaa.className = "bbb";
							mellDiv.appendChild(aaa);
						}
					}
				}
			} else {

				qel2 = null;
				hel2 = null;
				for (i = 0; i < qel1 + 1; i++) {
					var mellDiv = document.getElementsByClassName("mellDay")[i];
					for (j = 0; j < 24 / hel1; j++) {
						var aaa = document.createElement("div");
						aaa.className = "bbb";
						mellDiv.appendChild(aaa);
					}
				}
			}

			if (Tm >= 6 && Tm < 18) {
				for (i = 0; i < $(".bbb").length; i++) {
					var mis = (timeSam[i] + 8) % 24;
					var misMs = (timeSam[i] + 8);
					$(".bbb").eq(i).attr("name", mis);
					$(".bbb").eq(i).attr("node", misMs);
				}
			} else if (Tm < 6 || Tm >= 18) {
				for (i = 0; i < $(".bbb").length; i++) {
					var mis = (timeSam[i] + 20) % 24;
					var misMs = (timeSam[i] + 20);
					$(".bbb").eq(i).attr("name", mis);
					$(".bbb").eq(i).attr("node", misMs);
				}
			}
		}


	}


	//处理实况部分方案
	function changeDiv(){
		var small = $(".mellDay").eq(1).find(".bbb").width();
		var nowTime = newData.getHours();

	}


	// 设置时间轴的星期以及日期和时间的指针
    	function weekDell() {
        var dayNum;
        if (Tm >= 6 && Tm < 18) {
            nuTm = 8;
            dayNum = newDate.getDay();  // Tm>=6&&Tm<18    第一个messDay 为当前的日期
        } else if (Tm < 6) {
            nuTm = 20;
            dayNum = newDate.getDay() - 1;    // Tm<6  起报时间为前一天20时  所以 weekDay - 1 天.
        } else if (Tm >= 18) {
            nuTm = 20;
            //对应星期
            dayNum = newDate.getDay();     // Tm>=18  起报时间为当前20时
        }

        for (i = 0; i < dayes; i++) {
            //循环设置时间轴下边的星期
            var txtSpan1 = document.createElement("span");
            var dateStyle = document.getElementById("dateStyle");
            txtSpan1.className = "messDay";
            weekDay = dayNum++;
            if (weekDay > 7) {
                dayNum = 1;
                weekDay = dayNum++;
            }
            weekOne(weekDay, txtSpan1);
            dateStyle.appendChild(txtSpan1);
        }
        //设置时间轴上随时间的变化而产生的星期、日期、时间变化的的上边的指针
        var p = document.createElement("p");
        var span = document.getElementById("pointer");
        p.className = "pDay";//用来存储日期的天
        span.appendChild(p);
        var numDay = newDate.getDate();
        //加载时间轴上日期的值
        DateCruer(p, numDay);
    }



	//指针运动（根据当前时间确定的 ，指针每次移动距离是每小时的时间长）
	function pointerAction(ifLayer) {
		if(ifLayer){
			var oSmall  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;
			if(Tm < 6){
				var tmpTm = liveTm;
				if(liveTm == 23){
					tmpTm = -1;
				}
				for(i=0;i<tmpTm+24+2;i++){
					$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
				}
				var nowDiv = $(".mellDay").eq(0).find(".bbb").eq(tmpTm+24+1).width()+1;
				var line = (tmpTm+24+1)*oSmall+nowDiv - $("#pointer").width()/2 +"px";

				$("#pointer").css("left",line);
				var oTime = $(".messDay").eq(1).html().substr(0,2);
				var redlen = $(".red").length;
				var oHours = $(".red").eq(redlen-1).attr("name");

				$(".xs").html(oHours+":00");

				$("#pointer b").html(oTime);
			}else{
				for(i=0;i<liveTm+2;i++){
					$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
				}

				var nowDiv = $(".mellDay").eq(0).find(".bbb").eq(liveTm+1).width()+1;
				var line = (liveTm+1)*oSmall+nowDiv - $("#pointer").width()/2 +"px";

				$("#pointer").css("left",line);
				var oTime = $(".messDay").eq(0).html().substr(0,2);
				var redlen = $(".red").length;
				var oHours = $(".red").eq(redlen-1).attr("name");

				$(".xs").html(oHours+":00");

				$("#pointer b").html(oTime);
			}
		}else{
			Divs = $(".mellDay").length;
			lineAll = parseInt($("#all").css("width"));
			lineDay = lineAll / Divs;
			lineHours = lineDay / 24;
			spanPointer = parseInt($("#pointer").css("width")) / 2;

			var weekDay;  //默认初始week；
		
		        if (Tm >= 6 && Tm < 18) {
		            nuTm = 8;
		            weekDay = newDate.getDay();  // Tm>=6&&Tm<18    第一个messDay 为当前的日期
		        } else if (Tm < 6) {
		            nuTm = 20;
		            weekDay = newDate.getDay() - 1;    // Tm<6  起报时间为前一天20时  所以 weekDay - 1 天.
		        } else if (Tm >= 18) {
		            nuTm = 20;
		            weekDay = newDate.getDay();     // Tm>=18  起报时间为当前20时
		        }

			//页面刷新默认情况
		        var stry = $(".mellDay").eq(0).find(".bbb").eq(0).width() + 1;
		        var message = $(".mellDay").eq(0).find(".bbb").eq(0).attr("name");

		        var weizhi = stry - spanPointer + "px";

		
		        $(".mellDay").eq(0).find(".bbb").eq(0).addClass("red");
		        $("#pointer").css("left", weizhi);
		        $("#pointer .xs").html(message + ":00");
		        //周 ：判断
		        weekWidth(ifLayer);

		}

		// 实况预报分界 
		if(ifLayer){
			divide();
		}else{
			$(".divide").css({"display":"none"});
		}
	}

	// 实况预报分界线
	function divide(){
		if(isMobile()){
			var divide = document.createElement("div");
			divide.className = "divide";
			var left;
			if(Tm<6){
				var temp=liveTm;
				if(liveTm==23){
					temp=-1;
				}
				left=(24+temp+1)*20+"px";
			}else{
				left=(liveTm+1)*20+"px";
			}
			document.getElementById("parst").appendChild(divide);
			divide.style.left = left;
		}else{

				var divide = document.createElement("div");
				divide.className = "divide";
				var red = $(".red").length;
				var redWd =parseFloat(document.defaultView.getComputedStyle($(".red")[0]).width)+1;
				var left = (red-1)*redWd-1 +"px";
				document.getElementsByClassName("vues")[0].appendChild(divide);
				divide.style.left = left;
		}

	}

	//控制进度条长度
	function delTsp() {
	        $("#all .mellDay:last-child").remove();
	        //ds : 删除末尾多余mellDay时的$("#all")的宽度
	        var ds = $("#dateStyle").width() - ($("#dateStyle").width() / $("#dateStyle span").length);
	        $("#all").css("width", ds)
	        var Wd = $(".mellDay").width() / 24;
	        var LoneOne = Wd * (8+1) + "px";
	        var LoneTwo = Wd * (20+1) + "px";
	        var LineOne = Wd * 16 + "px";
	        var LineTwo = Wd * 4 + "px";
	        var str=""
	        if (Tm >= 6 && Tm < 18) {
	            $("#all").css("left", LoneOne);
	        } else if (Tm < 6) {
	            $("#all").css("left", LoneTwo);
	        } else if (Tm >= 18) {
	            $("#all").css("left", LoneTwo);
	        }
	}

	//停止自动播放
	function moveStop() {
		window.clearInterval(time);
	}

	//阻止浏览器默认的行为
	function stopDef(e) {
		if (e && e.preventDefault) e.preventDefault();
		else window.event.returnValue = false;
		return false;
	}

	// 鼠标滑过显示时间事件
	function timeBk() {
		for (i = 0; i < $(".bbb").length; i++) {
			$(".bbb").eq(i).mousemove(function () {
//						alert($(this).attr("name"))
				var title = $(this).attr("name");
				$("#time span").html(title + ":00");
				$("#time").css("display", "block");
				var num = $("#time").width() / 2;
				var ches = ($("html").width() - $("footer").width()) / 2;
				var theEvent = window.event || arguments.callee.caller.arguments[0];
				var mX = theEvent.pageX ? theEvent.pageX : theEvent.x;
				xLinessPs = mX - ches - num;
				lineMax = lineAll;
				lineMin = ches;
				if (xLinessPs <= 0 - num) {
					xLinessPs = 0 - num;
				} else if (xLinessPs >= lineMax + num) {
					xLinessPs = lineMax + num;
				}
				$("#time").css("left", xLinessPs);
				var codMin = parseInt($("#pointer").css("left"));
				var codMax = parseInt($("#pointer").css("left")) + $("#time span").width() + $("#pointer").width();
				var lineMoue = mX - ches;
				if (lineMoue >= codMin && lineMoue <= codMax) {
					$("#time").css("top", "-50px");
				} else {
					$("#time").css("top", "-28px");
				}
			})
		}

		$(".bbb").mouseleave(function () {
			$("#time").css("display", "none");
		})
	}


	//动态显示当前时间
	function timeOeel() {
		var xLine = event.offsetX;
		var xPointer = parseInt(xLine) - spanPointer + "px";
		var Gnum = parseInt(xLine / lineDay) + newDate.getDay();
		bWeek(Gnum);
	}

	//b-week
	function bWeek(Gnum) {
		var piont = document.getElementById("pointer");
		var b = pointer.getElementsByTagName("b")[0];
		if (Gnum > 7) {
			Gnum = Gnum - 7;
		}
		weekOne(Gnum, b);
	}

	//格式一 ： week  所求时间的星期的匹配对应
    	function weekOne(weekDay, obj) {
	        switch (weekDay) {
	            case 0 :
	                obj.innerHTML = "周日" + "<p></p>";
	                break;
	            case 1 :
	                obj.innerHTML = "周一" + "<p></p>";
	                break;
	            case 2 :
	                obj.innerHTML = "周二" + "<p></p>";
	                break;
	            case 3 :
	                obj.innerHTML = "周三" + "<p></p>";
	                break;
	            case 4 :
	                obj.innerHTML = "周四" + "<p></p>";
	                break;
	            case 5 :
	                obj.innerHTML = "周五" + "<p></p>";
	                break;
	            case 6 :
	                obj.innerHTML = "周六" + "<p></p>";
	                break;
	            case 7 :
	                obj.innerHTML = "周日" + "<p></p>";
	                break;
	        }
	}

	//格式二： week
	function weekTwo(weekDay, obj) {
		switch (weekDay) {
			case 1 :
				obj.innerHTML = "Monday";
				break;
			case 2 :
				obj.innerHTML = "Tuesday";
				break;
			case 3 :
				obj.innerHTML = "Wednesday";
				break;
			case 4 :
				obj.innerHTML = "Thursday";
				break;
			case 5 :
				obj.innerHTML = "Friday";
				break;
			case 6 :
				obj.innerHTML = "Saturday";
				break;
			case 7 :
				obj.innerHTML = "Sunday";
				break;
		}
	}

	// date
    //显示日期
    function dateRs() {
        var numDay;
        if (Tm >= 6 && Tm < 18) {
            numDay = newDate.getDate();  // Tm>=6&&Tm<18    第一个messDay 为当前的日期
            startTime = newDate;
        } else if (Tm < 6) {
            nuTm = 20;
            numDay = newDate.getDate() - 1;    // Tm<6  起报时间为前一天20时  所以 numDay - 1 天.
						startTime = newDate;
        } else if (Tm >= 18) {
            nuTm = 20;
            numDay = newDate.getDate();     // Tm>=18  起报时间为当前20时
            startTime = newDate;
        }
		var j = 0;
		for (i = 0; i < $(".messDay").length; i++) {
			var spanWk = document.getElementsByClassName("messDay")[i];
			var b = document.createElement("b");
			b.className = "dayName";
			var numMonth = newDate.getMonth() + 1;
			if (isLeapYear(newDate.getYear())) {
				if (numMonth == 1 || numMonth == 3 || numMonth == 5 || numMonth == 7 || numMonth == 8 || numMonth == 10 || numMonth == 12) {
					if (numDay <= 31) {
						b.innerHTML = numMonth + "  -  " + numDay;
						numDay = numDay + 1;
					} else {
						j = j + 1;
						b.innerHTML = numMonth + 1 + "  -  " + j;
					}
				} else if (numMonth == 4 || numMonth == 6 || numMonth == 9 || numMonth == 11) {
					if (numDay <= 30) {
						numDay = numDay + 1;
						b.innerHTML = numMonth + "  -  " + numDay;
					} else {
						j = j + 1;
						b.innerHTML = numMonth + 1 + "  -  " + j;
					}
				} else if (numMonth == 2) {
					if (numDay <= 29) {
						numDay = numDay + 1;
						b.innerHTML = numMonth + "  -  " + numDay;
					} else {
						j = j + 1;
						b.innerHTML = numMonth + 1 + "  -  " + j;
					}
				}
			} else {
				if (numMonth == 1 || numMonth == 3 || numMonth == 5 || numMonth == 7 || numMonth == 8 || numMonth == 10 || numMonth == 12) {
					if (numDay <= 31) {
						b.innerHTML = numMonth + "  -  " + numDay;
						numDay = numDay + 1;
					} else {
						j = j + 1;
						b.innerHTML = (numMonth + 1)%12 + "  -  " + j;
					}
				} else if (numMonth == 4 || numMonth == 6 || numMonth == 9 || numMonth == 11) {
					if (numDay <= 30) {
						b.innerHTML = numMonth + "  -  " + numDay;
						numDay = numDay + 1;
					} else {
						j = j + 1;
						b.innerHTML = numMonth + 1 + "  -  " + j;
					}
				} else if (numMonth == 2) {
					if (numDay <= 28) {
						b.innerHTML = numMonth + "  -  " + numDay;
						numDay = numDay + 1;
					} else {
						j = j + 1;
						b.innerHTML = numMonth + 1 + "  -  " + j;
					}
				}
			}
			spanWk.appendChild(b);
			numMonth += i;
		}
	}

	//判断是否是闰年
    function isLeapYear(year) {
        var cond1 = year % 4 == 0;  //条件1：年份必须要能被4整除
        var cond2 = year % 100 != 0;  //条件2：年份不能是整百数
        var cond3 = year % 400 == 0;  //条件3：年份是400的倍数
        //判断闰年的表达式：
        var cond = cond1 && cond2 || cond3;
        if (cond) {
            return true;
        } else {
            return false;
        }
    }

    //加载时间轴上日期的值
	function DateCruer(obj, numDay) {
		var numMonth = newDate.getMonth() + 1;//当前的月份
		if (isLeapYear(newDate.getYear())) {
			if (numMonth == 1 || numMonth == 3 || numMonth == 5 || numMonth == 7 || numMonth == 8 || numMonth == 10 || numMonth == 12) {
				if (numDay <= 31) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					j = j + 1;
					obj.innerHTML = j;
				}
			} else if (numMonth == 4 || numMonth == 6 || numMonth == 9 || numMonth == 11) {
				if (numDay <= 30) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					j = j + 1;
					obj.innerHTML = j;
				}
			} else if (numMonth == 2) {
				if (numDay <= 29) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					j = j + 1;
					obj.innerHTML = j;
				}
			}
		} else {
			if (numMonth == 1 || numMonth == 3 || numMonth == 5 || numMonth == 7 || numMonth == 8 || numMonth == 10 || numMonth == 12) {
				if (numDay <= 31) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					j = j + 1;
					obj.innerHTML = j;
				}
			} else if (numMonth == 4 || numMonth == 6 || numMonth == 9 || numMonth == 11) {
				if (numDay <= 30) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					j = j + 1;
					obj.innerHTML = j;
				}
			} else if (numMonth == 2) {
				if (numDay <= 28) {
					obj.innerHTML = numDay;
					numDay = numDay + 1;
				} else {
					var s = numDay - 28;
					obj.innerHTML = s;
					numDay = numDay + 1;
				}
			}
		}
	}


	function go(ifLayer) {

		if(ifLayer){
			var redLength = $(".red").length;
			var redMellLength = $(".redMellDay").length;
			var firstMellDay = $(".mellDay").eq(0).width();
			var secondMellDay = $(".mellDay").eq(1).width();
			var firstLength = $(".mellDay").eq(0).find(".bbb").length;
			var secondLength = $(".mellDay").eq(1).find(".bbb").length;
			var mellLength = $(".mellDay").length;
			if(redMellLength == 0){
				$(".mellDay").eq(0).find(".bbb").eq(redLength).addClass("red");
				var red = $(".red").length;
				if( red == firstLength){

					$(".mellDay").eq(0).addClass("redMellDay");
					$(".mellDay").eq(0).find(".bbb").removeClass("red");
				}
			}else if(redMellLength > 0 && redMellLength < mellLength){
				var leng = $(".mellDay").eq(redMellLength).find(".red").length;
				if(leng == 0){   													// 绗簩涓猟iv娌℃湁red瀛樺湪鏃�  creat first red
					$(".mellDay").eq(redMellLength).find(".bbb").eq(0).addClass("red");
				}else{																// 濡傛灉瀛樺湪red  涓嬫爣涓� red鐨勪釜鏁扮殑bbb addClass red
					$(".mellDay").eq(redMellLength).find(".bbb").eq(leng).addClass("red");

					var red = $(".mellDay").eq(redMellLength).find(".red").length;

					if( red == secondLength){

						$(".mellDay").eq(redMellLength).addClass("redMellDay");
						$(".mellDay").eq(redMellLength).find(".bbb").removeClass("red");
					}
				}
			}else if(redMellLength == mellLength){        // if all mellDay div  addClass remMellDay , go first start!
				$(".mellDay").removeClass("redMellDay");
				$(".mellDay").eq(0).find(".bbb").eq(0).addClass("red");
			}
		}else{
			var redLength = $(".red").length;
		        var redMellLength = $(".redMellDay").length;
		        var redbbb = $(".red").eq(redLength - 1);
		        var redMellDay = redbbb.parent(".mellDay").index();
		        var tebDom = $(".mellDay").eq(0).find(".bbb").length; //第一个mellDay的。bbb的个数
		        var tebDomQel2 = $(".mellDay").eq(qel2 - 1).find(".bbb").length;  //类型二 第二种
		        var tebDomQel3;
		        var mellNum = $(".mellDay").length;
			    if (Boolean(qel3)) {
		            tebDomQel3 = $(".mellDay").eq(qel2 + qel3 - 1).find(".bbb").length;  //类型二 第二种
		        }
		
		        //     //清除之前的样式
		        $(".mellDay").removeClass("redMellDay");
			$(".bbb").removeClass("red");

			redLength = redLength + 1;

			if (redMellDay <= 3) {
				for (k = 0; k < redLength; k++) {
					$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
				}
				if (redLength > tebDom) {
					redLength = 1;
					redMellDay = redMellDay + 1;
					$(".bbb").removeClass("red");
					for (k = 0; k < redLength; k++) {
						$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
					}
					for (j = 0; j <= redMellDay - 4; j++) {
						$(".mellDay").eq(j).addClass("redMellDay");
					}
				}
			} else if (redMellDay - 3 >= mellNum - 1 && redLength > tebDom || redMellDay - 3 >= mellNum - 1 && redLength > tebDomQel2 || redMellDay - 3 >= mellNum - 1 && redLength >= tebDomQel3) {
				$(".mellDay").removeClass("redMellDay");
				redMellDay = 3;
				redLength = 1;
				for (k = 0; k < redLength; k++) {
					$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
				}
			} else {
				if (Boolean(qel2) && qel3 == null) {
					if (redMellDay - 3 < qel1) {
						if (redLength > tebDom) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
						$(".bbb").removeClass("red");
						for (k = 0; k < redLength; k++) {
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
						}
						for (j = 0; j <= redMellDay - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					} else {
						if (redLength > tebDomQel2) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
						$(".bbb").removeClass("red");
						for (k = 0; k < redLength; k++) {
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
						}
						for (j = 0; j <= redMellDay - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					}
				} else if (Boolean(qel2) && Boolean(qel3)) {

					if (redMellDay - 3 < qel1) {
						if (redLength > tebDom) {
							redLength = 1;
							redMellDay = redMellDay + 1;
						}
						$(".bbb").removeClass("red");
						for (k = 0; k < redLength; k++) {
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
						}
						for (j = 0; j <= redMellDay - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					} else {
						if (redLength > tebDomQel2) {
							redLength = 1;
							redMellDay = redMellDay + 1;

						}
						if (redMellDay - 3 >= $(".mellDay").length - qel3 - 1) {

							if (redLength > tebDomQel3) {
								redLength = 1;
								redMellDay = redMellDay + 1;
							}
						}


						$(".bbb").removeClass("red");
						for (k = 0; k < redLength; k++) {
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
						}
						for (j = 0; j <= redMellDay - 4; j++) {
							$(".mellDay").eq(j).addClass("redMellDay");
						}
					}
				} else {
					if (redLength > tebDom) {
						redLength = 1;
						redMellDay = redMellDay + 1;
					}
					$(".bbb").removeClass("red");
					for (k = 0; k < redLength; k++) {
						$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
					}
					for (j = 0; j <= redMellDay - 4; j++) {
						$(".mellDay").eq(j).addClass("redMellDay");
					}
				}
			}
		}


		if(!ifLayer){
			//避免变量污染 重新定义获取存在颜色的div个数
		        var smarlDiv = $(".red").length;
		        var bigDiv = $(".redMellDay").length;
		        var smarlWidthQel3
		        var smarlWidth = $(".mellDay").eq(0).find(".bbb").width() + 1;  // +1是因为有1px的border
		        var bigWidth = $(".mellDay").width();
		        var smarlWidthQel2 = $(".mellDay").eq(qel2 - 1).find(".bbb").width() + 1;
		        var qel1Length = $(".mellDay").eq(0).find(".bbb").length;
		        var bbbFloatValue = $(".mellDay").width() / qel1Length;

		        if (Boolean(qel3)) {
		            smarlWidthQel3 = $(".mellDay").eq(qel3 + qel2 - 1).find(".bbb").width() + 1;
		            ;  //类型二 第二种
		        }

			if (Boolean(qel2) && qel3 == null) {
				if (redMellDay - 3 >= qel1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {
				if (redMellDay - 3 >= $(".mellDay").length - qel3 - 1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else if (redMellDay - 3 >= qel1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			} else {
				if ($(".mellDay").length <= bigDiv) {
					var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			}
            var obj;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    obj=$("li.liSelect").text();
                }
            }else{
                obj=$(".select").children("span").html();
            }
			var featureData = getCheckedFeatureData(obj);

			getUrl(nuTm, startTime, featureData);
		}else{
			var bigRed = $(".redMellDay").length;
			var smallRed = $(".red").length
			var firstMell = $(".mellDay").eq(0).width();
			var secondMell = $(".mellDay").eq(1).width();
			var lastIndex=$("#all").find(".bbb").length;
			var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

			var oWd  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;
			var ches = $("#pointer").width();
			if (Boolean(qel2) && qel3 == null) {
				if(bigRed == 0){

					var red = $(".mellDay").eq(0).find(".red").length;
					var nomal = $(".mellDay").eq(0).find(".nomal").index();
					var lastWd = $(".mellDay").children("div:last-child").width();
					var nomalWd = $(".nomal").width();
					// 判断实况预报结合的 三种不同宽度：

					if( red < nomal + 1 ){
						var pointLine = oWd * red - ches/2 + "px";
						$("#pointer").css("left",pointLine);

					}else if( red == nomal + 1){

						var pointLine = (red-1)*oWd + nomalWd -ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}else{
						var pointLine = nomal * oWd + nomalWd + (red-nomal-1) * oWd - ches/2 +"px";

						$("#pointer").css("left",pointLine);

					}

				}else if(bigRed > 0){
					var bigLine = (bigRed -1 )*secondMell;
					var smallLine = smallRed * secondSmall;
					var pointLine = firstMell + bigLine +smallLine - ches/2 + "px";
					$("#pointer").css("left",pointLine);
				}
			} else if (Boolean(qel2) && Boolean(qel3)) {


			} else {
				if(bigRed == 0){

					var red = $(".mellDay").eq(0).find(".red").length;
					var nomal = $(".mellDay").eq(0).find(".nomal").index();
					var lastWd = $(".mellDay").children("div:last-child").width();
					var nomalWd = $(".nomal").width();
					// 判断实况预报结合的 三种不同宽度：

					if( red < nomal + 1 ){
						var pointLine = oWd * red - ches/2 + "px";
						$("#pointer").css("left",pointLine);

					}else if( red == nomal + 1){
						var pointLine = (red-1)*oWd + nomalWd -ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}else{
						var pointLine = nomal * oWd + nomalWd + (red-nomal-1) * oWd*hel1 - ches/2 +"px";

						$("#pointer").css("left",pointLine);

					}

				}else if(bigRed > 0){
					var bigLine = (bigRed -1 )*secondMell;
					var smallLine = smallRed * secondSmall;
					var pointLine = firstMell + bigLine +smallLine - ches/2 + "px";
					$("#pointer").css("left",pointLine);
				}

			}



			var reds = $(".red").length;
			var hours = $(".red").eq(reds-1).attr("name") + ":00";
			if(reds == 0){
				var bigRedLength = $(".redMellDay").length;
				var noWell = $(".redMellDay").eq(bigRedLength-1).find(".bbb").length;
				var hours = $(".redMellDay").eq(bigRedLength-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
			}
			$("#pointer .xs").html(hours);

            var obj;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    obj=$("li.liSelect").text();
                }
            }else{
                obj=$(".select").children("span").html();
            }
			var featureData = getCheckedFeatureData(obj);

			getUrl(nuTm, startTime, featureData);


		}



		if (currentLatLng != null && mapClickFlag && yxMapClick) {
			pickValue(currentLatLng);
		}

	}


	//返回前一个
    function Back(ifLayer) {   	
    	//console.log(ifLayer)
    	
    	if(ifLayer){
			if (Boolean(qel2) && !Boolean(qel3)) {
				//两种时效的
				if(Tm<6){
					var a=44;
				}else{
					var a=32;
				}
				var index=getDivIndex();
				var redSmall = $(".red").length;
				var redBig = $(".redMellDay").length;

				var firstBig = $(".mellDay").eq(0).width();
				var ches = $("#pointer").width();
				var secondBig = $(".mellDay").eq(1).width();
				var nomal = $(".mellDay").eq(0).find(".nomal").index();
				if(index <a){
					$(".red").eq(redSmall-1).removeClass("red");
					var reds = $(".red").length;
					if(reds == 0){
						$(".mellDay").addClass("redMellDay");
					}

					// 位置
					var red = $(".mellDay").eq(0).find(".red").length;
					var lastWd = $(".mellDay").eq(0).children("div:last-child").width()+1;
					var lastIndex=$("#all").find(".bbb").length;

					var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

					var oWd  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;

					var nomalWd = $(".nomal").width();
					var redMell = $(".redMellDay").length;
					// 判断实况预报结合的 三种不同宽度：
if(index==0){
						var pointLine = $("#all").width() - ches/2 +"px";
					}else{
						var pointLine = (index)* oWd - ches/2 +"px";
					}



					$("#pointer").css("left",pointLine);


					for(var i=0;i<=index-1;i++){
						$(".mellDay").eq(0).find(".bbb").eq(i).addClass("red");
					}
					var redSmall = $(".red").length;
					var redBig = $(".redMellDay").length;
                    if(index==0){
                        var hours = $(".bbb").last().attr("name") + ":00";

                    }else{
                        var hours = $(".red").eq(redSmall-1).attr("name") + ":00";

                    }

					$("#pointer .xs").html(hours);

				}else{
					//第二种刻度的时效
					var lastIndex=$("#all").find(".bbb").length;
					var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

					if(redSmall == 0){
						var nowLength = $(".redMellDay").eq(redBig-1).find(".bbb").length;

						for(i=0;i<nowLength-1;i++){
							$(".redMellDay").eq(redBig-1).find(".bbb").eq(i).addClass("red");
						}
						$(".redMellDay").eq(redBig-1).removeClass("redMellDay");

					}else{
						$(".red").eq(redSmall-1).removeClass("red");
					}
					//位置
					var redSmall = $(".red").length;
					var redBig = $(".redMellDay").length;
					var last = $(".mellDay").eq(0).children("div:last-child").width()+1;
					var pointLine = firstBig + secondBig * (redBig-1) + redSmall * secondSmall -ches/2 +"px";
					if(redBig == 0){
						pointLine = firstBig - last -ches/2 +"px";
					}
					$("#pointer").css("left",pointLine);

					//时刻显示
					var hours = $(".red").eq(redSmall-1).attr("name") + ":00";
					if(redSmall == 0){
						var bigRedLength = $(".redMellDay").length;
						var noWell = $(".redMellDay").eq(redBig-1).find(".bbb").length;
						var hours = $(".redMellDay").eq(redBig-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
					}
					$("#pointer .xs").html(hours);


				}
			}else if(Boolean(qel3)){
				//三种时效
			}else{
				//只有一种预报的
				var redSmall = $(".red").length;
				var redBig = $(".redMellDay").length;
				var firstBig = $(".mellDay").eq(0).width();
				var ches = $("#pointer").width();
				var secondBig = $(".mellDay").eq(1).width();
				var nomal = $(".mellDay").eq(0).find(".nomal").index();
				if(redBig == 0){
					$(".red").eq(redSmall-1).removeClass("red");
					var reds = $(".red").length;
					if(reds == 0){
						$(".mellDay").addClass("redMellDay");
					}

					// 位置
					var red = $(".mellDay").eq(0).find(".red").length;
					var lastWd = $(".mellDay").eq(0).children("div:last-child").width()+1;
					var lastIndex=$("#all").find(".bbb").length;
					var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

					var oWd  =parseFloat(document.defaultView.getComputedStyle($(".bbb")[0]).width)+1;

					var nomalWd = $(".nomal").width();
					var redMell = $(".redMellDay").length;
					// 判断实况预报结合的 三种不同宽度：

					if( red < nomal + 1 ){
						var pointLine = oWd * red - ches/2 + "px";

						if(red == 0){
							var pointLine = firstBig + (redMell-1)*secondBig -ches/2 +"px";
						}

						$("#pointer").css("left",pointLine);
					}else if( red == nomal + 1){
						var pointLine = (red-1)*oWd + nomalWd -ches/2 +"px";
						$("#pointer").css("left",pointLine);

					}else{
						var pointLine = nomal * oWd + nomalWd + (red-nomal-1) * lastWd - ches/2 +"px";

						$("#pointer").css("left",pointLine);

					}
					var redSmall = $(".red").length;
					var redBig = $(".redMellDay").length;
					var hours = $(".red").eq(redSmall-1).attr("name") + ":00";
					if(redSmall == 0){
						var bigRedLength = $(".redMellDay").length;
						var noWell = $(".redMellDay").eq(redBig-1).find(".bbb").length;
						var hours = $(".redMellDay").eq(redBig-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
					}
					$("#pointer .xs").html(hours);

				}else{
					var lastIndex=$("#all").find(".bbb").length;
					var secondSmall =parseFloat(document.defaultView.getComputedStyle($(".bbb")[lastIndex-1]).width)+1;

					if(redSmall == 0){
						var nowLength = $(".redMellDay").eq(redBig-1).find(".bbb").length;

						for(i=0;i<nowLength-1;i++){
							$(".redMellDay").eq(redBig-1).find(".bbb").eq(i).addClass("red");
						}
						$(".redMellDay").eq(redBig-1).removeClass("redMellDay");

					}else{
						$(".red").eq(redSmall-1).removeClass("red");
					}
					//位置
					var redSmall = $(".red").length;
					var redBig = $(".redMellDay").length;
					var last = $(".mellDay").eq(0).children("div:last-child").width()+1;
					var pointLine = firstBig + secondBig * (redBig-1) + redSmall * secondSmall -ches/2 +"px";
					if(redBig == 0){
						pointLine = firstBig - last -ches/2 +"px";
					}
					$("#pointer").css("left",pointLine);

					//时刻显示
					var hours = $(".red").eq(redSmall-1).attr("name") + ":00";
					if(redSmall == 0){
						var bigRedLength = $(".redMellDay").length;
						var noWell = $(".redMellDay").eq(redBig-1).find(".bbb").length;
						var hours = $(".redMellDay").eq(redBig-1).find(".bbb").eq(noWell-1).attr("name") + ":00";
					}
					$("#pointer .xs").html(hours);


				}
			}


            var obj;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    obj=$("li.liSelect").text();
                }
            }else{
                obj=$(".select").children("span").html();
            }
			var featureData = getCheckedFeatureData(obj);

			getUrl(nuTm, startTime, featureData);

			if (currentLatLng != null && mapClickFlag && yxMapClick) {
				pickValue(currentLatLng);
			}

		}else{
			var redLength = $(".red").length;
			var redbbb = $(".red").eq(redLength - 1);
			var redMellDay = redbbb.parent(".mellDay").index();
			// 点击上一个的时候 如果当前正在进行播放事件  切换播放暂停按钮
				if (kolse) {
				    $("#action").css("display", "block");
				    $("#stop").css("display", "none")
				}
				kolse = false;
				
				//清除之前的样式
				$(".mellDay").removeClass("redMellDay");
				$(".bbb").removeClass("red");
				//因为$("#all")的第一个mellDay的下标是3。
			redLength = redLength - 1;
			// console.log(redLength)
			if (Boolean(qel2) && Boolean(qel3)) {

				if (redLength <= 0) {
					if (redMellDay <= 3) {
						redMellDay = $(".mellDay").length + 3;
						redLength = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
						$(".mellDay").eq(redMellDay - 4).find(".bbb").addClass("red");
					} else {
						redLength = redLength - 1;
						if (redLength <= 0) {
							redMellDay = redMellDay - 1;
							redLength = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
							$(".mellDay").eq(redMellDay - 3).find(".bbb").addClass("red");
							var rs = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(rs - 1).removeClass("red");


						}
					}
				} else {
					redLength = redLength - 1;
				}
			} else {
				if (redLength <= 0) {
					if (redMellDay <= 3) {
						redMellDay = $(".mellDay").length + 3;
						redLength = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
						$(".mellDay").eq(redMellDay - 4).find(".bbb").addClass("red");
					} else {
						redLength = redLength - 1;
						if (redLength <= 0) {
							redMellDay = redMellDay - 1;
							redLength = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
							$(".mellDay").eq(redMellDay - 3).find(".bbb").addClass("red");
							var rs = $(".mellDay").eq(redMellDay - 4).find(".bbb").length;
							$(".mellDay").eq(redMellDay - 3).find(".bbb").eq(rs - 1).removeClass("red");

						}
					}
				} else {
					redLength = redLength - 1;
				}
			}


			if (redMellDay - 3 > 0) {
				    //改变mellDay的颜色
				    for (j = 0; j <= redMellDay - 4; j++) {
				        $(".mellDay").eq(j).addClass("redMellDay");
				    }
				}
				//改变.bbb的颜色
				for (k = 0; k <= redLength; k++) {
				    $(".mellDay").eq(redMellDay - 3).find(".bbb").eq(k).addClass("red");
				}
				//避免变量污染 重新定义获取存在颜色的div个数
				var smarlDiv = $(".red").length;
				var bigDiv = $(".redMellDay").length;
				var smarlWidth = $(".bbb").width() + 1;// +1是因为有1px的border

			var bigWidth = $(".mellDay").width();
			var smarlWidthQel2 = $(".mellDay").eq(qel2 - 1).find(".bbb").width() + 1;
			var qel1Length = $(".mellDay").eq(0).find(".bbb").length;
			var bbbFloatValue = $(".mellDay").width() / qel1Length;
			if (Boolean(qel3)) {
				smarlWidthQel3 = $(".mellDay").eq(qel3 + qel2 - 1).find(".bbb").width() + 1;
				;  //类型二 第二种
			}

			if (Boolean(qel2) && Boolean(qel3)) {
				//列如海洋三种时效值
				if (redMellDay - 3 <= qel2 + qel1 + qel3 && redMellDay - 3 >= qel1 + qel2 - 1) {
					if ($(".mellDay").length <= bigDiv) {

						var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);
						var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					} else {

						var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);

						var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
						$("#pointer").css("left", weizhi);
						if (redMellDay - 3 < qel2 + qel1 - 1) {
							var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
							$("#pointer").css("left", weizhi);
						}
					}
				} else if (redMellDay - 3 <= qel2 + qel1 - 1 && redMellDay - 3 >= qel1) {

					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
					$("#pointer").css("left", weizhi);
					if (redLength < 1) {
						var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					}
				} else {

					if ($(".mellDay").length <= bigDiv) {

						var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);
						var weizhi = smarlWidthQel3 * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					} else {

						var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);
						var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					}
				}
			} else if (Boolean(qel2) && qel3 == null) {
				//两种时效值
				if (redMellDay - 3 < qel2 - 1) {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = bbbFloatValue * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					if ($(".mellDay").length <= bigDiv) {
						var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);
						var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					} else {
						var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
						$("#pointer .xs").html(titleSmal);
						var weizhi = smarlWidthQel2 * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
						$("#pointer").css("left", weizhi);
					}
				}
			} else {
				//只有一种时效值的
				if ($(".mellDay").length <= bigDiv) {
					var titleSmal = $(".redMellDay").eq(bigDiv - 1).find(".bbb").last().attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * (bigDiv - 1) - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				} else {
					var titleSmal = $(".red").eq(smarlDiv - 1).attr("name") + ":00";
					$("#pointer .xs").html(titleSmal);
					var weizhi = smarlWidth * smarlDiv + bigWidth * bigDiv - spanPointer + "px";
					$("#pointer").css("left", weizhi);
				}
			}

            var obj;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    obj=$("li.liSelect").text();
                }
            }else{
                obj=$(".select").children("span").html();
            }
			var featureData = getCheckedFeatureData(obj);

			getUrl(nuTm, startTime, featureData);



			if (currentLatLng != null && mapClickFlag && yxMapClick) {
				pickValue(currentLatLng);
			}

		}


	}

	if (!isMobile()) {
		map.on("mousemove", function (e) {
			if (mapMouseFlag&&pickFlag&&toolFlag) {
				var latlng = e.latlng;
				var lngs = latlng.lng;
				var lats = latlng.lat;

				$("#latlng").html("经度:" + lngs.toFixed(2) + "° " + "纬度:" + lats.toFixed(2) + "°");
                    mouseMoveValue(latlng);


			}
		});
	}

	var yxClick = true;

	map.on('mapclicked', function (e) {
        var type = $("input[name='eleSelect']:checked").val();
		var htmlWidth = isMobile();
		var latlng = e.latlng;

        if (mapClickFlag && yxMapClick&&pickFlag&&closeFlag&&toolFlag) {

            if(type=="element"||type==undefined){
                var g = true;
                if (htmlWidth) {
                    pickValue1(latlng);
					pickValueWebGl(latlng);
                }else{
                    pickValue(latlng);
                    pickValueWebGl(latlng);
                }
                $(".change").css("display", "none");


            }else{
                var intelligent=shell.application.gridEdit;
                intelligent.pickValue(latlng);
            }
            if(toolClick=="gridEdit"||toolClick=="impactForecast"){
                var myP1 = new BMap.Point(latlng.lng,latlng.lat);
                geoc.getLocation(myP1, function(rs){
                    if(rs !=null){
                        var addComp = rs.addressComponents;


                        var province = addComp.province;
                        var city = addComp.city;
                        var area = addComp.district;

                       var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                        $("#province").html(province);
                        $("#city").html(city);
                        $("#area").html(area);

                        $(".searchDiv input").val(inputVal);

                    }

                });
            }
        }


	});

	map.on('moveend', function (e) {

		if (!mapClickFlag) { //当出图状态下才执行一下动作

            //延迟显示缩略图
			if (mapFlag == true) {
				if (mapClick == 2) {
					mapClick--;
					changeFlag = true;

				} else if (mapClick == 1) {
					mapFlag = false;
				}

			} else {
				if (map.getZoom() > curZoom || map.getZoom() < curZoom) {
					changeFlag = true;
					setTimeout(thumbnail, 1000);
				} else {
					setTimeout(thumbnail, 1000);
				}

			}


		}
	});

	function thumbnail() {
		if( $(".apiBox").css("display")!='none' ){

			var mapView = map.getBounds();
			var lng1 = reRectangle.handle1.getLatLng().lng;
			if (lng1 < mapView.getWest()) {
				lng1 = mapView.getWest();
				changeFlag = true;
			}
			var lat1 = reRectangle.handle1.getLatLng().lat;
			if (lat1 < mapView.getSouth()) {
				lat1 = mapView.getSouth();
				changeFlag = true;
			}
			var lng2 = reRectangle.handle3.getLatLng().lng;
			if (lng2 > mapView.getEast()) {
				lng2 = mapView.getEast();
				changeFlag = true;
			}
			var lat2 = reRectangle.handle3.getLatLng().lat;
			if (lat2 > mapView.getNorth()) {
				lat2 = mapView.getNorth();
				changeFlag = true;
			}
			var destLatLngBounds = L.latLngBounds([[lat1, lng1], [lat2, lng2]]);

			if (reRectangle != null) {
				map.removeLayer(reRectangle);
			}
			reRectangle = new Re_Rectangle(L.latLngBounds(destLatLngBounds));
			reRectangle.addTo(map);
		}



	}

	// 播放
	$(".goStart").on("click", function () {
		if (kos) {
			$(this).attr("id", "pause");
			kos = false;
			startMove(ifLayer);
		} else {
			$(this).removeAttr("id");
			kos = true;
			clearInterval(timeMove);
		}
	})

	// start move
	function startMove(ifLayer) {
		var length = $(".days").length;
		var setStartWidth = $(".days").eq(qel2 - 1).find("div").width();
		var setStart3 = $(".days").eq(qel1 + qel2 - 1).find("div").width();

		var startWidth = $(".hours").eq(0).width();
		var startLeft = parseInt($("#parst").css("left"));
		var endLeft = startLeft + 0;
		var liwidth = $(".esDay").eq(1).width();
		var kell,
			lenNum;

		timeMove = setInterval(function () {
			if(ifLayer){
				if (Boolean(qel2) && Boolean(qel3)) {
					var pel = Math.abs(parseInt($("#parst").css("left")));
					var rel = $("#parst li").eq(0).width() * qel1 - startWidth / 2;
					var rel3 = $("#parst li").eq(0).width() * qel1 + $("#parst li").eq(qel1 + qel2 - 1).width() * (qel2 - 1) - setStart3 / 2;

					if (pel >= rel && pel < rel3) {
						if (pel == rel) {
							var thum = parseInt((pel - rel) / setStartWidth);
							endLeft = (0 - (setStartWidth / 2 + thum * setStartWidth + rel + startWidth / 2)) + "px";
						} else {
							endLeft = (0 - (setStartWidth + pel)) + "px";
						}

					} else if (pel >= rel3) {
						var setlet = liwidth * (qel1 + qel2 - 1) - setStartWidth / 2;
						if (pel == setlet) {
							endLeft = (0 - setlet - setStartWidth / 2 - setStart3 + 3) + "px";  //3:   取消偏差 保证最后一个的运动
						} else {
							endLeft = (0 - (setStart3 + Math.abs(parseInt(endLeft)))) + "px";
						}

					} else {
						endLeft = (0 - (startWidth + Math.abs(parseInt(endLeft)))) + "px";
					}

					var end = $("#parst").width();

					if (parseInt(endLeft) <= 0 - end) {
						endLeft = (0 - startWidth / 2) + "px";
						$("#parst").css("left", endLeft);
						kell = true;
					} else {
						$("#parst").animate({left: endLeft}, 1000);
					}
					var arry = hoursDel(ifLayer);
					if (kell) {
						lenNum = arry[0];
					} else {
						lenNum = arry[0] + 1;
					}
					kell = false;
					var divName = parseInt($(".hours").eq(lenNum).attr("name"));
					var numHours = (divName % 24).toString();
					if (numHours.length < 2) {
						numHours = 0 + numHours;
					}
					var numDay = parseInt(divName / 24);
					$("#inp p").html(numHours + ":00");

					var dayHtml = $(".dayZet li").eq(numDay).html();

					var currentTime = dayHtml + " " + numHours + ":00";

                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					getUrl1(startTime, currentTime, featureData);

					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}

					if (parseInt(endLeft) <= 0 - end) {
						clearInterval(timeMove);
						$(".goStart").removeAttr("id");
					}
				} else if (Boolean(qel2) && qel3 == null) {
					var a,b;
					var firstForeLeft;
					//全部实况的结束时的left
					var shikLeft;
					//结束时的的left
					var endForeLeft=$("#parst").width();
					var  firstDayForeLeft;
					var tempIndex;
					if(Tm>=6&&Tm<18){

						firstForeLeft=(liveTm+1)*20+10;
						shikLeft=(liveTm+1)*20;
						firstDayForeLeft=33*20-10;
						tempIndex=32;
					}else if(Tm<6){
						var tmpTm=liveTm;
						if(liveTm == 23){
							tmpTm=-1
						}

						firstForeLeft=(24+tmpTm+1)*20+10;
						shikLeft=(24+tmpTm+1)*20;
						firstDayForeLeft=45*20-10;
						tempIndex=44;
					}else if(Tm>=18){

						firstForeLeft=(liveTm+1)*20+10;
						shikLeft=(liveTm+1)*20;
						firstDayForeLeft=45*20-10;
						tempIndex=44;
					}
                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					var startLeft=Math.abs(parseInt($("#parst").css("left")));


					if(startLeft<firstDayForeLeft){
						startLeft=-startLeft-20;
						var num=Math.floor((-startLeft)/20);
						var numHours1=$(".hours").eq(num).html();
						if (numHours1.length < 2) {
							numHours1 = 0 + numHours1;
						}
						$("#inp p").html(numHours1 + ":00");
						$("#parst").animate({left: startLeft+"px"}, 1000);
						getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,firstDayForeLeft)

					}else if(startLeft==firstDayForeLeft){

						startLeft=-firstDayForeLeft-40;
						var num=tempIndex+1;
						var numHours1=$(".hours").eq(num).html();
						if (numHours1.length < 2) {
							numHours1 = 0 + numHours1;
						}
						$("#inp p").html(numHours1 + ":00");
						$("#parst").animate({left: startLeft+"px"}, 1000);
						getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,firstDayForeLeft)

					}else if(startLeft>firstDayForeLeft&&startLeft<endForeLeft-30){

						startLeft=-firstDayForeLeft-40-Math.ceil((startLeft-firstDayForeLeft-10)/60)*20*3;
						var num=tempIndex+Math.ceil((-startLeft-firstDayForeLeft-10)/60);
						var numHours1=$(".hours").eq(num).html();
						if (numHours1.length < 2) {
							numHours1 = 0 + numHours1;
						}
						$("#inp p").html(numHours1 + ":00");
						$("#parst").animate({left: startLeft+"px"}, 1000);
						getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,firstDayForeLeft)

					}else{
						startLeft=-10;
						var num=0;
						var numHours1=$(".hours").eq(num).html();
						if (numHours1.length < 2) {
							numHours1 = 0 + numHours1;
						}
						$("#inp p").html(numHours1 + ":00");
						$("#parst").css({left: startLeft+"px"});
						getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,firstDayForeLeft)

					}
					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}


				}  else {
					var a,b;
					var firstForeLeft;
					//全部实况的结束时的left
					var shikLeft;
					//结束时的的left
					var endForeLeft=$("#parst").width();

					if(Tm>=6&&Tm<18){
						a = (33 - (liveTm+1)) % hel1;
						if(a ==0){
							b =20*hel1/2;
						}else{
							b=20*a/2;
						}
						firstForeLeft=(liveTm+1)*20+b;
						shikLeft=(liveTm+1)*20;
					}else if(Tm<6){
						var tmpTm=liveTm
						if(liveTm == 23){
							tmpTm=-1
						}
						a = (45 - (24+tmpTm+1)) % hel1;
						if(a ==0){
							b =20*hel1/2;
						}else{
							b=20*a/2;
						}
						firstForeLeft=(24+tmpTm+1)*20+b;
						shikLeft=(24+tmpTm+1)*20;
					}else if(Tm>=18){
						a = (33 - (liveTm+1)) % hel1;
						if(a ==0){
							b =20*hel1/2;
						}else{
							b=20*a/2;
						}
						firstForeLeft=(liveTm+1)*20+b;
						shikLeft=(liveTm+1)*20;
					}
                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					var startLeft=Math.abs(parseInt($("#parst").css("left")));
					if(startLeft==firstForeLeft){
						startLeft=-startLeft-b-30;
						var index=parseInt((firstForeLeft-b)/20);
						var numHours1=$(".hours").eq(index+1).html();
						if (numHours1.length < 2) {
							numHours1 = 0 + numHours1;
						}
						$("#inp p").html(numHours1 + ":00");
						$("#parst").animate({left: startLeft+"px"}, 1000);
                        var obj;
                        if(newLujing){
                            if($("li.liSelect").text()=="全部"){
                                var i=$("li.liPage_liSelect").index();
                                obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                            }else{
                                obj=$("li.liSelect").text();
                            }
                        }else{
                            obj=$(".select").children("span").html();
                        }
						var featureData = getCheckedFeatureData(obj);
						getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,b)

					}else if(startLeft>firstForeLeft&&startLeft<endForeLeft){

						if(startLeft==endForeLeft-30){
							startLeft=-10;
							var index=0;
							var numHours1=$(".hours").eq(index).html();
							if (numHours1.length < 2) {
								numHours1 = 0 + numHours1;
							}
							$("#inp p").html(numHours1 + ":00");
							$("#parst").animate({left: startLeft+"px"}, 0);
							getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,b)


						}else{
							startLeft=-startLeft-60;
							var index=parseInt((shikLeft-10)/20)+1+parseInt((-startLeft+30-(firstForeLeft+b))/60);
							var numHours1=$(".hours").eq(index).html();
							if (numHours1.length < 2) {
								numHours1 = 0 + numHours1;
							}
							$("#inp p").html(numHours1 + ":00");
							$("#parst").animate({left: startLeft+"px"}, 1000);
							getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,b)

						}
					}else if(startLeft<shikLeft){
						if(startLeft==shikLeft-10){
							startLeft=parseInt(-startLeft-10-b);
							var index=parseInt((shikLeft)/20);
							var numHours1=$(".hours").eq(index).html();
							if (numHours1.length < 2) {
								numHours1 = 0 + numHours1;
							}
							$("#inp p").html(numHours1 + ":00");
							$("#parst").animate({left: startLeft+"px"}, 1000);
                            var obj;
                            if(newLujing){
                                if($("li.liSelect").text()=="全部"){
                                    var i=$("li.liPage_liSelect").index();
                                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                                }else{
                                    obj=$("li.liSelect").text();
                                }
                            }else{
                                obj=$(".select").children("span").html();
                            }
							var featureData = getCheckedFeatureData(obj);
							getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,b)


						}else{
							startLeft=-startLeft-20;
							var index=parseInt((-startLeft+10)/20);
							var numHours1=$(".hours").eq(index-1).html();
							if (numHours1.length < 2) {
								numHours1 = 0 + numHours1;
							}
							$("#inp p").html(numHours1 + ":00");
							$("#parst").animate({left: startLeft+"px"}, 1000);
                            var obj;
                            if(newLujing){
                                if($("li.liSelect").text()=="全部"){
                                    var i=$("li.liPage_liSelect").index();
                                    obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                                }else{
                                    obj=$("li.liSelect").text();
                                }
                            }else{
                                obj=$(".select").children("span").html();
                            }
							var featureData = getCheckedFeatureData(obj);
							getUrl2(startTime,  featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,numHours1,b)
						}

					}
					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}

				}
			}else{
				if (Boolean(qel2) && Boolean(qel3)) {
					var temp;
					if((nuTm+hel1)>24){
						temp=((nuTm+hel1-24)*ten-hel1*ten/2)
					}else {
						temp = ((nuTm + hel1) * ten - hel1 * ten / 2);
					}
					var pel = Math.abs(parseInt($("#parst").css("left")));
					var rel = $("#parst li").eq(0).width() * qel1+temp-18;
					var rel3 = $("#parst li").eq(0).width() * qel1 + $("#parst li").eq(qel1 + qel2 - 1).width() * (qel2 - 1) -36+temp;

					if (pel >=rel && pel < rel3) {
						if (pel == rel) {
							endLeft=0-(pel+18+36);

						} else {
							setStartWidth = $(".days").eq(qel2 - 1).find("div").width();
							endLeft = (0 - (setStartWidth + pel)) + "px";
						}

					} else if (pel >= rel3) {
						setStart3 = $(".days").eq(qel1 + qel2 - 1).find("div").width();

						var setlet = liwidth * (qel1 + qel2 - 1)+temp-36;

						if (pel == setlet) {
							endLeft = (0 - pel-36-144) + "px";  //3:   取消偏差 保证最后一个的运动
						} else {
							endLeft = (0 - (setStart3 + Math.abs(parseInt(endLeft)))) + "px";
						}

					} else {
						endLeft = (0 - (startWidth + Math.abs(parseInt(endLeft)))) + "px";
					}

					var end = $("#parst").width();

					if (parseInt(endLeft) <0 - end) {
						endLeft = (0 - startWidth / 2-temp) + "px";
						$("#parst").css("left", endLeft);
						kell = true;
					}else if(parseInt(endLeft) ==0 - end){
						kell = false;
						$("#parst").animate({left: endLeft}, 1000);
					} else {
						$("#parst").animate({left: endLeft}, 1000);
					}

					var arry = hoursDel(ifLayer);
					if (kell) {

						lenNum = arry[0];
					} else {
						lenNum = arry[0] + 1;
					}
					kell = false;
					var divName = parseInt($(".hours").eq(lenNum).attr("name"));
					var numHours = (divName % 24).toString();
					if (numHours.length < 2) {
						numHours = 0 + numHours;
					}
					var numDay = parseInt(divName / 24);
					$("#inp p").html(numHours + ":00");
					if((nuTm+hel1)>24){
						var dayHtml = $(".dayZet li").eq(numDay-1).html();
					}else{
						var dayHtml = $(".dayZet li").eq(numDay).html();
					}


					var currentTime = dayHtml + " " + numHours + ":00";

                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);

					getUrl1(startTime, currentTime, featureData);

					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}

				} else if (Boolean(qel2) && qel3 == null) {
					var pel = Math.abs(parseInt($("#parst").css("left")));
					var rel = $("#parst li").eq(0).width() * qel1 - startWidth / 2;

					if (pel >= rel) {
						if (pel == rel) {
							var thum = parseInt((pel - rel) / setStartWidth);
							endLeft = (0 - (setStartWidth / 2 + thum * setStartWidth + rel + startWidth / 2)) + "px";
						} else {
							endLeft = (0 - (setStartWidth + pel)) + "px";
						}
					} else {
						endLeft = (0 - (startWidth + Math.abs(parseInt(endLeft)))) + "px";
					}

					var end = $("#parst").width();

					if (parseInt(endLeft) <= 0 - end) {
						endLeft = (0 - startWidth / 2) + "px";
						$("#parst").css("left", endLeft);
						kell = true;
					} else {
						$("#parst").animate({left: endLeft}, 1000);
					}

					var arry = hoursDel(ifLayer);
					if (kell) {

						lenNum = arry[0];
					} else {
						lenNum = arry[0] + 1;
					}
					kell = false;
					var divName = parseInt($(".hours").eq(lenNum).attr("name"));
					var numHours = (divName % 24).toString();
					if (numHours.length < 2) {
						numHours = 0 + numHours;
					}
					var numDay = parseInt(divName / 24);
					$("#inp p").html(numHours + ":00");
					if((nuTm+hel1)>24){
						var dayHtml = $(".dayZet li").eq(numDay-1).html();
					}else{
						var dayHtml = $(".dayZet li").eq(numDay).html();
					}
					var currentTime = dayHtml + " " + numHours + ":00";


                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					getUrl1(startTime, currentTime, featureData);

					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}

					if (parseInt(endLeft) <= 0 - end) {
						clearInterval(timeMove);
						$(".goStart").removeAttr("id");
					}

				}  else {
					endLeft = (0 - (startWidth + Math.abs(parseInt(endLeft)))) + "px";
					var end = $("#parst").width();
					var temp;
					if((nuTm+hel1)>24){
						temp=((nuTm+hel1-24)*ten-hel1*ten/2)
					}else {
						temp = ((nuTm + hel1) * ten - hel1 * ten / 2);
					}
					if (parseInt(endLeft) <= 0 - end) {
						endLeft = (0 - startWidth / 2-temp )+ "px";
						$("#parst").css("left", endLeft);
						kell = true;
					} else {
						$("#parst").animate({left: endLeft}, 1000);
					}
					var arry = hoursDel(ifLayer);
					if (kell) {
						lenNum = arry[0];
					} else {
						lenNum = arry[0] + 1;
					}
					var divName = parseInt($(".hours").eq(lenNum).attr("name"));
					var numHours = (divName % 24).toString();
					if (numHours.length < 2) {
						numHours = 0 + numHours;
					}
					var numDay = parseInt(divName / 24);
					$("#inp p").html(numHours + ":00");
					if((nuTm+hel1)>24){
						var dayHtml = $(".dayZet li").eq(numDay-1).html();
					}else{
						var dayHtml = $(".dayZet li").eq(numDay).html();
					}

					var currentTime = dayHtml + " " + numHours + ":00";

                    var obj;
                    if(newLujing){
                        if($("li.liSelect").text()=="全部"){
                            var i=$("li.liPage_liSelect").index();
                            obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                        }else{
                            obj=$("li.liSelect").text();
                        }
                    }else{
                        obj=$(".select").children("span").html();
                    }
					var featureData = getCheckedFeatureData(obj);
					getUrl1(startTime, currentTime, featureData);

					if (currentLatLng != null) {
						pickValue1(currentLatLng);
					}

					if (parseInt(endLeft) <= 0 - end) {
						clearInterval(timeMove);
						$(".goStart").removeAttr("id");
					}
					kell = false;


				}
			}

		}, 3000);
	}


	$(".list_text01 span").live("click", function () {
		var answer = $(this).siblings(".list_text02");
		if (answer.is(":visible")) {
			answer.hide();
		}
		else {
			answer.parents(".index_menu_right").find(".list_text02").hide();
			answer.show();
		}
	});


    $(".index_menu_left").live("click", function () {
        var blackDiv = $(this).siblings(".change");
        if (blackDiv.height() > 500) {
            blackDiv.css("height", "500px");
            blackDiv.css("overflowY", "scroll");
        }
        blackDiv.show();

        // 默认第一个选中24小时，其他的选中第一个
        if ($(this).children("span").html() == "基本要素") {
            var ss = blackDiv.children(".index_menu_right").children(".index_menu_righ_list").children().eq(3).children().eq(0);
        } else {
            var ss = blackDiv.children(".index_menu_right").children(".index_menu_righ_list").children().eq(0).children().eq(0);
        }

        ss.attr('checked', 'true');
        $(this).parent().siblings().children(".change").hide();
        $(this).parent().siblings().children(".index_menu_left").removeAttr("style", "border:1px solid #31b0d5");
        $("input[name='eleSelect']").eq(0).attr("checked",true);

    });
    $(".list_title").live("click", function () {
        $(this).children("input").attr("checked", true);
        newLujing=false;
    })


	//加载左边导航菜单
	if (nwfdData != null) {
        var shtml = "";
        var dhtml = "";
        for (var i = 0, m = nwfdData.length; i < m; i++) {
            var features = nwfdData[i];
            if (features.isflag) {
                shtml += "<div class=\"index_menu index_menu01\" id=\"navpanel" + (i + 1).toString() + "\">";
            } else {
                shtml += "<div style=\"display:none\" class=\"index_menu index_menu01\" id=\"navpanel" + (i + 1).toString() + "\">";
            }


            if (features.children.length > 1) {
                shtml += "<div class=\"index_menu_left \" onclick=\"\">";
                shtml += "<span style='display: inline-block;margin-top: 10px;'>" + features.name + "</span>";
                shtml += "<div class='navpanelList' id=\"navpanelList" + (i + 1).toString() + "\" style=\"background:url('images/data" + (i + 1).toString() + "_s.png')  no-repeat;\"></div>";
                shtml += "</div>";

                shtml += "<div class=\"change index01 floatL\" style=\"\">";
                shtml += "<div class=\"index_menu_right floatL\" style=\"background:rgba(255, 255,255,.5);\">";
                shtml += "<div class=\"index_menu_righ_list floatL\">";
                var childFeatures = features.children;
                for (var j = 0, l = childFeatures.length; j < l; j++) {
                    var childFeature = childFeatures[j];
                    shtml += "<span class=\"list_title\" onclick=\"\" ><input type=\"radio\" name=\"radioButton\"><span>" + childFeature.name + "</span></span>";
                }
                shtml += "</div></div></div>";
            } else {
                var childFeature = features.children[0];
                shtml += "<div class=\"index_menu_left \" onclick=\"\">";
                shtml += "<span style='display: inline-block;margin-top: 10px;'>" + childFeature.name + "</span>";
                shtml += "<div class='navpanelList' id=\"navpanelList" + (i + 1).toString() + "\" style=\"background:url('images/data" + (i + 1).toString() + "_s.png')  no-repeat;\"></div>";
                shtml += "</div>";
            }

            shtml += "</div>";

            //点击左侧图标
            $(".index_menu").live("click", function () {
                var index = $(this).index();

                if (isMobile()) {
                    var height = 42;
                } else {
                    var height = 49;
                }

                $(".index_menu_right").css("top", index * height + 26 + "px");

            })

            $("#navpanel" + (i + 1)).live("click", function () {
                newLujing = false;
                var index = $(this).context.id.replace("navpanel", "");

                $(this).siblings(".change").css({display: "block"});
                $("#navpanelList" + (index)).attr("style", "background:url('images/data" + (index) + "_s.png')  no-repeat;");
                $(this).children(".index_menu_left").attr("style", "background: rgba(157,3,0,.8);color:#fff;border:1px solid #fff;").addClass("select");
                var otherLength = $(this).siblings().children(".index_menu_left").children(".navpanelList").length;
                for (var j = 0; j < otherLength; j++) {
                    var jid = $(this).siblings().children(".index_menu_left").children(".navpanelList")[j].id;
                    var idss = jid.substring(jid.length - 1, jid.length);
                    $(this).siblings().children(".index_menu_left").attr("style", "background:rgba(255, 255,255,.5);color:#000;border:1px solid #eee;").removeClass("select");
                    $(this).siblings().children(".index_menu_left").children("#navpanelList" + idss).attr("style", "background:url('images/data" + (idss) + ".png')  no-repeat;");
                }

                if (kolse) {
                    $("#action").css("display", "block");
                    $("#stop").css("display", "none");
                }

                //停止自动播放
                moveStop();
                clearInterval(timeMove);

                $("#all .mellDay").remove();
                $("#pointer p").remove();
                $("#dateStyle .messDay").remove();
                $(".dayZet li").remove();
                $("#parst li").remove();
                $("#parst ol").remove();

                $("#partst").html("");
                $(".goStart").removeAttr("id");

                changeDiv($(".select span").html());

                ifLayer = ifTime($(".select span").html());
                if (!Boolean(ifLayer)) {
                    pictureFlag = true;
                } else {
                    pictureFlag = false;
                }
                weekDell();
                DayLes(ifLayer);

                if (!Boolean(ifLayer)) {
                    delTsp();
                } else {
                    $("#all").css("left", "0");
                }

                dateRs();  //日期
                pointerAction(ifLayer);
                clickDiv(ifLayer);
                timeBk();

                //移动端时间轴的处理
                init();
                creatDate(ifLayer);
                creatLi(ifLayer);

                celSever(ifLayer);
                centerPointer(ifLayer);

                var obj = $(".select span").html();
                var featureData = getCheckedFeatureData(obj);

                if (!mapClickFlag) {
                    initGif(featureData, 2);
                    //reRectangle.addTo(map);
                }
                eleKey=featureData.apiKey;
                var reName = featureData.name + "格点预报（" + featureData.mileage + "）";
                $("#recordName").html(reName);
                $("#recordName1").html(reName);
                var mobile = isMobile();
                var arry = hoursDel(ifLayer);
                var lenNum = arry[0];
                if (ifLayer) {
                    var divName = parseInt($(".hours").eq(lenNum).attr("name"));
                    var numHours = (divName % 24).toString();
                    if (numHours.length < 2) {
                        numHours = 0 + numHours;
                    }
                    var numDay = parseInt(divName / 24);

                    var dayHtml = $(".dayZet li").eq(numDay).html();

                    var currentTime = dayHtml + " " + numHours + ":00";
                } else {
                    var divName = parseInt($(".hours").eq(lenNum).attr("name"));
                    var numHours = (divName % 24).toString();
                    if (numHours.length < 2) {
                        numHours = 0 + numHours;
                    }
                    var numDay = parseInt(divName / 24);
                    if ((nuTm + hel1) > 24) {
                        var dayHtml = $(".dayZet li").eq(numDay - 1).html();
                    } else {
                        var dayHtml = $(".dayZet li").eq(numDay).html();
                    }

                    var currentTime = dayHtml + " " + numHours + ":00";
                }


                if (ifLayer) {
                    if (Boolean(qel2) && !Boolean(qel3)) {
                        //预报刻度有两种
                        var a, b;
                        var firstForeLeft;
                        //全部实况的结束时的left
                        var shikLeft;
                        //结束时的的left
                        var endForeLeft = $("#parst").width();
                        var firstDayForeLeft
                        if (Tm >= 6 && Tm < 18) {

                            firstForeLeft = (liveTm + 1) * 20 + 10;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 33 * 20 - 10;
                        } else if (Tm < 6) {
                            var tmpTm = liveTm;
                            if (liveTm == 23) {
                                tmpTm = -1
                            }

                            firstForeLeft = (24 + tmpTm + 1) * 20 + 10;
                            shikLeft = (24 + tmpTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        } else if (Tm >= 18) {

                            firstForeLeft = (liveTm + 1) * 20 + 10;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        }
                        var startLeft = parseInt($("#parst").css("left"));
                        if (-startLeft < firstForeLeft) {
                            var index1 = parseInt((-startLeft - 10) / 20);
                        } else if (-startLeft == firstForeLeft) {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1;
                        } else {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1 + parseInt(-startLeft - firstForeLeft);
                        }

                        var numHours1 = $(".hours").eq(index1 - 1).html();
                        if (isLogin) {
                                //控制外网需要登陆

                            if(!mobile){
                                var cname = getCookie("loginname");
                                var cpwd = getCookie("loginpwd");
                                if (cname != undefined && cpwd != undefined) {
                                    //说明已经登录过了  不需要再次登录

                                    getUrl(nuTm, startTime, featureData);

                                    if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                       pickValue(currentLatLng);
                                    }
                                    if (firstFlag == true) {
                                        if (latCan != "" && lngCan != "") {
                                            var latlng = L.latLng(latCan, lngCan);
                                            map.panTo(latlng);
                                            pickValue(latlng);

                                            //判断是否为精细化页面如果是  则显示时序图  否则不显示

                                            firstFlag = false;
                                            var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                            geoc.getLocation(myP1, function (rs) {
                                                if (rs != null) {
                                                    var addComp = rs.addressComponents;
                                                    var area = addComp.district;
                                                    var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                    $(".searchDiv input").val(inputVal);

                                                }

                                            });
                                        }
                                    }
                                } else {
                                    //表示没有登录过  显示登录界面
                                    $(".loginBox").css({"display": "block"});
                                    $("#submitBtn").on("click", function () {
                                        var cname = $("input[name=loginname]").val();
                                        var cpassWord = $("input[name=loginpwd]").val();
                                        var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;



                                        $.ajax({
                                            type: 'get',
                                            url: url,
                                            dataType: 'json',
                                            success: function (result) {
                                                if (result.status == "success") {
                                                    $(".errorMsg").html(result.desc);

                                                    setCookie("loginname", cname, "h24");
                                                    setCookie("loginpwd", cpassWord, "h24");

                                                    $(".errorMsg").fadeIn(100);
                                                    $(".errorMsg").fadeOut(4000);
                                                    $(".loginBox").css({"display": "none"});

                                                    getUrl(nuTm, startTime, featureData);

                                                    if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                                        //pickValue(currentLatLng);
                                                        pickValue(currentLatLng);
                                                    }
                                                    if (firstFlag == true) {
                                                        if (latCan != "" && lngCan != "") {
                                                            var latlng = L.latLng(latCan, lngCan);

                                                            map.panTo(latlng);
                                                            pickValue(latlng);



                                                            firstFlag = false;
                                                            var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                            geoc.getLocation(myP1, function (rs) {
                                                                if (rs != null) {
                                                                    var addComp = rs.addressComponents;
                                                                    var area = addComp.district;
                                                                    var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                                    $(".searchDiv input").val(inputVal);

                                                                }

                                                            });
                                                        }
                                                    }
                                                } else if (result.status == "failed") {
                                                    if (cname == "" && cpassWord.length < 6) {
                                                        $(".errorMsg").html("请输入用户名和至少6位的密码")
                                                    } else if (cname == "" && cpassWord.length >= 6) {
                                                        $(".errorMsg").html("请输入用户名")
                                                    } else if (cname != "" && cpassWord.length < 6) {
                                                        $(".errorMsg").html("请输入至少6位的密码")
                                                    } else if (cname != "" && cpassWord.length > 20) {
                                                        $(".errorMsg").html("请输入不超过20位的密码")
                                                    } else if (cname != "" && cpassWord.length >= 6) {
                                                        $(".errorMsg").html(result.desc)
                                                    }

                                                    $(".errorMsg").fadeIn(100);
                                                    $(".errorMsg").fadeOut(4000);
                                                }
                                            },
                                            error: function (errMsg) {
                                                console.error("加载数据失败");

                                            }
                                        });

                                    })
                                }
                            }else{
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)

                                if (currentLatLng != null) {
                                    pickValue1(currentLatLng);
                                }

                                //判断第一次加载页面的时候是否有参数

                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);

                                        map.panTo(latlng);

                                        pickValue1(latlng);

                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }
                            }


                        } else {
                            //内网不需要登录
                            if (mobile) {
                                //移动端
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)
                                if (currentLatLng != null) {

                                    pickValue1(currentLatLng);
                                }
                            } else {
                                //PC端

                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null && mapClickFlag && yxMapClick) {

                                    pickValue(currentLatLng);
                                }
                            }
                            if (firstFlag == true) {
                                if (latCan != "" && lngCan != "") {
                                    var latlng = L.latLng(latCan, lngCan);
                                    map.panTo(latlng);
                                    if (mobile) {
                                        pickValue1(latlng);
                                    } else {
                                        pickValue(latlng);
                                    }


                                    firstFlag = false;
                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                    geoc.getLocation(myP1, function (rs) {
                                        if (rs != null) {
                                            var addComp = rs.addressComponents;
                                            var area = addComp.district;
                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                            $(".searchDiv input").val(inputVal);

                                        }

                                    });
                                }
                            }

                        }



                    } else if (Boolean(qel3)) {

                    } else {
                        var a, b;
                        var firstForeLeft;
                        //全部实况的结束时的left
                        var shikLeft;
                        //结束时的的left
                        var endForeLeft = $("#parst").width();
                        var firstDayForeLeft;
                        if (Tm >= 6 && Tm < 18) {
                            a = (33 - (liveTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (liveTm + 1) * 20 + b;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 33 * 20 - 10;
                        } else if (Tm < 6) {
                            var tmpTm = liveTm
                            if (liveTm == 23) {
                                tmpTm = -1
                            }
                            a = (45 - (24 + tmpTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (24 + tmpTm + 1) * 20 + b;
                            shikLeft = (24 + tmpTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        } else if (Tm >= 18) {
                            a = (33 - (liveTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (liveTm + 1) * 20 + b;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        }
                        var startLeft = parseInt($("#parst").css("left"));
                        if (-startLeft < firstForeLeft) {
                            var index1 = parseInt((-startLeft - 10) / 20);
                        } else if (-startLeft == firstForeLeft) {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1;
                        } else {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1 + parseInt(-startLeft - firstForeLeft);
                        }

                        var numHours1 = $(".hours").eq(index1 - 1).html();

                            if (isLogin) {
                                //控制外网需要登陆
                                if(!mobile){
                                    var cname = getCookie("loginname");
                                    var cpwd = getCookie("loginpwd");
                                    if (cname != undefined && cpwd != undefined) {
                                        //说明已经登录过了  不需要再次登录
                                        //PC
                                        getUrl(nuTm, startTime, featureData);

                                        if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                            pickValue(currentLatLng);
                                        }

                                        //判断第一次加载页面的时候是否有参数

                                        if (firstFlag == true) {
                                            if (latCan != "" && lngCan != "") {
                                                var latlng = L.latLng(latCan, lngCan);
                                                map.panTo(latlng);
                                                pickValue(latlng);


                                                firstFlag = false;
                                                var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                geoc.getLocation(myP1, function (rs) {
                                                    if (rs != null) {
                                                        var addComp = rs.addressComponents;
                                                        var area = addComp.district;
                                                        var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                        $(".searchDiv input").val(inputVal);

                                                    }

                                                });
                                            }
                                        }
                                    } else {
                                        //表示没有登录过  显示登录界面
                                        $(".loginBox").css({"display": "block"});
                                        $("#submitBtn").on("click", function () {
                                            var cname = $("input[name=loginname]").val();
                                            var cpassWord = $("input[name=loginpwd]").val();
                                            var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;

                                            $.ajax({
                                                type: 'get',
                                                url: url,
                                                dataType: 'json',
                                                success: function (result) {
                                                    if (result.status == "success") {
                                                        $(".errorMsg").html(result.desc);

                                                        setCookie("loginname", cname, "h24");
                                                        setCookie("loginpwd", cpassWord, "h24");

                                                        $(".errorMsg").fadeIn(100);
                                                        $(".errorMsg").fadeOut(4000);
                                                        $(".loginBox").css({"display": "none"});
                                                        //PC
                                                        getUrl(nuTm, startTime, featureData);

                                                        if (currentLatLng != null && mapClickFlag && yxMapClick) {

                                                            pickValue(currentLatLng);
                                                        }

                                                        //判断第一次加载页面的时候是否有参数

                                                        if (firstFlag == true) {
                                                            if (latCan != "" && lngCan != "") {
                                                                var latlng = L.latLng(latCan, lngCan);

                                                                map.panTo(latlng);
                                                                pickValue(latlng);


                                                                firstFlag = false;
                                                                var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                                geoc.getLocation(myP1, function (rs) {
                                                                    if (rs != null) {
                                                                        var addComp = rs.addressComponents;
                                                                        var area = addComp.district;
                                                                        var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                                        $(".searchDiv input").val(inputVal);

                                                                    }

                                                                });
                                                            }
                                                        }
                                                    } else if (result.status == "failed") {
                                                        if (cname == "" && cpassWord.length < 6) {
                                                            $(".errorMsg").html("请输入用户名和至少6位的密码")
                                                        } else if (cname == "" && cpassWord.length >= 6) {
                                                            $(".errorMsg").html("请输入用户名")
                                                        } else if (cname != "" && cpassWord.length < 6) {
                                                            $(".errorMsg").html("请输入至少6位的密码")
                                                        } else if (cname != "" && cpassWord.length > 20) {
                                                            $(".errorMsg").html("请输入不超过20位的密码")
                                                        } else if (cname != "" && cpassWord.length >= 6) {
                                                            $(".errorMsg").html(result.desc)
                                                        }

                                                        $(".errorMsg").fadeIn(100);
                                                        $(".errorMsg").fadeOut(4000);
                                                    }
                                                },
                                                error: function (errMsg) {
                                                    console.error("加载数据失败");

                                                }
                                            });

                                        })
                                    }
                                }else {
                                    //移动端
                                    getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, b);
                                    if (currentLatLng != null) {
                                        pickValue1(currentLatLng);
                                    }

                                    //判断第一次加载页面的时候是否有参数

                                    if (firstFlag == true) {
                                        if (latCan != "" && lngCan != "") {
                                            var latlng = L.latLng(latCan, lngCan);

                                            map.panTo(latlng);
                                            pickValue1(latlng);


                                            firstFlag = false;
                                            var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                            geoc.getLocation(myP1, function (rs) {
                                                if (rs != null) {
                                                    var addComp = rs.addressComponents;
                                                    var area = addComp.district;
                                                    var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                    $(".searchDiv input").val(inputVal);

                                                }

                                            });
                                        }
                                    }

                                }
                            } else {
                                //内网不需要登录
                                if (mobile) {
                                    getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, b);
                                    if (currentLatLng != null) {

                                        pickValue1(currentLatLng);
                                    }
                                } else {
                                    //PC
                                    getUrl(nuTm, startTime, featureData);

                                    if (currentLatLng != null && mapClickFlag && yxMapClick) {

                                        pickValue(currentLatLng);
                                    }
                                }
                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);

                                        map.panTo(latlng);
                                        if (mobile) {
                                            pickValue1(latlng);
                                        } else {
                                            pickValue(latlng);
                                        }


                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }

                            }

                    }


                } else {
                    //没有实况数据
                    if (isLogin) {
                        //控制外网需要登陆
                        if(mobile){
                            //移动端
                            getUrl1(startTime, currentTime, featureData);

                            if (currentLatLng != null) {
                                pickValue1(currentLatLng);
                            }
                            if (firstFlag == true) {
                                if (latCan != "" && lngCan != "") {
                                    var latlng = L.latLng(latCan, lngCan);
                                    map.panTo(latlng);
                                    pickValue1(latlng);


                                    firstFlag = false;
                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                    geoc.getLocation(myP1, function (rs) {
                                        if (rs != null) {
                                            var addComp = rs.addressComponents;
                                            var area = addComp.district;
                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                            $(".searchDiv input").val(inputVal);

                                        }

                                    });
                                }
                            }
                        }else{
                            var cname = getCookie("loginname");
                            var cpwd = getCookie("loginpwd");
                            if (cname != undefined && cpwd != undefined) {
                                //说明已经登录过了  不需要再次登录
                                //pc端
                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null) {
                                    pickValue(currentLatLng);
                                }

                                //判断第一次加载页面的时候是否有参数

                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);
                                     map.panTo(latlng);
                                        pickValue(latlng);


                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }
                            } else {
                                //表示没有登录过  显示登录界面
                                $(".loginBox").css({"display": "block"});
                                $("#submitBtn").on("click", function () {
                                    var cname = $("input[name=loginname]").val();
                                    var cpassWord = $("input[name=loginpwd]").val();
                                    var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;


								$.ajax({
								    type: 'get',
								    url: url,
								    dataType: 'json',
								    success: function (result) {
								        if (result.status == "success") {
								            $(".errorMsg").html(result.desc);

								            setCookie("loginname", cname, "h24");
								            setCookie("loginpwd", cpassWord, "h24");

								            $(".errorMsg").fadeIn(100);
								            $(".errorMsg").fadeOut(4000);
								            $(".loginBox").css({"display": "none"});

								            //pc端
								            getUrl(nuTm, startTime, featureData);

								            if (currentLatLng != null) {
								                pickValue(currentLatLng);
								            }

								            //判断第一次加载页面的时候是否有参数

								            if (firstFlag == true) {
								                if (latCan != "" && lngCan != "") {
								                    var latlng = L.latLng(latCan, lngCan);
								                    map.panTo(latlng);
								                    pickValue(latlng);


								                    firstFlag = false;
								                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
								                    geoc.getLocation(myP1, function (rs) {
								                        if (rs != null) {
								                            var addComp = rs.addressComponents;
								                            var area = addComp.district;
								                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

								                            $(".searchDiv input").val(inputVal);

								                        }

								                    });
								                }
								            }
								        } else if (result.status == "failed") {
								            if (cname == "" && cpassWord.length < 6) {
								                $(".errorMsg").html("请输入用户名和至少6位的密码")
								            } else if (cname == "" && cpassWord.length >= 6) {
								                $(".errorMsg").html("请输入用户名")
								            } else if (cname != "" && cpassWord.length < 6) {
								                $(".errorMsg").html("请输入至少6位的密码")
								            } else if (cname != "" && cpassWord.length > 20) {
								                $(".errorMsg").html("请输入不超过20位的密码")
								            } else if (cname != "" && cpassWord.length >= 6) {
								                $(".errorMsg").html(result.desc)
								            }

								            $(".errorMsg").fadeIn(100);
								            $(".errorMsg").fadeOut(4000);
								        }
								    },
								    error: function (errMsg) {
								        console.error("加载数据失败");

								    }
								});

//			console.log(cpassWord.length);
                                })
                            }
                        }

                    } else {
                        if (mobile) {
                            //移动端
                            getUrl1(startTime, currentTime, featureData);

                            if (currentLatLng != null) {
                                pickValue1(currentLatLng);
                            }
                        } else {
                            //pc端
                            getUrl(nuTm, startTime, featureData);

                            if (currentLatLng != null) {
                                pickValue(currentLatLng);
                            }
                        }
                        //判断第一次加载页面的时候是否有参数

                        if (firstFlag == true) {
                            if (latCan != "" && lngCan != "") {
                                var latlng = L.latLng(latCan, lngCan);
                                map.panTo(latlng);
                                if (mobile) {
                                    pickValue1(latlng);
                                } else {
                                    pickValue(latlng);
                                }


                                firstFlag = false;
                                var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                geoc.getLocation(myP1, function (rs) {
                                    if (rs != null) {
                                        var addComp = rs.addressComponents;
                                        var area = addComp.district;
                                        var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                        $(".searchDiv input").val(inputVal);

                                    }

                                });
                            }
                        }
                    }


                }

            });
        }
        shtml += "<div id=\"navMore\" style=\"float:left;width:100%;height:49px;text-align: center;line-height: 49px;cursor: pointer;box-shadow: 0 1px 1px 1px #7d7b78;color:#fff;font-size:40px;line-height:25px;\"><span>...</span></div><div class=\"moreNotice\" style=\"display:none;width:100px;color:#fff;position:absolute;font-size:12px;left:60px;bottom:15px;\">显示/添加更多层</div>";
        $("#leftNav").html(shtml);
        //触发input点击事件

        $(".index_menu_left").eq(0).trigger("click");
        $(".index_menu_left").siblings().css({display: "none"});

        //是否显示更多的提示信息
        $("#navMore").on("mouseover", function () {
            $(".moreNotice").css({display: "block"})
        })
        $("#navMore").on("mouseout", function () {
            $(".moreNotice").css({display: "none"})
        })
        //点击更多的时候处理
        $("#navMore").on("click", function () {
            $("input[name='eleSelect']").eq(0).attr("checked",true);

            $("#leftNavTool").animate({width: 200}, 500, function () {
            })
            $("#leftNav").animate({left: 200}, 500, function () {
            });
            var navList = '<div id="navListLi" style="width:170px;height: auto;display: inline-block;margin:15px;"><ol style="display: inline-block;width:100%;height:auto;"><li style="display:inline-block;float:left;padding:3px 5px;height:20px;color:#fff;text-align: center;line-height: 20px;cursor: pointer">全部</li>';
            for (var i = 0; i < nwfdData.length; i++) {
                navList += '<li style="display:inline-block;float:left;height:20px;color:#fff;text-align: center;cursor:pointer;line-height: 20px;padding:3px 5px;">' + nwfdData[i].name + '</li>'
            }
            navList += '</ol></div>';
            navList += '<div style="width:170px;height:402px;overflow-y: auto;overflow-x: hidden;margin-left: 15px;margin-top: -15px;"><div id="listPage" style="margin-top:15px;width:100%;height:auto;display: inline-block;"></div></div><div class="listPageClose"><div class="close"></div></div>'
            $("#leftNavTool").html(navList);


            $("#listPage li").live("click", function () {
                $(".change").css({display: "none"});
                newLujing = true;
                $(this).siblings().removeClass("liPage_liSelect");
                $(this).addClass("liPage_liSelect");
                var i = $(this).index();
                 if (kolse) {
                    $("#action").css("display", "block");
                    $("#stop").css("display", "none");
                }

                //停止自动播放
                moveStop();
                clearInterval(timeMove);

                $("#all .mellDay").remove();
                $("#pointer p").remove();
                $("#dateStyle .messDay").remove();
                $(".dayZet li").remove();
                $("#parst li").remove();
                $("#parst ol").remove();

                $("#partst").html("");
                $(".goStart").removeAttr("id");

                var obj;
                if ($("li.liSelect").text() == "全部") {
                    obj = $(".list_title").eq(i).parents(".change").siblings().children("span").text();//基本要素
                } else {
                    obj = $("li.liSelect").text();
                }

                changeDiv(obj);

                ifLayer = ifTime(obj);
                if (!Boolean(ifLayer)) {
                    pictureFlag = true;
                } else {
                    pictureFlag = false;
                }
                weekDell();
                DayLes(ifLayer);

                if (!Boolean(ifLayer)) {
                    delTsp();
                } else {
                    $("#all").css("left", "0");
                }

                dateRs();  //日期
                pointerAction(ifLayer);
                clickDiv(ifLayer);
                timeBk();

                //移动端时间轴的处理
                init();
                creatDate(ifLayer);
                creatLi(ifLayer);

                celSever(ifLayer);
                centerPointer(ifLayer);

                 var featureData = getCheckedFeatureData(obj);

                if (!mapClickFlag) {
                    initGif(featureData, 2);
                }
                eleKey=featureData.apiKey;
                var reName = featureData.name + "格点预报（" + featureData.mileage + "）";
                $("#recordName").html(reName);
                $("#recordName1").html(reName);
                var mobile = isMobile();
                var arry = hoursDel(ifLayer);
                var lenNum = arry[0];
                if (ifLayer) {
                    var divName = parseInt($(".hours").eq(lenNum).attr("name"));
                    var numHours = (divName % 24).toString();
                    if (numHours.length < 2) {
                        numHours = 0 + numHours;
                    }
                    var numDay = parseInt(divName / 24);

                    var dayHtml = $(".dayZet li").eq(numDay).html();

                    var currentTime = dayHtml + " " + numHours + ":00";
                } else {
                    var divName = parseInt($(".hours").eq(lenNum).attr("name"));
                    var numHours = (divName % 24).toString();
                    if (numHours.length < 2) {
                        numHours = 0 + numHours;
                    }
                    var numDay = parseInt(divName / 24);
                    if ((nuTm + hel1) > 24) {
                        var dayHtml = $(".dayZet li").eq(numDay - 1).html();
                    } else {
                        var dayHtml = $(".dayZet li").eq(numDay).html();
                    }

                    var currentTime = dayHtml + " " + numHours + ":00";
                }


                if (ifLayer) {
                    if (Boolean(qel2) && !Boolean(qel3)) {
                        //预报刻度有两种
                        var a, b;
                        var firstForeLeft;
                        //全部实况的结束时的left
                        var shikLeft;
                        //结束时的的left
                        var endForeLeft = $("#parst").width();
                        var firstDayForeLeft
                        if (Tm >= 6 && Tm < 18) {

                            firstForeLeft = (liveTm + 1) * 20 + 10;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 33 * 20 - 10;
                        } else if (Tm < 6) {
                            var tmpTm = liveTm;
                            if (liveTm == 23) {
                                tmpTm = -1
                            }

                            firstForeLeft = (24 + tmpTm + 1) * 20 + 10;
                            shikLeft = (24 + tmpTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        } else if (Tm >= 18) {

                            firstForeLeft = (liveTm + 1) * 20 + 10;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        }
                        var startLeft = parseInt($("#parst").css("left"));
                        if (-startLeft < firstForeLeft) {
                            var index1 = parseInt((-startLeft - 10) / 20);
                        } else if (-startLeft == firstForeLeft) {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1;
                        } else {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1 + parseInt(-startLeft - firstForeLeft);
                        }

                        var numHours1 = $(".hours").eq(index1 - 1).html();
                        if (isLogin) {
                            //控制外网需要登陆
                            if(mobile){ //移动端
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)
                                if (currentLatLng != null) {
                                     pickValue1(currentLatLng);
                                }
                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);
                                        map.panTo(latlng);
                                        pickValue1(latlng);


                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }
                            }else{ var cname = getCookie("loginname");
                                var cpwd = getCookie("loginpwd");
                                if (cname != undefined && cpwd != undefined) {
                                    //说明已经登录过了  不需要再次登录
                                    //PC端

                                    getUrl(nuTm, startTime, featureData);

                                    if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                         pickValue(currentLatLng);
                                    }

                                    //判断第一次加载页面的时候是否有参数

                                    if (firstFlag == true) {
                                        if (latCan != "" && lngCan != "") {
                                            var latlng = L.latLng(latCan, lngCan);
                                            map.panTo(latlng);
                                            pickValue(latlng);

                                            firstFlag = false;
                                            var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                            geoc.getLocation(myP1, function (rs) {
                                                if (rs != null) {
                                                    var addComp = rs.addressComponents;
                                                    var area = addComp.district;
                                                    var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                    $(".searchDiv input").val(inputVal);

                                                }

                                            });
                                        }
                                    }
                                } else {
                                    //表示没有登录过  显示登录界面
                                    $(".loginBox").css({"display": "block"});
                                    $("#submitBtn").on("click", function () {
                                        var cname = $("input[name=loginname]").val();
                                        var cpassWord = $("input[name=loginpwd]").val();
                                        var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;


                                        $.ajax({
                                            type: 'get',
                                            url: url,
                                            dataType: 'json',
                                            success: function (result) {
                                                if (result.status == "success") {
                                                    $(".errorMsg").html(result.desc);

                                                    setCookie("loginname", cname, "h24");
                                                    setCookie("loginpwd", cpassWord, "h24");

                                                    $(".errorMsg").fadeIn(100);
                                                    $(".errorMsg").fadeOut(4000);
                                                    $(".loginBox").css({"display": "none"});

                                                    //PC端


                                                    getUrl(nuTm, startTime, featureData);

                                                    if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                                         pickValue(currentLatLng);
                                                    }
                                                    //判断第一次加载页面的时候是否有参数

                                                    if (firstFlag == true) {
                                                        if (latCan != "" && lngCan != "") {
                                                            var latlng = L.latLng(latCan, lngCan);
                                                            map.panTo(latlng);
                                                            pickValue(latlng);

                                                            firstFlag = false;
                                                            var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                            geoc.getLocation(myP1, function (rs) {
                                                                if (rs != null) {
                                                                    var addComp = rs.addressComponents;
                                                                    var area = addComp.district;
                                                                    var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                                    $(".searchDiv input").val(inputVal);

                                                                }

                                                            });
                                                        }
                                                    }
                                                } else if (result.status == "failed") {
                                                    if (cname == "" && cpassWord.length < 6) {
                                                        $(".errorMsg").html("请输入用户名和至少6位的密码")
                                                    } else if (cname == "" && cpassWord.length >= 6) {
                                                        $(".errorMsg").html("请输入用户名")
                                                    } else if (cname != "" && cpassWord.length < 6) {
                                                        $(".errorMsg").html("请输入至少6位的密码")
                                                    } else if (cname != "" && cpassWord.length > 20) {
                                                        $(".errorMsg").html("请输入不超过20位的密码")
                                                    } else if (cname != "" && cpassWord.length >= 6) {
                                                        $(".errorMsg").html(result.desc)
                                                    }

                                                    $(".errorMsg").fadeIn(100);
                                                    $(".errorMsg").fadeOut(4000);
                                                }
                                            },
                                            error: function (errMsg) {
                                                console.error("加载数据失败");

                                            }
                                        });

//			console.log(cpassWord.length);
                                    })
                                }
                            }


                        } else {
                            //内网不需要登录
                            if (mobile) {
                                //移动端
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)
                                if (currentLatLng != null) {
                                     pickValue1(currentLatLng);
                                }
                            } else {
                                //PC端

                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                    pickValue(currentLatLng);
                                }
                            }
                            if (firstFlag == true) {
                                if (latCan != "" && lngCan != "") {
                                    var latlng = L.latLng(latCan, lngCan);
                                   map.panTo(latlng);
                                    if (mobile) {
                                        pickValue1(latlng);
                                    } else {
                                        pickValue(latlng);
                                    }


                                    firstFlag = false;
                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                    geoc.getLocation(myP1, function (rs) {
                                        if (rs != null) {
                                            var addComp = rs.addressComponents;
                                            var area = addComp.district;
                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                            $(".searchDiv input").val(inputVal);

                                        }

                                    });
                                }
                            }

                        }

                    } else if (Boolean(qel3)) {

                    } else {
                        var a, b;
                        var firstForeLeft;
                        //全部实况的结束时的left
                        var shikLeft;
                        //结束时的的left
                        var endForeLeft = $("#parst").width();
                        var firstDayForeLeft;
                        if (Tm >= 6 && Tm < 18) {
                            a = (33 - (liveTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (liveTm + 1) * 20 + b;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 33 * 20 - 10;
                        } else if (Tm < 6) {
                            var tmpTm = liveTm
                            if (liveTm == 23) {
                                tmpTm = -1
                            }
                            a = (45 - (24 + tmpTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (24 + tmpTm + 1) * 20 + b;
                            shikLeft = (24 + tmpTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        } else if (Tm >= 18) {
                            a = (33 - (liveTm + 1)) % hel1;
                            if (a == 0) {
                                b = 20 * hel1 / 2;
                            } else {
                                b = 20 * a / 2;
                            }
                            firstForeLeft = (liveTm + 1) * 20 + b;
                            shikLeft = (liveTm + 1) * 20;
                            firstDayForeLeft = 45 * 20 - 10;
                        }
                        var startLeft = parseInt($("#parst").css("left"));
                        if (-startLeft < firstForeLeft) {
                            var index1 = parseInt((-startLeft - 10) / 20);
                        } else if (-startLeft == firstForeLeft) {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1;
                        } else {
                            var index1 = parseInt((shikLeft - 10) / 20) + 1 + parseInt(-startLeft - firstForeLeft);
                        }

                        var numHours1 = $(".hours").eq(index1 - 1).html();
                        if (isLogin) {
                            //控制外网需要登陆
                            if(mobile){
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)
                                if (currentLatLng != null) {
                                    pickValue1(currentLatLng);
                                }
                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);
                                        map.panTo(latlng);
                                        pickValue1(latlng);



                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }
                            }else{

                            }
                            var cname = getCookie("loginname");
                            var cpwd = getCookie("loginpwd");
                            if (cname != undefined && cpwd != undefined) {
                                //说明已经登录过了  不需要再次登录
                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                    //pickValue(currentLatLng);
                                    pickValue(currentLatLng);
                                }
                                //判断第一次加载页面的时候是否有参数

                                if (firstFlag == true) {
                                    if (latCan != "" && lngCan != "") {
                                        var latlng = L.latLng(latCan, lngCan);
                                         map.panTo(latlng);
                                        pickValue(latlng);



                                        firstFlag = false;
                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                        geoc.getLocation(myP1, function (rs) {
                                            if (rs != null) {
                                                var addComp = rs.addressComponents;
                                                var area = addComp.district;
                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                $(".searchDiv input").val(inputVal);

                                            }

                                        });
                                    }
                                }
                            } else {
                                //表示没有登录过  显示登录界面
                                $(".loginBox").css({"display": "block"});
                                $("#submitBtn").on("click", function () {
                                    var cname = $("input[name=loginname]").val();
                                    var cpassWord = $("input[name=loginpwd]").val();
                                    var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;


                                    $.ajax({
                                        type: 'get',
                                        url: url,
                                        dataType: 'json',
                                        success: function (result) {
                                            if (result.status == "success") {
                                                $(".errorMsg").html(result.desc);

                                                setCookie("loginname", cname, "h24");
                                                setCookie("loginpwd", cpassWord, "h24");

                                                $(".errorMsg").fadeIn(100);
                                                $(".errorMsg").fadeOut(4000);
                                                $(".loginBox").css({"display": "none"});

                                                getUrl(nuTm, startTime, featureData);

                                                if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                                    pickValue(currentLatLng);
                                                }
                                                //判断第一次加载页面的时候是否有参数

                                                if (firstFlag == true) {
                                                    if (latCan != "" && lngCan != "") {
                                                        var latlng = L.latLng(latCan, lngCan);
                                                        map.panTo(latlng);
                                                        pickValue(latlng);



                                                        firstFlag = false;
                                                        var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                        geoc.getLocation(myP1, function (rs) {
                                                            if (rs != null) {
                                                                var addComp = rs.addressComponents;
                                                                var area = addComp.district;
                                                                var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                                $(".searchDiv input").val(inputVal);

                                                            }

                                                        });
                                                    }
                                                }
                                            } else if (result.status == "failed") {
                                                if (cname == "" && cpassWord.length < 6) {
                                                    $(".errorMsg").html("请输入用户名和至少6位的密码")
                                                } else if (cname == "" && cpassWord.length >= 6) {
                                                    $(".errorMsg").html("请输入用户名")
                                                } else if (cname != "" && cpassWord.length < 6) {
                                                    $(".errorMsg").html("请输入至少6位的密码")
                                                } else if (cname != "" && cpassWord.length > 20) {
                                                    $(".errorMsg").html("请输入不超过20位的密码")
                                                } else if (cname != "" && cpassWord.length >= 6) {
                                                    $(".errorMsg").html(result.desc)
                                                }

                                                $(".errorMsg").fadeIn(100);
                                                $(".errorMsg").fadeOut(4000);
                                            }
                                        },
                                        error: function (errMsg) {
                                            console.error("加载数据失败");

                                        }
                                    });

//			console.log(cpassWord.length);
                                })
                            }


                        } else {
                            //内网不需要登录
                            if (mobile) {
                                //移动端
                                getUrl2(startTime, featureData, startLeft, shikLeft, firstForeLeft, endForeLeft, numHours1, firstDayForeLeft)
                                if (currentLatLng != null) {
                                     pickValue1(currentLatLng);
                                }
                            } else {
                                //PC端

                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null && mapClickFlag && yxMapClick) {
                                    pickValue(currentLatLng);
                                }
                            }
                            if (firstFlag == true) {
                                if (latCan != "" && lngCan != "") {
                                    var latlng = L.latLng(latCan, lngCan);
                                    map.panTo(latlng);
                                    if (mobile) {
                                        pickValue1(latlng);
                                    } else {
                                        pickValue(latlng);
                                    }



                                    firstFlag = false;
                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                    geoc.getLocation(myP1, function (rs) {
                                        if (rs != null) {
                                            var addComp = rs.addressComponents;
                                            var area = addComp.district;
                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                            $(".searchDiv input").val(inputVal);

                                        }

                                    });
                                }
                            }

                        }

                    }


                } else {
                    //没有实况数据
                    if (isLogin) {
                        //控制外网需要登陆
                        var cname = getCookie("loginname");
                        var cpwd = getCookie("loginpwd");
                        if (cname != undefined && cpwd != undefined) {
                            //说明已经登录过了  不需要再次登录
                            if (mobile) {
                                //移动端
                                getUrl1(startTime, currentTime, featureData);

                                if (currentLatLng != null) {
                                    pickValue1(currentLatLng);
                                }
                            } else {
                                //pc端
                                getUrl(nuTm, startTime, featureData);

                                if (currentLatLng != null) {
                                    pickValue(currentLatLng);
                                }
                            }

                            //判断第一次加载页面的时候是否有参数

                            if (firstFlag == true) {
                                if (latCan != "" && lngCan != "") {
                                    var latlng = L.latLng(latCan, lngCan);
                                    map.panTo(latlng);
                                    if (mobile) {
                                        pickValue1(latlng);
                                    } else {
                                        pickValue(latlng);
                                    }



                                    firstFlag = false;
                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                    geoc.getLocation(myP1, function (rs) {
                                        if (rs != null) {
                                            var addComp = rs.addressComponents;
                                            var area = addComp.district;
                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                            $(".searchDiv input").val(inputVal);

                                        }

                                    });
                                }
                            }
                        } else {
                            //表示没有登录过  显示登录界面
                            $(".loginBox").css({"display": "block"});
                            $("#submitBtn").on("click", function () {
                                var cname = $("input[name=loginname]").val();
                                var cpassWord = $("input[name=loginpwd]").val();
                                var url = handlerPath + "/MeteoHandler?method=login&userName=" + cname + "&passWord=" + cpassWord;


                                $.ajax({
                                    type: 'get',
                                    url: url,
                                    dataType: 'json',
                                    success: function (result) {
                                        if (result.status == "success") {
                                            $(".errorMsg").html(result.desc);

                                            setCookie("loginname", cname, "h24");
                                            setCookie("loginpwd", cpassWord, "h24");

                                            $(".errorMsg").fadeIn(100);
                                            $(".errorMsg").fadeOut(4000);
                                            $(".loginBox").css({"display": "none"});

                                            if (mobile) {
                                                //移动端
                                                getUrl1(startTime, currentTime, featureData);

                                                if (currentLatLng != null) {
                                                    pickValue1(currentLatLng);
                                                }
                                            } else {
                                                //pc端
                                                getUrl(nuTm, startTime, featureData);

                                                if (currentLatLng != null) {
                                                    pickValue(currentLatLng);
                                                }
                                            }

                                            //判断第一次加载页面的时候是否有参数

                                            if (firstFlag == true) {
                                                if (latCan != "" && lngCan != "") {
                                                    var latlng = L.latLng(latCan, lngCan);
                                                   map.panTo(latlng);
                                                    if (mobile) {
                                                        pickValue1(latlng);
                                                    } else {
                                                        pickValue(latlng);
                                                    }



                                                    firstFlag = false;
                                                    var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                                    geoc.getLocation(myP1, function (rs) {
                                                        if (rs != null) {
                                                            var addComp = rs.addressComponents;
                                                            var area = addComp.district;
                                                            var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                                            $(".searchDiv input").val(inputVal);

                                                        }

                                                    });
                                                }
                                            }
                                        } else if (result.status == "failed") {
                                            if (cname == "" && cpassWord.length < 6) {
                                                $(".errorMsg").html("请输入用户名和至少6位的密码")
                                            } else if (cname == "" && cpassWord.length >= 6) {
                                                $(".errorMsg").html("请输入用户名")
                                            } else if (cname != "" && cpassWord.length < 6) {
                                                $(".errorMsg").html("请输入至少6位的密码")
                                            } else if (cname != "" && cpassWord.length > 20) {
                                                $(".errorMsg").html("请输入不超过20位的密码")
                                            } else if (cname != "" && cpassWord.length >= 6) {
                                                $(".errorMsg").html(result.desc)
                                            }

                                            $(".errorMsg").fadeIn(100);
                                            $(".errorMsg").fadeOut(4000);
                                        }
                                    },
                                    error: function (errMsg) {
                                        console.error("加载数据失败");

                                    }
                                });

//			console.log(cpassWord.length);
                            })
                        }
                    } else {
                        //内网不需要登录
                        if (mobile) {
                            //移动端
                            getUrl1(startTime, currentTime, featureData);

                            if (currentLatLng != null) {
                                pickValue1(currentLatLng);
                            }
                        } else {
                            //pc端
                            getUrl(nuTm, startTime, featureData);

                            if (currentLatLng != null) {
                                pickValue(currentLatLng);
                            }
                        }
                        //判断第一次加载页面的时候是否有参数

                        if (firstFlag == true) {
                            if (latCan != "" && lngCan != "") {
                                var latlng = L.latLng(latCan, lngCan);
                                map.panTo(latlng);
                                if (mobile) {
                                    pickValue1(latlng);
                                } else {
                                    pickValue(latlng);
                                }

                                firstFlag = false;
                                var myP1 = new BMap.Point(latlng.lng, latlng.lat);
                                geoc.getLocation(myP1, function (rs) {
                                    if (rs != null) {
                                        var addComp = rs.addressComponents;
                                        var area = addComp.district;
                                        var inputVal = area + "  " + latlng.lng.toFixed(2) + "," + latlng.lat.toFixed(2);

                                        $(".searchDiv input").val(inputVal);

                                    }

                                });
                            }
                        }
                    }


                }

            });
            $("#navListLi li").live("click", function () {
                $(this).siblings().removeClass("liSelect");
                $(this).addClass("liSelect");
                var i = $(this).index();
                var liEle = '<ol style="display: inline-block;width:100%;height:auto;">';
                if (i == 0) {
                    //点击全部显示全部子要素
                    for (var j = 0; j < nwfdData.length; j++) {
                        var feature = nwfdData[j];
                        for (var k = 0; k < feature.children.length; k++) {
                            liEle += '<li style="display:inline-block;float:left;width:100%;height:20px;color:#fff;text-align: left;cursor:pointer;line-height: 20px;padding:3px 5px;">' + feature.children[k].name + '</li>';
                        }
                    }
                } else {
                    var obj = $(this).text();
                    //点击全部显示全部子要素

                    for (var j = 0; j < nwfdData.length; j++) {
                        var feature = nwfdData[j];
                        if (obj == feature.name) {
                            if (feature.isflag) {
                                liEle += '<div class="main-wraper">\
                           <div class="topbar clearfix"><div class="boxwrap fr" style="">\
                                   <div class="switchBox fl" id="cityList" typeId="city">\
                                   <table  cellpadding="0" cellspacing="0">\
                                   <tr>\
                                   <td class="switch_box_l"></td>\
                                   <td class="switch_box_c rel">\
                                   <span class="abs switchBtn" >\
                                   <i class="switchBtn-l"></i>\
                                   <i class="switchBtn-r"></i>\
                                   <span class="curTxt">开</span>\
                                   </span>\
                                   <a href="javascript:void(0);" class="swichTxt cur" id="moreCity">开</a>\
                                   <a href="javascript:void(0);" class="swichTxt" id="moreStation">关</a>\
                                   </td>\
                                   <td class="switch_box_r"></td>\
                                   </tr>\
                                   </table>\
                                   </div>\
                                   </div></div></div>'
                            } else {
                                liEle += '<div class="main-wraper">\
                           <div class="topbar clearfix"><div class="boxwrap fr" style="">\
                                   <div class="switchBox fl" id="cityList" typeId="city">\
                                   <table  cellpadding="0" cellspacing="0">\
                                   <tr>\
                                   <td class="switch_box_l"></td>\
                                   <td class="switch_box_c rel">\
                                   <span class="abs switchBtn" style="left:20px">\
                                   <i class="switchBtn-l"></i>\
                                   <i class="switchBtn-r"></i>\
                                   <span class="curTxt">关</span>\
                                   </span>\
                                   <a href="javascript:void(0);" class="swichTxt" id="moreCity">开</a>\
                                   <a href="javascript:void(0);" class="swichTxt cur" id="moreStation">关</a>\
                                   </td>\
                                   <td class="switch_box_r"></td>\
                                   </tr>\
                                   </table>\
                                   </div>\
                                   </div></div></div>'

                            }
                        }
                        for (var k = 0; k < feature.children.length; k++) {
                            if (obj == nwfdData[j].name) {

                                liEle += '<li style="display:inline-block;float:left;width:100%;height:20px;color:#fff;text-align: left;cursor:pointer;line-height: 20px;padding:3px 5px;">' + feature.children[k].name + '</li>';
                            }

                        }
                    }
                }
                liEle += '</ol><div class="warn" style="display:none;"></div>';
                $("#listPage").html(liEle);

                if ($("li.liSelect").index() == 0 || $("li.liSelect").index() == 1) {
                    //全部的时候默认24小时降水
                    $("#listPage li").eq(3).trigger("click");
                } else {
                    $("#listPage li").eq(0).trigger("click");
                }
            });

            $("#navListLi li").eq(0).trigger("click");

            //点击取消事件
            $(".listPageClose .close").die().live("click", function () {
                $("#leftNavTool").animate({width: 0}, 500, function () {
                });
                $("#leftNav").animate({left: 0}, 500, function () {
                });
            });

        })
    }



    $(".boxwrap a").on("click",function(){
        var id = $(this).attr("id");
        var type = $(this).attr("typeId");
    });
    //添加click事件
    $(".boxwrap").find('.swichTxt').live("click",function() {
        var default_padding = 5;
        var newIndex = $(this).index(),
            oldIndex = $(".boxwrap").find('.cur').index(),
            curTxt = $(this).html(),
            eleWidth = $(this).width() + default_padding,
            value = $(this).attr('id');
        distant = -1;
        $(".boxwrap").attr('selVal', value);
        distant = moveWidth("cityList", oldIndex, newIndex); //计算滑动距离
        //回调函数参数 点击标签的类型 和 值
        var obj = {
            type: 'moreCity',
            value: value
        };

        //左移动
        if (newIndex > oldIndex) {
            //滑向关闭得按钮
            $(".boxwrap").find(".switchBtn").animate({
                'left': '+=' + 20 + 'px'
            }, function() {
                $(".boxwrap").find('.curTxt').html(curTxt);
                $(".boxwrap").find("#switchBtn").width(20);
                ////执行回调函数
               var i=$("li.liSelect").index();
                $("#navpanelList"+ i.toString()).parents(".index_menu").css({display:"none"})
                nwfdData[i-1].isflag=false;
            });
            oldIndex = newIndex;
        } else if (newIndex < oldIndex) { //右移动
            //滑向打开的按钮
            $(".boxwrap").find(".switchBtn").animate({
                'left': '-=' + distant + 'px'
            }, function() {
                $(this).find('.curTxt').html(curTxt);
                $(".boxwrap").find(".switchBtn").width(20);
                ////执行回调函数
                var i=$("li.liSelect").index();
                $("#navpanelList"+ i.toString()).parents(".index_menu").css({display:"block"})
                nwfdData[i-1].isflag=true;
            });
            oldIndex = newIndex;
        }
        $(".boxwrap").find('.cur').removeClass('cur');
        $(this).addClass('cur');
    });
    /**
     *计算按钮移动距离
     * @wrapperId 容器id
     * @oldIndex 之前选中的选项索引
     * @newIndex 当前点击选项索引
     */
    function moveWidth(wrapperId, oldIndex, newIndex) {
        var width = 0;
        //向右移动
        if (oldIndex < newIndex) {
            var $s_btn = $(".boxwrap").find(".switchBtn");
            var $a_btn = $(".boxwrap").find('.swichTxt').eq(newIndex - 1);
            //当前span左侧位置离左边的距离
            var curBtn = $s_btn.offset().left;
            //目标标签左侧位置离左边的距离
            var einA = $a_btn.offset().left;
            width = parseInt(einA - curBtn + 9); //?
        } else { //向左移动
            var $s_btn = $(".boxwrap").find(".switchBtn");
            var $a_btn = $(".boxwrap").find('.swichTxt').eq(newIndex - 1);
            //当前span左侧位置离左边的距离
            var curBtn = $s_btn.offset().left;
            //目标标签左侧位置离左边的距离
            var einA = $a_btn.offset().left;
            width = parseInt(curBtn - einA);
        }
        return width;
    }

	var t = startTime.format("yyyy-MM-dd");
	if(Tm >= 6 && Tm < 18){
		t += "&nbsp;&nbsp;08时发布";
	}else if(Tm >= 18){
		t += "&nbsp;&nbsp;20时发布";
	}else if(Tm < 6){
		t = moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + "&nbsp;&nbsp;20时发布";
	}
	$("#recordTime").html(t);



//璁剧疆cookie閲岃竟鐨勫��
	function setCookie(name,value,time)
	{
		var strsec = getsec(time);
		var exp = new Date();
		exp.setTime(exp.getTime() + strsec*1);
		document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();
	}
	//璁剧疆杩囨湡鏃堕棿
	function getsec(str)
	{
		var str1=str.substring(1,str.length)*1;
		var str2=str.substring(0,1);
		if (str2=="s")
		{
			return str1*1000;
		}else if(str2=="m"){
			return str1*60*1000;
		}
		else if (str2=="h")
		{
			return str1*60*60*1000;
		}
		else if (str2=="d")
		{
			return str1*24*60*60*1000;
		}
	}
	//璇诲彇cookie鍊�
	function getCookie(name)
	{
		var arr,reg=new RegExp("(^| )"+name+"=([^;]*)(;|$)");

		if(arr=document.cookie.match(reg))

			return unescape(arr[2]);
		else
			return null;
	}


	// 获取某个选中子要素的数据
	function getCheckedFeatureData(obj){
		var featureData = null;
		for(var i=0;i<nwfdData.length;i++){
			if(obj==nwfdData[i].name){
                if(newLujing){
                    //点击的是展开的操作板里面的li处理数据
                    if(nwfdData[i].children.length==1){
                        featureData = nwfdData[i].children[0];
                    }else {
                        var obj = $(".liPage_liSelect").html();
                        var values = nwfdData[i].children;
                        for(var j = 0; j < values.length; j++){
                            if(obj == values[j].name){
                                featureData = values[j];
                                break;
                            }
                        }
                    }
                }else{
                    //未展开的操作板span  input额处理数据
                    if(nwfdData[i].children.length==1){
                        featureData = nwfdData[i].children[0];
                    }else {
                        var obj = $(".select").siblings().find("input[name=radioButton]:checked").siblings("span").html();
                        var values = nwfdData[i].children;
                        for(var j = 0; j < values.length; j++){
                            if(obj == values[j].name){
                                featureData = values[j];
                                break;
                            }
                        }
                    }
                }


				break;
			}
		}
		return featureData;
	}


	function initGif(feautrueData,flag){
		if(!Boolean(ifLayer)){
			//没有实况的
			var apiTime=startTime;
			var api='';
			if(Tm>=18){
				apiTime.setHours(20);
			}else if(Tm>=6&&Tm<18){
				apiTime.setHours(8);
			}else{
				apiTime=moment(apiTime).subtract(1,"day").toDate().setHours(20);
			}
			api+='<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
			for(var i=0;i<feautrueData.time.length;i++){


				api+='<option value="'+moment(apiTime).subtract(-feautrueData.time[i],"hour").toDate().format("yyyy-MM-dd HH:00")+'">'+moment(apiTime).subtract(-feautrueData.time[i],"hour").toDate().format("yyyy-MM-dd HH:00")+'</option>'
			}

			api+='</select></span></br>';
			api+='<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
			for(var i=feautrueData.time.length-1;i>=0;i--){
				api+='<option value="'+moment(apiTime).subtract(-feautrueData.time[i],"hour").toDate().format("yyyy-MM-dd HH:00")+'">'+moment(apiTime).subtract(-feautrueData.time[i],"hour").toDate().format("yyyy-MM-dd HH:00")+'</option>'

			}

			api+='</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

			for(var i=0;i<rangeData.length;i++){
				api+='<option value="'+rangeData[i].name+'">'+rangeData[i].name+'</option>'
			}
			api+='</select>'
			$(".apiImg").html(api);

			//点击div改变无实况的要素的起始时间
			var time=getDiv(feautrueData.time);
			for(var i=0;i<feautrueData.time.length;i++){
				if(time==feautrueData.time[i]){
					$("#option2").children("option").eq(i).attr("selected",true);
					$("#option3").children("option").eq(feautrueData.time.length-i-1).attr("selected",true);
				};
			}
		}else {

			if (Boolean(qel2) && !Boolean(qel3)) {
				//1消失实况   单个预报
				var index=getDivIndex();
				var temp;
				if(Tm<6){
					if(liveTm==23){
						temp=24;
					}else{
						temp=liveTm+24;
					}

				}else if(Tm>=6&&Tm<8){
					temp=liveTm+1;
				}else{
					temp=liveTm;
				}

				if(index<temp){
					//console.log("小于");
					pictureFlag=false;
					return;
				}else {
					//相当于走预报的路径
				if (Tm < 6) {
					if(liveTm!=Tm){
						if(liveTm==23){
							var div08Index =24;//表示当天08时的div的个数
						}else{
							var div08Index = liveTm + 24+1;//表示当天08时的div的个数
						}
					}else{
						var div08Index = liveTm + 24+1;//表示当天08时的div的个数
					}
					if (index < div08Index) {
							pictureFlag = false;
							return;
						} else {
							var apiTime = startTime;
							apiTime = moment(apiTime).subtract(1, "day").toDate().setHours(20);
							var api = '';
							api+='<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';

							for (var i =Math.floor((div08Index-21)/hel1)+ index - div08Index; i < feautrueData.time.length; i++) {

								api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
							}

							api += '</select></span></br>';
							api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
							for (var i = feautrueData.time.length - 1; i>=Math.floor((div08Index-21)/hel1)+ index - div08Index; i--) {
								api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

							}
							api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

							for (var i = 0; i < rangeData.length; i++) {
								api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
							}
							api += '</select>'
							$(".apiImg").html(api);
							$("#option3").children("option").last().attr("selected",true);

							pictureFlag = true;

						}
					} else if (Tm >= 6 && Tm < 18) {

						if (Tm == 6) {
							var div08Index = liveTm + (8-liveTm);//表示当天08时的div的个数
							if (index <= div08Index) {
								//console.log("小于");
								pictureFlag = false;
								return;
							} else {
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var apiTime = startTime;
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index - div08Index-1; i < feautrueData.time.length; i++) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= index - div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						} else if (Tm == 7) {
							var div08Index = liveTm + (8-liveTm);//表示当天08时的div的个数
							if (index <= div08Index) {
								pictureFlag = false;
								return;
							} else {
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index - div08Index-1 ; i < feautrueData.time.length; i++) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= index - div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						} else if(Tm==8){
							var div08Index = liveTm +(8-liveTm) ;//表示当天08时的div的个数
							if(index<=div08Index){
								//console.log("小于");
								pictureFlag = false;
								return;
							}else{
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i =(index-div08Index)+Math.floor((div08Index-9)/3); i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= (index-div08Index)+Math.floor((div08Index-9)/3); i--) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						} else {

							var div08Index = liveTm +1 ;//表示当天08时的div的个数
						if(index<div08Index){
							//console.log("小于");
								pictureFlag = false;
								return;
							}else{
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i =index-9; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= index-9; i--) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						}
					}else if (Tm >= 18) {
						var apiTime = startTime;
						apiTime = apiTime.setHours(20);

						var api = '';
						if(Tm==18){
							var div08Index = liveTm +(20-liveTm) ;//表示当天08时的div的个数
						if(index<=div08Index){
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-div08Index-1; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						}else if(Tm==19){
							var div08Index = liveTm +(20-liveTm) ;//表示当天08时的div的个数
						if(index<=div08Index){
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-div08Index-1; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						}else if(Tm==20){
							var div08Index = liveTm +(20-liveTm) ;//表示当天08时的div的个数
						if(index<=div08Index){
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-div08Index-1; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						} else{


							if(index<div08Index){
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-21; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-21; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}
											api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						}



					}

				}

			} else if (Boolean(qel3)) {


			} else {
				//内网  列如3小时预报和实况结合
				var index=getDivIndex();
				var temp;
				if(Tm<6){
					if(liveTm==23){
						temp=24;
					}else{
						temp=liveTm+24;
					}

				}else if(Tm>=6&&Tm<8){
					temp=liveTm+1;
				}else{
					temp=liveTm;
				}

				if(index<temp){
					pictureFlag=false;
					return;
				}else {
					//相当于走预报的路径
					if (Tm < 6) {
						if(liveTm!=Tm){
							if(liveTm==23){
								var div08Index =24;//表示当天08时的div的个数
							}else{
								var div08Index = liveTm + 24+1;//表示当天08时的div的个数
							}
						}else{
							var div08Index = liveTm + 24+1;//表示当天08时的div的个数
						}
						if (index < div08Index) {
							console.log("小于");
							pictureFlag = false;
							return;
						} else {
							var apiTime = startTime;
							apiTime = moment(apiTime).subtract(1, "day").toDate().setHours(20);
							var api = '';
							api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';

							for (var i =Math.floor((div08Index-21)/hel1)+ index - div08Index; i < feautrueData.time.length; i++) {

								api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
							}

							api += '</select></span></br>';
							api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
							for (var i = feautrueData.time.length - 1; i>=Math.floor((div08Index-21)/hel1)+ index - div08Index; i--) {
								api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

							}
								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

							for (var i = 0; i < rangeData.length; i++) {
								api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
							}
							api += '</select>'
							$(".apiImg").html(api);
							$("#option3").children("option").last().attr("selected",true);

							pictureFlag = true;

						}
					} else if (Tm >= 6 && Tm < 18) {

						if (Tm == 6) {
							var div08Index = liveTm + 2;//表示当天08时的div的个数
							if (index < div08Index) {
								console.log("小于");
								pictureFlag = false;
								return;
							} else {
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var apiTime = startTime;
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index - div08Index; i < feautrueData.time.length; i++) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= index - div08Index; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						} else if (Tm == 7) {
							var div08Index = liveTm + 2;//表示当天08时的div的个数
							if (index < div08Index) {
								console.log("小于");
								pictureFlag = false;
								return;
							} else {
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index - div08Index ; i < feautrueData.time.length; i++) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= index - div08Index; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						} else {
							var div08Index = liveTm +1 ;//表示当天08时的div的个数
							if(index<div08Index){
								console.log("小于");
								pictureFlag = false;
								return;
							}else{
								var apiTime = startTime;
								apiTime = apiTime.setHours(8);
								var api = '';
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i =(index-div08Index)+Math.floor((div08Index-9)/3); i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >= (index-div08Index)+Math.floor((div08Index-9)/3); i--) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						}
					}else if (Tm >= 18) {
						var apiTime = startTime;
						apiTime = apiTime.setHours(20);

						var api = '';
						if(Tm==18){
							var div08Index = liveTm +1 ;//表示当天08时的div的个数
							if(index<=div08Index){
								console.log("小于");
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">起始预报时间：<select name="option2" id="option2">';
								for (var i = index-div08Index-1; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index-1; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}

						}else if(Tm==19){
							var div08Index = liveTm +2 ;//表示当天08时的div的个数
							if(index<div08Index){
								console.log("小于");
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-div08Index; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
							}
						}else{
							if(liveTm!=Tm){
								if(liveTm==19){
									var div08Index = liveTm +2 ;//琛ㄧず褰撳ぉ08鏃剁殑div鐨勪釜鏁�
								}else{
									var div08Index = liveTm +1 ;//琛ㄧず褰撳ぉ08鏃剁殑div鐨勪釜鏁�
								}
							}else{
								if(liveTm==23){
									var div08Index = liveTm ;//琛ㄧず褰撳ぉ08鏃剁殑div鐨勪釜鏁�
								}else{
									var div08Index = liveTm +1 ;//琛ㄧず褰撳ぉ08鏃剁殑div鐨勪釜鏁�
								}

							}

							if(index<div08Index){
								console.log("灏忎簬");
								pictureFlag = false;
								return;
							}else{
								api += '<div class="popupApi" style="display:none;background:rgba(0,0,0,.5);padding:5px;position:absolute;margin:auto;left:0;right:0;top:0;bottom:0;width:240px;height:45px;z-index:4000"><div class="popup_innerApi" style="background:#fff;text-align:center;width:auto;padding:10px;font-size:12px;white-space:pre-line;color:#000;line-height:24px"></div></div><span style="margin: 5px;">预报起始时间：<select name="option2" id="option2">';
								for (var i = index-div08Index; i < feautrueData.time.length; i++) {

									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'
								}

								api += '</select></span></br>';
								api += '<span style="margin: 5px">预报结束时间：<select name="option3" id="option3">';
								for (var i = feautrueData.time.length - 1; i >=index-div08Index; i--) {
									api += '<option value="' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '">' + moment(apiTime).subtract(-feautrueData.time[i], "hour").toDate().format("yyyy-MM-dd HH:00") + '</option>'

								}

								api += '</select></span><button class="buttonApi"  style="width: 80px;line-height: 20px;position: absolute;top:65px;right:40px;background: none;border:1px solid #ccc;">动态出图</button><div class="close"><b></b></div></br><select style="position: absolute;top:65px;left:15px;" name="fwei" id="fwei">';

								for (var i = 0; i < rangeData.length; i++) {
									api += '<option value="' + rangeData[i].name + '">' + rangeData[i].name + '</option>'
								}
								api += '</select>'
								$(".apiImg").html(api);
								$("#option3").children("option").last().attr("selected",true);
								pictureFlag = true;
								console.log($(".bbb").eq(Tm).attr("name"))
							}
						}



					}

				}
			}
		}

		if(flag == 1){

			var mapView=map.getBounds();
			var srcLatLngBounds = L.latLngBounds(feautrueData.bounds);

			if(reRectangle!=null){
				map.removeLayer(reRectangle);
			}
			$("#fwei").children("option").eq(1).attr("selected",true);
			var name=$("#fwei").children("option").eq(1).val();
			for(var i=0;i<rangeData.length;i++){
				if(name==rangeData[i].name){
					reRectangle = new Re_Rectangle(L.latLngBounds(rangeData[i].bounds));
				}
			}
			reRectangle.addTo(map);


			map.fitBounds([
				[2.760, 64.259],
				[54.693, 140.631]
			]);
		}

		//点击出单图
		$(".apiImg button").eq(0).on("click",function(){
			var width;
			var height;

            var selectName;
            if(newLujing){
                if($("li.liSelect").text()=="全部"){
                    var i=$("li.liPage_liSelect").index();
                    selectName=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
                }else{
                    selectName=$("li.liSelect").text();
                }
            }else{
                selectName=$(".select").children("span").html();
            }
			var srcLatLngBounds = L.latLngBounds(getCheckedFeatureData(selectName).bounds);
			var mapView=map.getBounds();
			var preTime=$("#option2").children("option:selected").val();
			var preIndex=$("#option2").children("option:selected").index();
			var lastTime=$("#option3").children("option:selected").val();
			var lastIndex=$("#option3").children("option:selected").index();
			var len=$("#option2").children("option").length;
			if(preIndex<=len-1-lastIndex) {
				$(".popupApi").fadeIn(1000);
				$(this).attr("disabled",true);
				$(".popup_innerApi").text("正在动态出图,请稍后...");

				var destLatLngBounds = L.latLngBounds([[reRectangle.handle1.getLatLng().lat,reRectangle.handle1.getLatLng().lng],[reRectangle.handle3.getLatLng().lat,reRectangle.handle3.getLatLng().lng]]);
				var max = reRectangle.rectangle._pxBounds.max;
				var min = reRectangle.rectangle._pxBounds.min;
				width = max.x - min.x;
				height = max.y - min.y;

				//unders 和 aboves 要求返回的图片是按destLatLngBounds裁剪过的

				var unders=[
					new Promise(function (resolve,reject) {
						var img = new Image();
						img.onload=function () {
							var part = snip.part(img,mapView,destLatLngBounds);
							resolve(part);
						}
						var canvas = collage();
                        console.log(canvas)
						img.src=canvas.toDataURL("image/png");
					})
				];
				var renderer = basemap._renderer;

				var aboves=[
					snip.part(renderer._container,mapView,destLatLngBounds)
				];
				showGifImage(selectName,preTime,lastTime,srcLatLngBounds,destLatLngBounds,
                {width:width,height:height},//size要和destLatLngBounds的长宽比相同
                unders,aboves);

            }else{
                $(".popupApi").fadeIn(1000);
                $(".popup_innerApi").text("起始时间要小于结束时间");
                $(".popupApi").fadeOut(1000);
                return;
            }
        });
        //改变范围
        $("#fwei").change(function(){
            var name=$(this).val();
            if(name=="请选择"){
                $(".popupApi").fadeIn(1000);
                $(".popup_innerApi").text("请选择有效范围");
                $(".popupApi").fadeOut(1000);
                return;
            }else if(name=="全国"){
            	  map.fitBounds([
				            [2.760, 64.259],
				            [54.693, 140.631]
				        ]);
            }


			if(reRectangle!=null){
				map.removeLayer(reRectangle);
			}
			for(var i=0;i<rangeData.length;i++){
				if(name==rangeData[i].name){
					destlatLngBounds = L.latLngBounds(rangeData[i].bounds);
				}
			}
			reRectangle = new Re_Rectangle(L.latLngBounds(destlatLngBounds));
			reRectangle.addTo(map);

		});
		$(".apiBox .close").on("click",function(){
			$(".apiBox").hide();
			map.removeLayer(reRectangle);
			mapClickFlag=true;
			mapMouseFlag=true;
		});
	}

	$(".api").on("click",function(){
		if(Boolean(ifLayer)) {
			var index = getDivIndex();
			if (Boolean(qel2) && !Boolean(qel3)) {
				if (Tm < 6) {
					if (liveTm == 23) {
						if (index <= 23) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					} else {
						if (index <= liveTm + 24 ) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					}

				} else if (Tm >= 6 && Tm < 8) {

					if (index <= liveTm + Math.ceil((8 - liveTm) / hel1)) {
						pictureFlag = false;
					} else {
						pictureFlag = true;
					}
				} else if (Tm >= 8 && Tm < 18) {
                    if (index <= liveTm + 1) {
                        pictureFlag = false;
                    } else {
                        pictureFlag = true;
                    }

				} else if (Tm >= 18) {
					if (Tm == 18||Tm == 19) {
						if (index < liveTm + (20-liveTm)+1) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					}else {
						if (liveTm != Tm) {
							if (liveTm == 20) {
								if (index <= liveTm) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							}else if(liveTm==19){
								if (index <=liveTm + 1) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							} else {
								if (index <liveTm + 1) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							}
						}else {
							if (index <liveTm + 1) {
								pictureFlag = false;
							} else {
								pictureFlag = true;
							}
						}
					}
				}
			} else if (Boolean(qel3)) {


			} else {
				if (Tm < 6) {
					if (liveTm == 23) {
						if (index <= 23) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					} else {
						if (index <= liveTm + 24 ) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					}

				} else if (Tm >= 6 && Tm < 8) {

					if (index <= liveTm + Math.ceil((8 - liveTm) / hel1)) {
						pictureFlag = false;
					} else {
						pictureFlag = true;
					}
				} else if (Tm >= 8 && Tm < 18) {
                    if(liveTm == 7){
                        if (index <= liveTm + 1) {
                            pictureFlag = false;
                        } else {
                            pictureFlag = true;
                        }
                    }else{
                        if (index < liveTm + 1) {
                            pictureFlag = false;
                        } else {
                            pictureFlag = true;
                        }
                    }


				} else if (Tm >= 18) {
					if (Tm == 18 || Tm == 19) {
						if (index < liveTm + 2) {
							pictureFlag = false;
						} else {
							pictureFlag = true;
						}
					}else {
						if (liveTm != Tm) {
							if (liveTm == 20) {
								if (index <= liveTm) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							}else if(liveTm==19){
								if (index <=liveTm + 1) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							} else {
								if (index <liveTm + 1) {
									pictureFlag = false;
								} else {
									pictureFlag = true;
								}
							}
						}else {
							if (index <liveTm + 1) {
								pictureFlag = false;
							} else {
								pictureFlag = true;
							}
						}
					}
				}
			}

		}
		if(!pictureFlag){
			$(".apiBox").hide();
			return
		}

		$("#tipMarker").hide();
		$("#pickValueMarker").hide();
		$(".apiBox").show();

		mapClickFlag=false;
		mapMouseFlag=false;
		//yxMapClick=false;
        var selectName;
        if(newLujing){
            if($("li.liSelect").text()=="全部"){
                var i=$("li.liPage_liSelect").index();
                selectName=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
            }else{
                selectName=$("li.liSelect").text();
            }
        }else{
            selectName=$(".select").children("span").html();
        }
		initGif(getCheckedFeatureData(selectName),1);
		if(!yxMapClick){
			$(".selectElementBox .close").trigger("click");
		}

	});


	//下载图片
	function showGifImage(ele,startTime,endTime,srcLatLngBounds,destlatLngBounds,destSize,unders,aboves){
		snip.prepare(ele,startTime,endTime,srcLatLngBounds,destlatLngBounds,
			destSize,//size要和destLatLngBounds的长宽比相同
			unders,aboves)
			.then(snip.toSave);
	}

    // 电脑端显示图层数据
    function getUrl(nuTm, startTime, featureData){

        $("input[name='eleSelect']").eq(0).attr("checked",true);


        var fileName = getFileName(nuTm, startTime, featureData);
		gridEleFileName=fileName;
        var url = "";
        var bounds = featureData.bounds;

        if(featureData.liveVisible){

			var index = getDivIndex();
            if(Tm >= 6 && Tm < 18){
                if(index <= liveTm){
					url =  path + featureData.liveRelativePath + "/" + fileName;
					if(featureData.liveBounds){
						bounds = featureData.liveBounds;
					}
					tempMeta = new Meta(featureData.liveRelativePath,fileName.split(".")[0],fileName.split(".")[1]);
                }else{
					url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
                }
            }else if(Tm >= 18){
                if(index <= liveTm){
					url =  path + featureData.liveRelativePath + "/" + fileName;
					if(featureData.liveBounds){
						bounds = featureData.liveBounds;
					}
					tempMeta = new Meta(featureData.liveRelativePath,fileName.split(".")[0],fileName.split(".")[1]);

                }else{
					url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
                }
            }else if(Tm < 6){
                var tmpTm = liveTm;
                if(liveTm == 23){
                    tmpTm = -1;
                }

                if(index <= tmpTm+24){
					url =  path + featureData.liveRelativePath + "/" + fileName;
					if(featureData.liveBounds){
						bounds = featureData.liveBounds;
					}
					tempMeta = new Meta(featureData.liveRelativePath,fileName.split(".")[0],fileName.split(".")[1]);
                }else{
					url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
                }
            }

        }else{
			url =  path + featureData.relativepath + "/" + fileName;
			tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
        }
		url += ".2.png";

		//根据配置参数决定数据的获取方式
		//如果配置中streamLayerVisible的属性为true  走url路径
		// 若为图片webGlFlag属性为true  走webGloria渲染路径new Meta()/new BinLayer()
		if(currentTemperatureImageLayer===null&&currentRainImageLayer===null){

			if(featureData.webGlFlag == true){
				//取消风场流线
				if(currentStreamLayer != null){
					var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
					if(layer2 != null){
						map.removeLayer(layer2);
					}
					if(map.hasLayer(currentStreamLayer)){
						map.removeLayer(currentStreamLayer);
					}
					currentStreamLayer = null;
					currentLargeImageLayer=null;
				}


				if(glLayer == null){
					//显示调色板
					if(glColor == ""||glColor !=featureData.color){

						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);
						glColor=featureData.color;
					}
					if(featureData.color =="temperature"){
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);
					}else{
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
							return feature.properties.val>0;
						}}}).addTo(map);
					}
					var tmpGl = glLayer._layers.glLayer;
					tmpGl.on("updated",function(){
							if (currentLatLng != null && mapClickFlag && yxMapClick) {
								pickValueWebGl(currentLatLng);
							}
					}).on("nothing",function(){
						throwOutError();
					});
				}else{
					if(glColor !=featureData.color){
						//说明切换要素  所有的数据源都要改变  调色板  meta  marker 以及填充色等
						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);

						glColor=featureData.color;

						if(glLayer!=null){
							map.removeLayer(glLayer)
						}
						if(featureData.color =="temperature"){
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);
						}else{
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
								return feature.properties.val>0;
							}}}).addTo(map);
						}
						var tmpGl = glLayer._layers.glLayer;
						tmpGl.on("updated",function(){
								if (currentLatLng != null && mapClickFlag && yxMapClick) {
									pickValueWebGl(currentLatLng);
								}
						}).on("nothing",function(){
							throwOutError();
						});
					}else{
						//说明要素未发生改变  只需要改变meta的数据  不需要改变调色板  填充色  marker
						glLayer.setMeta(tempMeta);
					}

				}

			}else{
				glColor=featureData.color;
				$(".palette_control").width(400);
				if(glLayer!=null){
					map.removeLayer(glLayer)
				}
				if(currentLargeImageLayer == null){
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});

						if(currentLargeImageLayer){
							currentLargeImageLayer.addTo(map);
							currentLargeImageLayer.on('added', function (layer) {
								//console.log('layerAdded');
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();
							});
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer.options = options;
						currentLargeImageLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});
						currentLargeImageLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}
				}


				if(currentVectorTileLayer == null){
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentVectorTileLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentVectorTileLayer){
							currentVectorTileLayer.addTo(map);
							currentVectorTileLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}

						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentVectorTileLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentVectorTileLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}

				if(currentStreamLayer == null){
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentStreamLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentStreamLayer){
							currentStreamLayer.addTo(map);
							currentStreamLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}else{
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentStreamLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentStreamLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}

			}


		}





    }



	// 显示图层数据
	function getUrl1(startTime, currentTime, featureData){
        $("input[name='eleSelect']").eq(0).attr("checked",true);

		var fileName = getFileName1(startTime, currentTime, featureData);
		gridEleFileName=fileName;
		var url =  path + featureData.relativepath + "/" + fileName;
		tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
		fileUrl=path + featureData.relativepath + "/" + fileName+".1.png";
		if(isMobile()){
			url+=".1.png";
		}else{
			url+=".2.png";
		}
        var bounds = featureData.bounds;
        if(featureData.liveVisible){
            var index = getDivIndex();
            if(Tm >= 6 && Tm < 18){
                if(index <= liveTm){
                    if(featureData.liveBounds){
                        bounds = featureData.liveBounds;
                    }
                }
            }else if(Tm >= 18){
                if(index <= liveTm){
                    if(featureData.liveBounds){
                        bounds = featureData.liveBounds;
                    }
                }
            }else if(Tm < 6){
                var tmpTm = liveTm;
                if(liveTm == 23){
                    tmpTm = -1;
                }

                if(index <= tmpTm+24){
                    if(featureData.liveBounds){
                        bounds = featureData.liveBounds;
                    }
                }
            }

        }

		//非变温和累计降水
		if(currentTemperatureImageLayer===null&&currentRainImageLayer===null){

			if(featureData.webGlFlag == true){
				//取消风场流线
				if(currentStreamLayer != null){
					var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
					if(layer2 != null){
						map.removeLayer(layer2);
					}
					if(map.hasLayer(currentStreamLayer)){
						map.removeLayer(currentStreamLayer);
					}
					currentStreamLayer = null;
					currentLargeImageLayer=null;
				}


				if(glLayer == null){
					//显示调色板
					if(glColor == ""||glColor !=featureData.color){

						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);
						glColor=featureData.color;
					}
					if(featureData.color =="temperature"){
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);

					}else{
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
							return feature.properties.val>0;
						}}}).addTo(map);

					}
					var tmpGl = glLayer._layers.glLayer;
					tmpGl.on("updated",function(){
						if (currentLatLng != null && mapClickFlag && yxMapClick) {
							pickValueWebGl(currentLatLng);
						}
					}).on("nothing",function(){
						throwOutError();
					});
				}else{
					if(glColor !=featureData.color){
						//说明切换要素  所有的数据源都要改变  调色板  meta  marker 以及填充色等
						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);

						glColor=featureData.color;

						if(glLayer!=null){
							map.removeLayer(glLayer)
						}
						if(featureData.color =="temperature"){
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);

						}else{
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
								return feature.properties.val>0;
							}}}).addTo(map);

						}
						var tmpGl = glLayer._layers.glLayer;
						tmpGl.on("updated",function(){
							if (currentLatLng != null && mapClickFlag && yxMapClick) {
								pickValueWebGl(currentLatLng);
							}
						}).on("nothing",function(){
							throwOutError();
						});
					}else{
						//说明要素未发生改变  只需要改变meta的数据  不需要改变调色板  填充色  marker
						glLayer.setMeta(tempMeta);
					}



				}




			}else{
				glColor=featureData.color;
				$(".palette_control").width(280);
				if(glLayer!=null){
					map.removeLayer(glLayer)
				}
				if(currentLargeImageLayer == null){
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});

						if(currentLargeImageLayer){
							currentLargeImageLayer.addTo(map);
							currentLargeImageLayer.on('added', function (layer) {
								//console.log('layerAdded');
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();
							});
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer.options = options;
						currentLargeImageLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});
						currentLargeImageLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}
				}


				if(currentVectorTileLayer == null){
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentVectorTileLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentVectorTileLayer){
							currentVectorTileLayer.addTo(map);
							currentVectorTileLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentVectorTileLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentVectorTileLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}

				if(currentStreamLayer == null){
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentStreamLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentStreamLayer){
							currentStreamLayer.addTo(map);
							currentStreamLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}else{
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentStreamLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentStreamLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}


			}
		}



	}

	//有实况的数据所走的URL
	// 显示图层数据
	function getUrl2(startTime, featureData,startLeft,shikLeft,firstForeLeft,endForeLeft,index,b) {
        $("input[name='eleSelect']").eq(0).attr("checked",true);

		if(parseInt(index)<10){
			index="0"+parseInt(index);
		}else{
			index=""+parseInt(index);
		}
		var xxx="";
		var yyyyMMddHH="";
		if (Boolean(qel2) && !Boolean(qel3)) {
			if(-startLeft<shikLeft){
				if(Tm<6){
					if(-startLeft<=470){
						yyyyMMddHH = moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+index;
						var data = {"yyyyMMddHH": yyyyMMddHH};
						var fileName = npt.util.template(featureData.liveFileFormat, data);

					}else{
						yyyyMMddHH = startTime.format("yyyyMMdd")+index;
						var data = {"yyyyMMddHH": yyyyMMddHH};
						var fileName = npt.util.template(featureData.liveFileFormat, data);

					}
				}else{
					yyyyMMddHH = startTime.format("yyyyMMdd")+index;
					var data = {"yyyyMMddHH": yyyyMMddHH};
					var fileName = npt.util.template(featureData.liveFileFormat, data);
				}

				var url =  path + featureData.liveRelativePath + "/" + fileName;
				tempMeta = new Meta(featureData.liveRelativePath,fileName.split(".")[0],fileName.split(".")[1]);

			}else if(-startLeft==firstForeLeft){
				if(Tm<6){
					if(liveTm==23){
						var fileName = moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20.004";
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}else{
						var shixiao=(liveTm+4);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}
				}else if(Tm>=6&&Tm<18){

					if(liveTm<8){
						var shixiao=(liveTm+4);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


					}else{
						var shixiao=(liveTm+1-9);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


					}

				}else{
					if(liveTm<20){
						var shixiao=(liveTm+1-9);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"08."+xxx;

					}else{
						var shixiao=(liveTm+1-21);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"20."+xxx;

					}
					var url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


				}
			}else if(-startLeft>firstForeLeft&&-startLeft<=b){
				if(Tm<6){
					var urlTime=startTime;
					if(liveTm==23){
						var shixiao=Math.floor((-startLeft-firstForeLeft)/20)+Math.floor((0+4))-1;
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}else{
						var shixiao=Math.ceil((-startLeft-firstForeLeft)/20)+Math.floor((liveTm+4)/1);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


					}
				}else if(Tm>=6&&Tm<18){
					if(Tm==6||Tm==7){
						if(liveTm<8){
							if(Math.floor((-startLeft-firstForeLeft)/20)+liveTm+1<=8){
								var shixiao=Math.floor((-startLeft-firstForeLeft)/20)+liveTm+4;
								if(featureData.time[shixiao]<10){
									xxx="00"+featureData.time[shixiao]
								}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
									xxx="0"+featureData.time[shixiao]
								}else{
									xxx=featureData.time[shixiao];
								}
								var fileName =moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
								var url =  path + featureData.relativepath + "/" + fileName;
								tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


							}else{

								var shixiao=Math.floor((-startLeft-firstForeLeft)/20)-(8-liveTm);
								if(featureData.time[shixiao]<10){
									xxx="00"+featureData.time[shixiao]
								}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
									xxx="0"+featureData.time[shixiao]
								}else{
									xxx=featureData.time[shixiao];
								}
								var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
								var url =  path + featureData.relativepath + "/" + fileName;
								tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


							}
						}

					}else{
						var shixiao=Math.ceil((liveTm-8)/1)+Math.floor((-startLeft-firstForeLeft)/20);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


					}
				}else{
					if(Tm>=18&&Tm<20){
						if(Math.floor((-startLeft-firstForeLeft)/20)+(liveTm-8)<12){
							var shixiao=Math.floor((-startLeft-firstForeLeft)/20)+(liveTm-8);
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


						}else{
							var shixiao=Math.floor((-startLeft-firstForeLeft)/20)-(-liveTm+20);
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

						}
					}else{
						var shixiao=Math.ceil((liveTm-20)/1)+Math.floor((-startLeft-firstForeLeft)/20);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}


				}
			}else if(-startLeft>b&&-startLeft<=endForeLeft-30){
				if(Tm<6){
					var urlTime=startTime;
					if(liveTm==23){
						var shixiao=Math.ceil((-startLeft-b)/60)+23;
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}else{
						var shixiao=Math.ceil((-startLeft-b)/60)+23;
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


					}
				}else if(Tm>=6&&Tm<18){

					var shixiao=Math.ceil((-startLeft-b)/60)+23;
					if(featureData.time[shixiao]<10){
						xxx="00"+featureData.time[shixiao]
					}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
						xxx="0"+featureData.time[shixiao]
					}else{
						xxx=featureData.time[shixiao];
					}
					var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
					var url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);


				}else{
					var shixiao=Math.ceil((-startLeft-b)/60)+23;
					if(featureData.time[shixiao]<10){
						xxx="00"+featureData.time[shixiao]
					}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
						xxx="0"+featureData.time[shixiao]
					}else{
						xxx=featureData.time[shixiao];
					}
					var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
					var url =  path + featureData.relativepath + "/" + fileName;
					tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

				}
			}
		} else if (Boolean(qel3)) {


		} else {
			if(-startLeft<shikLeft){
				if(Tm<6){
					if(-startLeft<=470){
						yyyyMMddHH = moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+index;
						var data = {"yyyyMMddHH": yyyyMMddHH};
						var fileName = npt.util.template(featureData.liveFileFormat, data);

					}else{
						yyyyMMddHH = startTime.format("yyyyMMdd")+index;
						var data = {"yyyyMMddHH": yyyyMMddHH};
						var fileName = npt.util.template(featureData.liveFileFormat, data);

					}
				}else{
					yyyyMMddHH = startTime.format("yyyyMMdd")+index;
					var data = {"yyyyMMddHH": yyyyMMddHH};
					var fileName = npt.util.template(featureData.liveFileFormat, data);
				}
				var url =  path + featureData.liveRelativePath + "/" + fileName;
				tempMeta = new Meta(featureData.liveRelativePath,fileName.split(".")[0],fileName.split(".")[1]);
			}else if(-startLeft==firstForeLeft){
				if(Tm<6){

					if(liveTm==23){
						var fileName = moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20.006";
						var url =  path + featureData.relativepath + "/" + fileName;
					}else{
						var shixiao=Math.floor((liveTm+4)/3);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(startTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}
				}else if(Tm>=6&&Tm<18){
					if(Tm==6||Tm==7){
						var urlTime=startTime;
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20.012";
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}else if(Tm==8&&liveTm==7){
						var urlTime=startTime;
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20.012";
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}else{

						var shixiao=Math.floor((liveTm+1-9)/3);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
					}
				}else{
					if(Tm==18||Tm==19){
						var fileName =startTime.format("yyyyMMdd")+"08.012";
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
					}else{
						if(liveTm==19){
							var fileName =startTime.format("yyyyMMdd")+"08.012";
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
						}else{
							var shixiao=Math.floor((liveTm+1-21)/3);
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
						}


					}

				}
			}else if(-startLeft>firstForeLeft&&-startLeft<=endForeLeft){
				if(Tm<6){
					var urlTime=startTime;
					if(liveTm==23){
						var shixiao=Math.floor((-startLeft-firstForeLeft)/60)+Math.floor((0+4)/3);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
					}else{
						var shixiao=Math.ceil((-startLeft-firstForeLeft)/60)+Math.floor((liveTm+4)/3);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =moment(urlTime).subtract(1,"day").toDate().format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

					}
				}else if(Tm>=6&&Tm<18){
					if(Tm==6||Tm==7){
						if(liveTm==5){
							var shixiao=Math.floor((-startLeft-firstForeLeft)/60)-1;
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
						}else{
							var shixiao=Math.floor((-startLeft-firstForeLeft)/60);
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
						}

					}else{
						var shixiao=Math.ceil((liveTm-8)/3)+Math.floor((-startLeft-firstForeLeft)/60);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"08."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
					}
				}else{
					if(Tm==18||Tm==19){
						if(liveTm==17){
							var shixiao=Math.floor((-startLeft-firstForeLeft)/60)-1;
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

						}else{
							var shixiao=Math.floor((-startLeft-firstForeLeft)/60);
							if(featureData.time[shixiao]<10){
								xxx="00"+featureData.time[shixiao]
							}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
								xxx="0"+featureData.time[shixiao]
							}else{
								xxx=featureData.time[shixiao];
							}
							var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
							var url =  path + featureData.relativepath + "/" + fileName;
							tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);

						}
					}else{
						var shixiao=Math.ceil((liveTm-20)/3)+Math.floor((-startLeft-firstForeLeft)/60);
						if(featureData.time[shixiao]<10){
							xxx="00"+featureData.time[shixiao]
						}else if(featureData.time[shixiao]<100&&featureData.time[shixiao]>=10){
							xxx="0"+featureData.time[shixiao]
						}else{
							xxx=featureData.time[shixiao];
						}
						var fileName =startTime.format("yyyyMMdd")+"20."+xxx;
						var url =  path + featureData.relativepath + "/" + fileName;
						tempMeta = new Meta(featureData.relativepath,fileName.split(".")[0],fileName.split(".")[1]);
					}


				}
			}
		}
		fileUrl=url+".1.png";
		gridEleFileName=fileName;
		if(isMobile()){
			//手机端
			url+=".1.png";
		}else{
			url+=".2.png";
		}

//非变温和累计降水
		if(currentTemperatureImageLayer===null&&currentRainImageLayer===null){

			if(featureData.webGlFlag == true){
				//取消风场流线
				if(currentStreamLayer != null){
					var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
					if(layer2 != null){
						map.removeLayer(layer2);
					}
					if(map.hasLayer(currentStreamLayer)){
						map.removeLayer(currentStreamLayer);
					}
					currentStreamLayer = null;
					currentLargeImageLayer=null;
				}


				if(glLayer == null){
					//显示调色板
					if(glColor == ""||glColor !=featureData.color){

						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);
						glColor=featureData.color;
					}
					if(featureData.color =="temperature"){
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);
						var tmpGl = glLayer._layers.glLayer;
						tmpGl.on("updated",function(){
							if (currentLatLng != null && mapClickFlag && yxMapClick) {
								pickValueWebGl(currentLatLng);
							}
						}).on("nothing",function(){
							throwOutError();
						});
					}else{
						glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
							return feature.properties.val>0;
						}}}).addTo(map);
						var tmpGl = glLayer._layers.glLayer;
						tmpGl.on("updated",function(){
							if (currentLatLng != null && mapClickFlag && yxMapClick) {
								pickValueWebGl(currentLatLng);
							}
						}).on("nothing",function(){
							$(".popup").fadeIn(1000);
							$(".popup_inner").text("无数据");
							$(".popup").fadeOut(1000);
						});
					}
				}else{
					if(glColor !=featureData.color){
						//说明切换要素  所有的数据源都要改变  调色板  meta  marker 以及填充色等
						setPaletteCanvas1gifColorPa(glLayerPalettes[featureData.color]);

						glColor=featureData.color;

						if(glLayer!=null){
							map.removeLayer(glLayer)
						}
						if(featureData.color =="temperature"){
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);
							var tmpGl = glLayer._layers.glLayer;
							tmpGl.on("updated",function(){
								if (currentLatLng != null && mapClickFlag && yxMapClick) {
									pickValueWebGl(currentLatLng);
								}
							}).on("nothing",function(){
								throwOutError();
							});
						}else{
							glLayer = new BinLayer({color:featureData.color,meta:tempMeta,ratio:2,attribution:tempMeta,marker:{visible:function (feature) {
								return feature.properties.val>0;
							}}}).addTo(map);
							var tmpGl = glLayer._layers.glLayer;
							tmpGl.on("updated",function(){
								if (currentLatLng != null && mapClickFlag && yxMapClick) {
									pickValueWebGl(currentLatLng);
								}
							}).on("nothing",function(){
								throwOutError();
							});
						}
					}else{
						//说明要素未发生改变  只需要改变meta的数据  不需要改变调色板  填充色  marker
						glLayer.setMeta(tempMeta);
					}



				}




			}else{
				glColor=featureData.color;
				$(".palette_control").width(280);
				if(glLayer!=null){
					map.removeLayer(glLayer)
				}

				if(currentLargeImageLayer == null){
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});

						if(currentLargeImageLayer){
							currentLargeImageLayer.addTo(map);
							currentLargeImageLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();
							});
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.imageLayerVisible == true){
						var errorTileUrl="images/empty.png";
						var mapOptions = {title: "", opacity:0.5, fadeAnimation: false, bounds:bounds, assignZoom:[1,1,2,3,4,5,6,6,6,6,6,6,6,6], errorTileUrl:errorTileUrl};
						var options = {url: url, styleKey: featureData.style, nodeInfo: {}, layerType: "LargeImage", interactive: false, inLayerManager: true, mapOptions: mapOptions};
						currentLargeImageLayer.options = options;
						currentLargeImageLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": url, "styleKey": "", "visible":true, "layerType":"overlayImage"}
							],"styleFile":featureData.style,"bounds":bounds,"opacity":0.5,"palette":featureData.palettes}});
						currentLargeImageLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}
				}


				if(currentVectorTileLayer == null){
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentVectorTileLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentVectorTileLayer){
							currentVectorTileLayer.addTo(map);
							currentVectorTileLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}else{
					if(featureData.vectorLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentVectorTileLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentVectorTileLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.streamLayerVisible == false){
						if(currentStreamLayer != null){
							var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
							if(layer2 != null){
								map.removeLayer(layer2);
							}
							if(map.hasLayer(currentStreamLayer)){
								map.removeLayer(currentStreamLayer);
							}
							currentStreamLayer = null;
						}
					}

				}

				if(currentStreamLayer == null){
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}

						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						var options = {layerType:"VectorTile",styleKey:featureData.style,url:[vectorUrl,""]};
						currentStreamLayer = new shell.meteoNGLayer({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						if(currentStreamLayer){
							currentStreamLayer.addTo(map);
							currentStreamLayer.on('added', function (layer) {
								var drawStyle = layer.drawStyle;
								if (drawStyle && drawStyle.paletteEntries) {
									shell.application.paletteBar.updatePalette(layer);
								}
								shell.application.paletteBar.show();

							});
						}
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}else{
					if(featureData.streamLayerVisible == true){
						var vectorUrl = "";
						if(featureData.liveVisible){
							var index = getDivIndex();
							if(Tm >= 6 && Tm < 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm >= 18){
								if(index <= liveTm){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}else if(Tm < 6){
								var tmpTm = liveTm;
								if(liveTm == 23){
									tmpTm = -1;
								}

								if(index <= tmpTm+24){
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.liveRelativePath+"&format="+featureData.liveFileFormat+"&viewBounds=";
								}else{
									vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
								}
							}
						}else{
							vectorUrl = handlerPath + "/MeteoHandler?method=getmeteodatablock&type=micaps&fileName="+fileName+"&relativePath="+featureData.relativepath+"&format="+featureData.fileFormat+"&viewBounds=";
						}

						currentStreamLayer.updateLayeConfig({"layerConfig":{"layerGroup":
							[
								{"url": vectorUrl, "styleKey": "point", "visible":true, "layerType":"tileVector"}
							],"styleFile":featureData.style,"palette":featureData.palettes}});

						currentStreamLayer.on('added', function (layer) {
							var drawStyle = layer.drawStyle;
							if (drawStyle && drawStyle.paletteEntries) {
								shell.application.paletteBar.updatePalette(layer);
							}
							shell.application.paletteBar.show();

						});
					}

					if(featureData.imageLayerVisible == false){
						if(currentLargeImageLayer != null){
							var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
							if(layer != null){
								map.removeLayer(layer);
							}
							if(map.hasLayer(currentLargeImageLayer)){
								map.removeLayer(currentLargeImageLayer);
							}
							currentLargeImageLayer = null;
						}
					}

					if(featureData.vectorLayerVisible == false){
						if(currentVectorTileLayer != null){
							var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
							if(layer1 != null){
								map.removeLayer(layer1);
							}
							if(map.hasLayer(currentVectorTileLayer)){
								map.removeLayer(currentVectorTileLayer);
							}
							currentVectorTileLayer = null;
						}
					}

				}


			}
		}


	}
function throwOutError(){
	var message = "";
	var obj;
	var type = $("input[name='eleSelect']:checked").val();
	if(newLujing){
		if($("li.liSelect").text()=="全部"){
			var i=$("li.liPage_liSelect").index();
			obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
		}else{
			obj=$("li.liSelect").text();
		}
	}else{
		obj=$(".select").children("span").html();
	}
	if(type!="temperature"&&type!="rain6"){
		var featureData = getCheckedFeatureData(obj);
	}else{
		var intelligent=shell.application.gridEdit;
		if(type=="temperature"){
			var featureData = intelligent.getFeature("日变温");
		}else{
			var featureData=intelligent.getFeature("累计降水");
		}
	}
	if(featureData.liveVisible){
		var index = getDivIndex();
		if(Tm >= 6 && Tm < 18){
			if(index <= liveTm){
				message+= startTime.format("yyyy-MM-dd") + " 没有此时刻实况数据!";

			}else{
				message+= startTime.format("yyyy-MM-dd") + " 08时没有此时刻发布数据!";
			}
		}else if(Tm >= 18){
			if(index <= liveTm){
				message+= startTime.format("yyyy-MM-dd") + " 没有此时刻实况数据!";
			}else{
				message+= startTime.format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
			}
		}else if(Tm < 6){
			var tmpTm = liveTm;
			if(liveTm == 23){
				tmpTm = -1;
			}

			if(index <= tmpTm+24){
				message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 没有此时刻实况数据!";
			}else{
				message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
			}
		}
	}else{
		if(type!="temperature"&&type!="rain6"){
			if(Tm >= 6 && Tm <18){
				message+= startTime.format("yyyy-MM-dd") + " 08时没有此时刻发布数据!";
			}else if(Tm >= 18){
				message+= startTime.format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
			}else if(Tm < 6){
				message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
			}
		}else{
			if(type=="temperature"){
				message+="日变温在"+$(".uiMain").html()+"未发布数据";
			}else{
				message+="" +
					"累计降水在"+$(".uiMain1").html()+"未发布数据";
			}
		}



	}

	$(".popup").fadeIn(1000);
	$(".popup_inner").text(message);
	$(".popup").fadeOut(1000);
}
	//提示错误信息
    map.on('message', function(layer) {
        //$.messager.alert("提示","没有数据","info");
        var message = "";
        var obj;
        var type = $("input[name='eleSelect']:checked").val();
        if(newLujing){
            if($("li.liSelect").text()=="全部"){
                var i=$("li.liPage_liSelect").index();
                obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
            }else{
                obj=$("li.liSelect").text();
            }
        }else{
            obj=$(".select").children("span").html();
        }
        if(type!="temperature"&&type!="rain6"){
            var featureData = getCheckedFeatureData(obj);
        }else{
            var intelligent=shell.application.gridEdit;
            if(type=="temperature"){
                var featureData = intelligent.getFeature("日变温");
            }else{
                var featureData=intelligent.getFeature("累计降水");
            }
        }
        if(featureData.liveVisible){
        		var index = getDivIndex();
        		if(Tm >= 6 && Tm < 18){
        			  if(index <= liveTm){
		        				message+= startTime.format("yyyy-MM-dd") + " 没有此时刻实况数据!";

		        		}else{
		        				message+= startTime.format("yyyy-MM-dd") + " 08时没有此时刻发布数据!";
		        		}
        		}else if(Tm >= 18){
        			  if(index <= liveTm){
		        				message+= startTime.format("yyyy-MM-dd") + " 没有此时刻实况数据!";
		        		}else{
		        				message+= startTime.format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";	
		        		}
        		}else if(Tm < 6){
        			  var tmpTm = liveTm;
        			  if(liveTm == 23){
        			  	 tmpTm = -1;
        			  }
				        
        				if(index <= tmpTm+24){
        					  message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 没有此时刻实况数据!";
		        		}else{
		        				message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";	
		        		}
        		}
        }else{
            if(type!="temperature"&&type!="rain6"){
                if(Tm >= 6 && Tm <18){
                    message+= startTime.format("yyyy-MM-dd") + " 08时没有此时刻发布数据!";
                }else if(Tm >= 18){
                    message+= startTime.format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
                }else if(Tm < 6){
                    message+= moment(startTime).subtract(1,"day").toDate().format("yyyy-MM-dd") + " 20时没有此时刻发布数据!";
                }
            }else{
                if(type=="temperature"){
                    message+="日变温在"+$(".uiMain").html()+"未发布数据";
                }else{
                    message+="" +
                        "累计降水在"+$(".uiMain1").html()+"未发布数据";
                }
            }



        }

		$(".popup").fadeIn(1000);
		$(".popup_inner").text(message);

		if(currentLargeImageLayer != null){
	        var layer = currentLargeImageLayer.layerConfig.layerGroup[0].layer;
	        if(layer != null){
	            map.removeLayer(layer);
	        }
	        if(map.hasLayer(currentLargeImageLayer)){
				map.removeLayer(currentLargeImageLayer);
			}
	        currentLargeImageLayer = null;
	    }
		
		if(currentVectorTileLayer != null){
				var layer1 = currentVectorTileLayer.layerConfig.layerGroup[0].layer;
				if(layer1 != null){
					map.removeLayer(layer1);
				}
				if(map.hasLayer(currentVectorTileLayer)){
					map.removeLayer(currentVectorTileLayer);
				}
				currentVectorTileLayer = null;
		}

		if(currentStreamLayer != null){
				var layer2 = currentStreamLayer.layerConfig.layerGroup[0].layer;
				if(layer2 != null){
					map.removeLayer(layer2);
				}
				if(map.hasLayer(currentStreamLayer)){
					map.removeLayer(currentStreamLayer);
				}
				currentStreamLayer = null;
		}


	});

	//传入调色板数据 绘制调色板
	function setPaletteCanvas1gifColorPa(gifColorPa,ctx,canvas){
		var canvas = document.createElement('canvas');
		canvas.id="palette_canvas";
		var ctx = canvas.getContext("2d");
		var newArr = [];
		for(var j=0;j<gifColorPa[0].length;j++){
			if(gifColorPa[0][j][2]){
				newArr.push(gifColorPa[0][j])
			}

		}
		canvas.width=newArr.length*gifColorPa[1];
		for(var i=0;i<newArr.length;i++){
//			x,y-左上角点的坐标；width、height-宽高；radius-圆角；color-绘制颜色；type-绘制类型（'fill'和'stroke'）。
			draw(i*gifColorPa[1]+5, 5, gifColorPa[1], 15, 0, 'rgb('+newArr[i][1][0]+","+ newArr[i][1][1]+","+newArr[i][1][2]+')',newArr[i][0],'fill',ctx,canvas);


		}

		$(".palette_control").width(newArr.length*gifColorPa[1]+10).html(canvas).show();
	}
	//绘制矩形调色板
	function draw(x, y, width, height, radius, color,text, type,ctx,canvas){
		ctx.beginPath();
		ctx.moveTo(x, y+radius);
		ctx.lineTo(x, y+height-radius);
		ctx.quadraticCurveTo(x, y+height, x+radius, y+height);
		ctx.lineTo(x+width-radius, y+height);
		ctx.quadraticCurveTo(x+width, y+height, x+width, y+height-radius);
		ctx.lineTo(x+width, y+radius);
		ctx.quadraticCurveTo(x+width, y, x+width-radius, y);
		ctx.lineTo(x+radius, y);
		ctx.quadraticCurveTo(x, y, x, y+radius);
		ctx[type + 'Style'] = color || params.color;
		ctx.closePath();
		ctx[type]();
		ctx.fillStyle="#000";
		ctx.font="12px"
		ctx.fillText(text,x,32);
	}
	//绘制文字
	function drawFont(x,text,color,ctx){
		ctx.beginPath();
		ctx.fillText(text,x,32);
		ctx.fillStyle = color || params.color;
		ctx.closePath();
		ctx.fill();
	}

	function pickValue(latlng){
		mouseFlag=false;
		var obj;

		if(newLujing){
			if($("li.liSelect").text()=="全部"){
				var i=$("li.liPage_liSelect").index();
				obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
			}else{
				obj=$("li.liSelect").text();
			}
		}else{
			obj=$(".select").children("span").html();
		}
		var featureData = getCheckedFeatureData(obj);


		var labelName=featureData.name;
		var latlngBounds = L.latLngBounds(featureData.bounds);
		if(featureData.liveVisible){
			var index = getDivIndex();
			if(Tm >= 6 && Tm < 18){
				if(index <= liveTm){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}else if(Tm >= 18){
				if(index <= liveTm){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}else if(Tm < 6){
				var tmpTm = liveTm;
				if(liveTm == 23){
					tmpTm = -1;
				}

				if(index <= tmpTm+24){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}
		}

		if(latlngBounds.contains(latlng)){
			currentLatLng = latlng;

			var image = new Image();
			image.crossOrigin = '*';

			var unit = featureData.unit;
			var contourUrl = "";
			if(featureData.liveVisible){
				var index = getDivIndex();
				if(Tm >= 6 && Tm < 18){
					if(index <= liveTm){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}else if(Tm >= 18){
					if(index <= liveTm){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}else if(Tm < 6){
					var tmpTm = liveTm;
					if(liveTm == 23){
						tmpTm = -1;
					}

					if(index <= tmpTm+24){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}

			}else{

				contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";


			}

			image.src = contourUrl;
			if(featureData.webGlFlag == true){
					
			}else{
				image.onload = function() {
					var canvas = document.createElement('canvas');
					var width = this.width;
					var height = this.height;
					canvas.width = width;
					canvas.height = height;
					var ctx = canvas.getContext('2d');

					ctx.drawImage(this,0,0,width,height);

					var x = Math.round((latlng.lng - latlngBounds.getWest())/featureData.lonGap);
					var y = Math.round((latlngBounds.getNorth() - latlng.lat)/featureData.latGap);
					var imageData = ctx.getImageData(x,y,1,1);
					var len = imageData.data.length;

					if(len == 4){ // 每四个元素为一个像素数据 r,g,b,alpha
						var rgba = imageData.data[0] + ',' + imageData.data[1] + ',' + imageData.data[2] + ',' + imageData.data[3];
						var palettesUrl =styleRoot+ 'palettes/'+featureData.palettes+'.xml?v=1.0.8';
						if(Boolean(newMap.get(featureData.palettes))){
							var cache = newMap.get(featureData.palettes);
							var flag = false;
							var value = null;
							$(cache).find('entry').each(function(index, ele) {
								value = parseFloat($(ele).attr('value'));
								var color = $(ele).attr('rgba');
								if(color === rgba){

									flag = true;
									return false
								}
							});

							if(!flag){
								value = null;
							}

							var label = "";
							if(value == null){
								label = "无";
							}else{
								label = value + " " + unit;
							}
							if(toolClick=="intelligentGridPrediction"){
								var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span><span  class=\"picValueClick\">该地点的预报<span class=\"bgImage\"><p></p></span></span></div></div>"});
							}else{
								var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span></div></div>"});
							}

							if(!pickValueMarkerFlag){
								pickValueMarker = L.marker(latlng, {icon: pickValueIcon}).addTo(map);
								pickValueMarkerFlag = true;
							}else{
								pickValueMarker.setIcon(pickValueIcon);
								pickValueMarker.setLatLng(latlng);
							}
							$("#pickValueMarker").show();
							$("#pickValueMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});

						}else{
							var req = new XMLHttpRequest();
							req.open('GET', palettesUrl);
							req.onload = function() {
								if (req.status == 200) {
									var data = req.responseText;
									newMap.set(featureData.palettes,data);
									var flag = false;
									var value = null;
									$(data).find('entry').each(function(index, ele) {
										value = parseFloat($(ele).attr('value'));
										var color = $(ele).attr('rgba');
										if(color === rgba){

											flag = true;
											return false
										}
									});

									if(!flag){
										value = null;

									}

									var label = "";
									if(value == null){
										label = "无";
									}else{
										label = value + " " + unit;
									}
									if(toolClick=="intelligentGridPrediction"){
										var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span><span  class=\"picValueClick\">该地点的预报<span class=\"bgImage\"><p></p></span></span></div></div>"});
									}else{
										var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span></div></div>"});
									}

									if(!pickValueMarkerFlag){
										pickValueMarker = L.marker(latlng, {icon: pickValueIcon}).addTo(map);
										pickValueMarkerFlag = true;
									}else{
										pickValueMarker.setIcon(pickValueIcon);
										pickValueMarker.setLatLng(latlng);
									}
									$("#pickValueMarker").show();
									$("#pickValueMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});

								} else {
									console.log('getStyle file error!');
									return;
								}
							};
							req.send();
						}
					}
				}

			}

		}else{

		}

	}
	
	function pickValueWebGl(latlng){
		mouseFlag=false;
		var obj;

		if(newLujing){
			if($("li.liSelect").text()=="全部"){
				var i=$("li.liPage_liSelect").index();
				obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
			}else{
				obj=$("li.liSelect").text();
			}
		}else{
			obj=$(".select").children("span").html();
		}
		var featureData = getCheckedFeatureData(obj);


		var labelName=featureData.name;
		var latlngBounds = L.latLngBounds(featureData.bounds);
		if(featureData.liveVisible){
			var index = getDivIndex();
			if(Tm >= 6 && Tm < 18){
				if(index <= liveTm){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}else if(Tm >= 18){
				if(index <= liveTm){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}else if(Tm < 6){
				var tmpTm = liveTm;
				if(liveTm == 23){
					tmpTm = -1;
				}

				if(index <= tmpTm+24){
					latlngBounds = L.latLngBounds(featureData.liveBounds);
				}
			}
		}

		if(latlngBounds.contains(latlng)){
			currentLatLng = latlng;

			var image = new Image();
			image.crossOrigin = '*';

			var unit = featureData.unit;
			var contourUrl = "";
			if(featureData.liveVisible){
				var index = getDivIndex();
				if(Tm >= 6 && Tm < 18){
					if(index <= liveTm){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}else if(Tm >= 18){
					if(index <= liveTm){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}else if(Tm < 6){
					var tmpTm = liveTm;
					if(liveTm == 23){
						tmpTm = -1;
					}

					if(index <= tmpTm+24){
						contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}
				}

			}else{

				contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";


			}

			image.src = contourUrl;
			if(featureData.webGlFlag == true){

				var value= glLayer.getVal(latlng);
				var label = "";
				if(value == null ||value == 0){
					label = "无";
				}else{
					label = value.toFixed(1) + " " + unit;
				}
				if(toolClick=="intelligentGridPrediction"){
					var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span><span  class=\"picValueClick\">该地点的预报<span class=\"bgImage\"><p></p></span></span></div></div>"});
				}else{
					var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span></div></div>"});
				}

				if(!pickValueMarkerFlag){
					pickValueMarker = L.marker(latlng, {icon: pickValueIcon}).addTo(map);
					pickValueMarkerFlag = true;
				}else{
					pickValueMarker.setIcon(pickValueIcon);
					pickValueMarker.setLatLng(latlng);
				}
				$("#pickValueMarker").show();
				$("#pickValueMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});
			}

		}else{

		}
		$(".picValueClick").trigger("mouseout")

	}

	function pickValue1(latlng){
		var obj;
		if(newLujing){
			if($("li.liSelect").text()=="全部"){
				var i=$("li.liPage_liSelect").index();
				obj=obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
			}else{
				obj=$("li.liSelect").text();
			}
		}else{
			obj=$(".select").children("span").html();
		}

		var featureData = getCheckedFeatureData(obj);

		var labelName=featureData.name;
		var latlngBounds = L.latLngBounds(featureData.bounds);

		//全部实况的结束时的left
		var shikLeft;
		var startLeft=parseInt($("#parst").css("left"));
		if(featureData.liveVisible){

			if(Tm >= 6 && Tm < 18){
				shikLeft=(liveTm+1)*20;
				if(-startLeft<shikLeft){
					if(featureData.liveBounds){
						latlngBounds = L.latLngBounds(featureData.liveBounds);
					}
				}
			}else if(Tm >= 18){
				shikLeft=(liveTm+1)*20;
				if(-startLeft<shikLeft){
					if(featureData.liveBounds){
						latlngBounds = L.latLngBounds(featureData.liveBounds);
					}
				}
			}else if(Tm < 6){
				var tmpTm=liveTm;
				if(liveTm == 23){
					tmpTm=-1
				}
				shikLeft=(24+tmpTm+1)*20;
				if(-startLeft<shikLeft){
					if(featureData.liveBounds){
						latlngBounds = L.latLngBounds(featureData.liveBounds);
					}
				}
			}

		}

		if(latlngBounds.contains(latlng)){
			currentLatLng = latlng;

			var image = new Image();
			image.crossOrigin = '*';

			var unit = featureData.unit;
			var contourUrl = "";
			//fileurl 当前现实的图片路径
			contourUrl=fileUrl;


			image.src = contourUrl;
			image.onload = function() {
				var canvas = document.createElement('canvas');
				var width = this.width;
				var height = this.height;
				canvas.width = width;
				canvas.height = height;
				var ctx = canvas.getContext('2d');

				ctx.drawImage(this,0,0,width,height);

				var x = Math.round((latlng.lng - latlngBounds.getWest())/featureData.lonGap);
				var y = Math.round((latlngBounds.getNorth() - latlng.lat)/featureData.latGap);
				var imageData = ctx.getImageData(x,y,1,1);
				var len = imageData.data.length;

				if(len == 4){ // 每四个元素为一个像素数据 r,g,b,alpha
					var rgba = imageData.data[0] + ',' + imageData.data[1] + ',' + imageData.data[2] + ',' + imageData.data[3];

					var palettesUrl =styleRoot+ 'palettes/'+featureData.palettes+'.xml?v=1.0.8';
					if(Boolean(newMap.get(featureData.palettes))){
						var cache = newMap.get(featureData.palettes);
						var flag = false;
						var value = null;
						$(cache).find('entry').each(function(index, ele) {
							value = parseFloat($(ele).attr('value'));
							var color = $(ele).attr('rgba');
							if(color === rgba){
								flag = true;
								return false
							}
						});

						if(!flag){
							value = null;
						}

						var label = "";
						if(value == null){
							label = "无";
						}else{
							label = value + " " + unit;
						}
						var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span><span  class=\"picValueClick\">该地点的预报<span class=\"bgImage\"><p></p></span></span></div></div>"});

						if(!pickValueMarkerFlag){
							pickValueMarker = L.marker(latlng, {icon: pickValueIcon}).addTo(map);
							pickValueMarkerFlag = true;
						}else{
							pickValueMarker.setIcon(pickValueIcon);
							pickValueMarker.setLatLng(latlng);
						}
						$("#pickValueMarker").show();
						$("#pickValueMarker").parent().css({"width":0,"height":0,"border":0,"background":"rgba(0,0,0,0)"});

					}else{
						var req = new XMLHttpRequest();
						req.open('GET', palettesUrl);
						req.onload = function() {
							if (req.status == 200) {
								var data = req.responseText;
								newMap.set(featureData.palettes,data);
								var flag = false;
								var value = null;
								newMap.set(featureData.palettes,data);
								$(data).find('entry').each(function(index, ele) {
									value = parseFloat($(ele).attr('value'));
									var color = $(ele).attr('rgba');
									if(color === rgba){

										flag = true;
										return false
									}
								});

								if(!flag){
									value = null;
								}

								var label = "";
								if(value == null){
									label = "";
								}else{
									label = value + " " + unit;
								}

								var pickValueIcon = L.divIcon({html:"<div id='pickValueMarker'><span class=\"point\"></span><div class=\"pickValue_popup\" style=\"color:#fff\"><span class=\"line\"></span><span>"+labelName+"</span><span>"+label+"</span><span class=\"pickValueClose\"><p></p></span><span  class=\"picValueClick\">该地点的预报<span class=\"bgImage\"><p></p></span></span></div></div>"});


								if(!pickValueMarkerFlag){
									pickValueMarker = L.marker(latlng, {icon: pickValueIcon}).addTo(map);
									pickValueMarkerFlag = true;
								}else{
									pickValueMarker.setIcon(pickValueIcon);
									pickValueMarker.setLatLng(latlng);
								}
								$("#pickValueMarker").show();

								$("#pickValueMarker").parent().css({"width":0,"height":0,"border":0,"background":"rgba(0,0,0,0)"});

							} else {
								console.log('getStyle file error!');
								return;
							}
						};
						req.send();
					}
				}
			}

		}else{
		}

	}


	var tipMarker = null;
	var tipMarkerFlag = false;
	function mouseMoveValue(latlng){
        var obj;
        var type = $("input[name='eleSelect']:checked").val();
        if(type==undefined){
            type="element";
        }
        if(newLujing){
            if($("li.liSelect").text()=="全部"){
                var i=$("li.liPage_liSelect").index();
                obj=$(".list_title").eq(i).parents(".change").siblings().children("span").text();
            }else{
                obj=$("li.liSelect").text();
            }
        }else{
            obj=$(".select").children("span").html();
        }
        if(type=="element"){
            var featureData = getCheckedFeatureData(obj);
        }else{
            var intelligent=shell.application.gridEdit;
            if(type=="temperature"){
                var featureData = intelligent.getFeature("日变温");
            }else{
                var featureData=intelligent.getFeature("累计降水");
            }
        }

		var latlngBounds = L.latLngBounds(featureData.bounds);
        if(featureData.liveVisible){
            var index = getDivIndex();
            if(Tm >= 6 && Tm < 18){
                if(index <= liveTm){
                    latlngBounds = L.latLngBounds(featureData.liveBounds);
                }
            }else if(Tm >= 18){
                if(index <= liveTm){
                    latlngBounds = L.latLngBounds(featureData.liveBounds);
                }
            }else if(Tm < 6){
                var tmpTm = liveTm;
                if(liveTm == 23){
                    tmpTm = -1;
                }

                if(index <= tmpTm+24){
                    latlngBounds = L.latLngBounds(featureData.liveBounds);
                }
            }
        }

		if(latlngBounds.contains(latlng)){
			var image = new Image();
			image.crossOrigin = '*';

			var unit = featureData.unit;
            var contourUrl = "";
			if(featureData.webGlFlag == true){
				var value = glLayer.getVal(latlng);
				if(value == null){
					label = value;
					var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
					if(!tipMarkerFlag ){
						tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
						tipMarkerFlag = true;
					}else{
						tipMarker.setIcon(tipIcon);
						tipMarker.setLatLng(latlng);
					}
					$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});

					$("#tipMarker").hide();
				}else{
					label = value.toFixed(1) + " " + unit;
					var mobile = isMobile();
					if(!mobile){
						var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
						if(!tipMarkerFlag ){
							tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
							tipMarkerFlag = true;
						}else{
							tipMarker.setIcon(tipIcon);
							tipMarker.setLatLng(latlng);
						}
						if(mouseFlag){
							$("#tipMarker").show();
						}else{
							$("#tipMarker").hide();
						}

if(value.toFixed(1)=="0.0"){
	$("#tipMarker").hide();
}
						$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});
					}
				}
				$("#tipMarker").parents(".leaflet-div-icon").css({"left":'-32px',"top":'-29px',"width":'0px',"height":'0px'});
			}else{
				if(featureData.liveVisible){
					var index = getDivIndex();
					if(Tm >= 6 && Tm < 18){
						if(index <= liveTm){
							contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}else{
							contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}
					}else if(Tm >= 18){
						if(index <= liveTm){
							contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}else{
							contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}
					}else if(Tm < 6){
						var tmpTm = liveTm;
						if(liveTm == 23){
							tmpTm = -1;
						}

						if(index <= tmpTm+24){
							contourUrl = path + featureData.liveRelativePath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}else{
							contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
						}
					}

				}else{
					if(type=="element"){
						contourUrl = path + featureData.relativepath + "/" + getFileName(nuTm, startTime, featureData) + ".1.png";
					}else{
						contourUrl = gridMouseUrl;
					}

				}
				image.src = contourUrl;
				image.onload = function() {
					var canvas = document.createElement('canvas');
					var width = this.width;
					var height = this.height;
					canvas.width = width;
					canvas.height = height;
					var ctx = canvas.getContext('2d');

					ctx.drawImage(this,0,0,width,height);

					var x = Math.round((latlng.lng - latlngBounds.getWest())/featureData.lonGap);
					var y = Math.round((latlngBounds.getNorth() - latlng.lat)/featureData.latGap);
					var imageData = ctx.getImageData(x,y,1,1);
					var len = imageData.data.length;

					if(len == 4){ // 每四个元素为一个像素数据 r,g,b,alpha
						var rgba = imageData.data[0] + ',' + imageData.data[1] + ',' + imageData.data[2] + ',' + imageData.data[3];

						var palettesUrl =styleRoot+ 'palettes/'+featureData.palettes+'.xml?v=1.0.8';
						if(Boolean(newMap.get(featureData.palettes))){
							var cache = newMap.get(featureData.palettes);
							var flag = false;
							var value = null;
							$(cache).find('entry').each(function(index, ele) {
								value = parseFloat($(ele).attr('value'));
								var color = $(ele).attr('rgba');
								if(color === rgba){

									flag = true;
									return false;
								}
							});

							if(!flag){
								value = null;

							}

							var label = "";
							if(value == null){
								label = value;
								var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
								if(!tipMarkerFlag ){
									tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
									tipMarkerFlag = true;
								}else{
									tipMarker.setIcon(tipIcon);
									tipMarker.setLatLng(latlng);
								}
								$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});

								$("#tipMarker").hide();
							}else{
								label = value + " " + unit;

								var mobile = isMobile();
								if(!mobile){
									var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
									if(!tipMarkerFlag ){
										tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
										tipMarkerFlag = true;
									}else{
										tipMarker.setIcon(tipIcon);
										tipMarker.setLatLng(latlng);
									}
									if(mouseFlag){
										$("#tipMarker").show();
									}else{
										$("#tipMarker").hide();
									}


									$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});
								}
							}
							$("#tipMarker").parents(".leaflet-div-icon").css({"left":'-32px',"top":'-29px',"width":'0px',"height":'0px'});

						}else{
							var req = new XMLHttpRequest();
							req.open('GET', palettesUrl);
							req.onload = function() {
								if (req.status == 200) {
									var data = req.responseText;
									newMap.set(featureData.palettes,data);
									var flag = false;
									var value = null;
									$(data).find('entry').each(function(index, ele) {
										value = parseFloat($(ele).attr('value'));
										var color = $(ele).attr('rgba');
										if(color === rgba){

											flag = true;
											return false;
										}
									});

									if(!flag){
										value = null;

									}

									var label = "";
									if(value == null){
										label = value;
										var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
										if(!tipMarkerFlag ){
											tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
											tipMarkerFlag = true;
										}else{
											tipMarker.setIcon(tipIcon);
											tipMarker.setLatLng(latlng);
										}
										$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});

										$("#tipMarker").hide();
									}else{
										label = value + " " + unit;

										var mobile = isMobile();
										if(!mobile){
											var tipIcon = L.divIcon({html:"<span id='tipMarker' style=\"background:url(images/locations.png) center no-repeat;position:absolute;width: 64px;height:29px;padding-top:5px;color: #FFFFFF;font-size: 14px;text-align: center;\">"+label+"\</span>"});
											if(!tipMarkerFlag ){
												tipMarker = L.marker(latlng, {icon: tipIcon}).addTo(map);
												tipMarkerFlag = true;
											}else{
												tipMarker.setIcon(tipIcon);
												tipMarker.setLatLng(latlng);
											}
											if(mouseFlag){
												$("#tipMarker").show();
											}else{
												$("#tipMarker").hide();
											}
											$("#tipMarker").parent().css({width:"auto",height:"auto",border:"0px",background:"rgba(0,0,0,0)"});
										}
									}
									$("#tipMarker").parents(".leaflet-div-icon").css({"left":'-32px',"top":'-29px',"width":'0px',"height":'0px'});
								} else {
									console.log('getStyle file error!');
									return;
								}
							};
							req.send();
						}
					}
				}

			}

		}else{

		}

	}

	// 随着子要素的改变时间轴发生变化
	function changeDiv(obj){
		//console.log(nwfdData);
		for(var i=0;i<nwfdData.length;i++){

			if(obj==nwfdData[i].name){
                if(newLujing){
                    if(nwfdData[i].children.length==1){
                        changeTime(nwfdData[i].children[0].time);
                    }else {
                        for(var j=0;j<nwfdData[i].children.length;j++){

                            if($(".liPage_liSelect").html()==null){
                                return changeTime(nwfdData[i].children[0].time,nwfdData[i].children[0].liveVisible);

                            }else if($(".liPage_liSelect").html()==nwfdData[i].children[j].name){
                                return changeTime(nwfdData[i].children[j].time,nwfdData[i].children[j].liveVisible);

                            }
                        }

                    }
                }else{
                    if(nwfdData[i].children.length==1){
                        changeTime(nwfdData[i].children[0].time);
                    }else {
                        for(var j=0;j<nwfdData[i].children.length;j++){

                            if($(".select").siblings().find("input[name=radioButton]:checked").siblings("span").html()==null){
                                return changeTime(nwfdData[i].children[0].time,nwfdData[i].children[0].liveVisible);

                            }else if($(".select").siblings().find("input[name=radioButton]:checked").siblings("span").html()==nwfdData[i].children[j].name){
                                return changeTime(nwfdData[i].children[j].time,nwfdData[i].children[j].liveVisible);

                            }
                        }

                    }
                }

			}
		}
	}


	function ifTime(obj){
		//console.log(nwfdData);
		for(var i=0;i<nwfdData.length;i++){

			if(obj==nwfdData[i].name){
                 if(newLujing){
                     if(nwfdData[i].children.length==1){
                         return nwfdData[i].children[0].liveVisible;
                     }else {
                         for(var j=0;j<nwfdData[i].children.length;j++){

                             if($("li.liPage_liSelect").html()==null){
                                 return nwfdData[i].children[0].liveVisible;

                             }else if($("li.liPage_liSelect").html()==nwfdData[i].children[j].name){
                                 return nwfdData[i].children[j].liveVisible;

                             }
                         }

                     }
                 }else{
                     if(nwfdData[i].children.length==1){
                         return nwfdData[i].children[0].liveVisible;
                     }else {
                         for(var j=0;j<nwfdData[i].children.length;j++){

                             if($(".select").siblings().find("input[name=radioButton]:checked").siblings().html()==null){
                                 return nwfdData[i].children[0].liveVisible;

                             }else if($(".select").siblings().find("input[name=radioButton]:checked").siblings().html()==nwfdData[i].children[j].name){
                                 return nwfdData[i].children[j].liveVisible;

                             }
                         }

                     }
                 }

			}
		}
	}

	function To(ifLayer){
		return ifLayer
	}


	// 获取子要素的时间time
	function changeTime(obj,pok){
		var tiList;
		tiList = obj;
		lengths = obj.length-1;
		//根据最后一项计算共计多少天
		dayes = obj[lengths]/24+1;
		var st = [];
		var lenSt = [];
		var stChe =[];
		for(i=0;i<lengths-1;i++){
			if(obj[i+1]-obj[i] != obj[i+2]-obj[i+1]){

				var cheTs = obj[i+1]-obj[i];
				st.push(obj[i+1]);
				lenSt.push(i+1);
				stChe.push(cheTs);
			}

		}
		if(st.length != 2 ){
			//获取数组
			timeSam = obj;
			sum = timeSam[1]-timeSam[0];//获取数组中的时间间隔
			vum = timeSam[lengths] - timeSam[lengths-1];
			var aLy=[timeSam[0]];

			for(i=0;i<lengths;i++){
				if(timeSam[i+1]-timeSam[i] == sum){
					aLy.push(timeSam[i+1])
				}
			}
			qel1 = aLy[aLy.length-1]/24;
			qel2 = dayes - 1 -qel1;
			qel3 = null;

			hel1 = sum;
			hel2 = vum;
			hel3 = null;

		}else{
			timeSam = obj;
			stChe.push(obj[lengths]-obj[lengths-1])
			qel1 = Number(st[0])/24;
			qel2 = Number(st[1])/24;
			qel3 = Number(obj[lengths])/24-qel1-qel2;
			hel1 = stChe[0];
			hel2 = stChe[1];
			hel3 = stChe[2];
		}

	}

	// 搜索框的效果实现
	$("#search").bind("blur",function(){

		$("#search").parent().width(260).css("transition",".25s all 1s" );
		if($(this).val()!=""){
			$(this).parent().css("box-shadow","2px 2px 5px #92674E,-2px -2px 5px #92674E")
		}

		$("#initSearch").hide();


	});
	var flag=false;
	var val;
	var Data=[];
	var coorData=[];
	var oldData=[];//记录历史记录的值
    	var newData=[];//记录与输入字符串向匹配的数据
	var data=[];
	var coor=[];
	for(var i=0;i<addressData.length;i++){
		Data.push(addressData[i].split(",")[0]);
		coorData.push(addressData[i].split(",")[1]+","+addressData[i].split(",")[2]);
	}
	$("#search").focus(function(){

		$("#search").parent().width(360).css("transition",".25s all 0.5s");
		$(this).val("");
		if(!isMobile()){
			$("#initSearch").show();
		}

	});

	//输入值与数据的匹配
	$("#search"). bind('input propertychange',function(){
		val=$(this).val();
		if(val != ""){
			$("#initSearch").hide();
		}else{
			if($("#search:focus").length!=0){
				if(!isMobile()){
					$("#initSearch").show();
				}
			}

		}
		if(val.indexOf(",")==-1&&val.indexOf("，")==-1) {
			newData = data = [];
			coor = [];
			$(".newText").css("display", "block")

			for (var i = 0; i < Data.length; i++) {
				if (val == "") {
					newData = data = [];
					data = oldData;//浅赋值
				} else {
					if (Data[i].indexOf(val) == 0) {//判断输入字符串是否与数据的首字符匹配
						newData.push(Data[i]);
						coor.push(coorData[i]);
						data = newData;
					}
				}
			}

			//初始化级联下拉列表
			var html = "";
			if (data.length >= 10) {
				data.length = 10;
			}
			for (var i = 0; i < data.length; i++) {

				if (data == oldData) {
					html += "<span style=\"data-value=" + data[i] + "\">" + data[i] + "</span>"
				} else {
					html += "<span style=\"data-value=" + data[i] + "\">" + data[i] + "  " + "  " + coor[i] + "</span>"
				}

			}
			$(".newText").html(html);

		}

	});

	//点击搜索  显示时序图
	$(".searchDiv span").on("click",function(){
		if(!yxMapClick){
			$(".selectElementBox .close").trigger("click");
		}
		if(!mapClickFlag){
			$(".apiBox .close").trigger("click");
		}
		$("#search").trigger("input propertychange");
		if(val.indexOf(",")==-1&&val.indexOf("，")==-1){
			$(".newText span").eq(0).trigger("click");
		}else{

			var str = val.toString().replace(/\s+/g, ' ');
			if(str.indexOf(" ") != -1){
				str=str.split(" ")[1];
			}

			var breakPoint=str.match(",")||str.match("，");
			var a = str.split(breakPoint)[0];
			var b = str.split(breakPoint)[1];
			if(a.length > 2 && b.length >= 2){
				var xPoint = parseFloat(a);
				var yPoint = parseFloat(b);
				if(!isNaN(xPoint) && !isNaN(yPoint)){
					var latlng = L.latLng(yPoint, xPoint);
					map.panTo(latlng);
                    if(mobile){
						pickValueWebGl(latlng);
                        pickValue1(latlng);
                    }else{
						pickValueWebGl(latlng);
                        pickValue(latlng);
                    }
                    if(toolClick=="intelligentGridPrediction"){

                        var intelligentGridPrediction=new   IntelligentGridPrediction();
                        intelligentGridPrediction.initUI();
                        intelligentGridPrediction.handler();
                        intelligentGridPrediction.showEchart(latlng);
                    }
				}
			}
		}
	});

	//enter键输入选择城市
	$(".searchDiv").keydown(function(e){
		if(e.keyCode==13){
			if(!yxMapClick){
				$(".selectElementBox .close").trigger("click");
			}
			if(!mapClickFlag){
				$(".apiBox .close").trigger("click");
			}
			$("#search").trigger("input propertychange");
			if(val.indexOf(",")==-1&&val.indexOf("，")==-1){
				$(".newText span").eq(0).trigger("click");
			}else{
				var str = val.toString().replace(/\s+/g, ' ');
				if(str.indexOf(" ") != -1){
					str=str.split(" ")[1];
				}
				var breakPoint=str.match(",")||str.match("，");
				var a = str.split(breakPoint)[0];
				var b = str.split(breakPoint)[1];
				if(a.length > 2 && b.length >= 2){
					var xPoint = parseFloat(a);
					var yPoint = parseFloat(b);
					if(!isNaN(xPoint) && !isNaN(yPoint)){
						var latlng = L.latLng(yPoint, xPoint);
						map.panTo(latlng);
                        if(mobile){
							pickValueWebGl(latlng);
                            pickValue1(latlng);
                        }else{
							pickValueWebGl(latlng);
                            pickValue(latlng);
                        }
                        if(toolClick=="intelligentGridPrediction"){

                            var intelligentGridPrediction=new   IntelligentGridPrediction();
                            intelligentGridPrediction.initUI();
                            intelligentGridPrediction.handler();
                            intelligentGridPrediction.showEchart(latlng);
                        }
					}
				}
			}
		}
	});

	//下拉列表点击
	$(".newText span").live("click", function () {
		if(!yxMapClick){
			$(".selectElementBox .close").trigger("click");
		}
		if(!mapClickFlag){
			$(".apiBox .close").trigger("click");
		}
		var label = $(this).html();
		$("#search").val(label);

		if (oldData.length > 0 && oldData.length < 10) {  // 判断历史记录是否超出最大长度，超出的话数组从头删除值
			var str = ""
			for (var i = 0; i < oldData.length; i++) {
				str += oldData[i];
			}
			if (str.indexOf($(this).html()) == -1) {
				oldData.push($(this).html());
			} else {
				oldData = oldData;
			}

		} else {
			oldData.shift();
			oldData.push($(this).html());
		}
		$(this).parent().css("display", "none");

		var arr = label.split(" ");
		var point = arr[arr.length - 1].split(",");

		var latlng = L.latLng(point[1], point[0]);
		map.panTo(latlng);
        if(mobile){
			pickValueWebGl(latlng);
            pickValue1(latlng);
        }else{
			pickValueWebGl(latlng);
            pickValue(latlng);
        }
        if(toolClick=="intelligentGridPrediction"){

            var intelligentGridPrediction=new   IntelligentGridPrediction();
            intelligentGridPrediction.initUI();
            intelligentGridPrediction.handler();
            intelligentGridPrediction.showEchart(latlng)
        }
	});

   //城市地址界面  操作
	var titleCity=["北京", "上海", "广州", "天津", "重庆", "成都", "武汉", "哈尔滨", "南京", "杭州"];


	var objData = getCityArr(addressData);

	var createDateObj = findSpell(objData);
	var titleList="";
	var citySpell="";
	var cityShow="";
	var getTitleCity = createTitleCity(titleCity,createDateObj);
	for(var i=0;i<getTitleCity.length;i++){
		titleList+="<li><span>"+getTitleCity[i][0]+"</span><span>"+getTitleCity[i][2]+","+getTitleCity[i][1]+"</span></li>"
	}
	for(var i=0;i<createDateObj.length;i++){
		for(var j in createDateObj[i]){
			citySpell+="<li><a href='#_"+j+"'>"+j+"</a></li>";
			cityShow+="<li><div class='aList'><a id='titleA' name=''>"+j+"</a></div><div class='cityBox'>";
			for(var val in createDateObj[i][j]){
				cityShow+="<p class='city' title='"+createDateObj[i][j][val][0]+"'><span>"+createDateObj[i][j][val][0]+"</span><span>"+createDateObj[i][j][val][2]+","+createDateObj[i][j][val][1]+"</span></p>";
			}
			cityShow+="</div></li>";

		}

	}
	$(".titleList").html(titleList);
	$(".spell").html(citySpell);
	$(".cityList").html(cityShow);

//点击#initSearch中的titleCity的城市名称  执行的操作
	$("#initSearch .titleList li").live("mousedown",function(event){

		var e=arguments.callee.caller.arguments[0]||event;
		if(e&&e.stopPropagation){
			e.stopPropagation()
		}else if(window.event){
			window.event.cancelBubble=true;
		}
		if(e&&e.preventDefault){
			e.preventDefault();
		}else{
			//IE中阻止函数默认动作的方式
			window.event.returnValue=false;
		}
		var str=$(this).children("span").eq(0).html()+"  "+$(this).children("span").eq(1).html();
		$("#search").val(str);
		var arr = str.split(" ");
		var point = arr[arr.length - 1].split(",");

		var latlng = L.latLng(point[1], point[0]);
		map.panTo(latlng);
		if(mobile){
			pickValueWebGl(latlng);
			pickValue1(latlng);
		}else{
			pickValueWebGl(latlng);
			pickValue(latlng);
		}
		if(toolClick=="intelligentGridPrediction"){

			var intelligentGridPrediction=new   IntelligentGridPrediction();
			intelligentGridPrediction.initUI();
			intelligentGridPrediction.handler();
			intelligentGridPrediction.showEchart(latlng)
		}

		$("#initSearch").hide();
	})

//点击城市列表-字母分类的城市列表

	$("#initSearch .city").live("mousedown",function(event){
		var e=arguments.callee.caller.arguments[0]||event;
		if(e&&e.stopPropagation){
			e.stopPropagation()
		}else if(window.event){
			window.event.cancelBubble=true;
		}
		if(e&&e.preventDefault){
			e.preventDefault();
		}else{
			//IE中阻止函数默认动作的方式
			window.event.returnValue=false;
		}
		var str=$(this).children("span").eq(0).html()+"  "+$(this).children("span").eq(1).html();
		$("#search").val(str);
		var arr = str.split(" ");
		var point = arr[arr.length - 1].split(",");

		var latlng = L.latLng(point[1], point[0]);
		map.panTo(latlng);
		if(mobile){
			pickValueWebGl(latlng);
			pickValue1(latlng);
		}else{
			pickValueWebGl(latlng);
			pickValue(latlng);
		}
		if(toolClick=="intelligentGridPrediction"){

			var intelligentGridPrediction=new   IntelligentGridPrediction();
			intelligentGridPrediction.initUI();
			intelligentGridPrediction.handler();
			intelligentGridPrediction.showEchart(latlng)
		}

		$("#initSearch").hide();

	})
	//


//点击拼音跳到对应的字母位置
	$("#initSearch .spell li").live("mousedown",function(event){

		var e=arguments.callee.caller.arguments[0]||event;
		if(e&&e.stopPropagation){
			e.stopPropagation()
		}else if(window.event){
			//阻止冒泡
			window.event.cancelBubble=true;
		}

		if(e&&e.preventDefault){
			e.preventDefault();
		}else{
			//IE中阻止函数默认动作的方式
			window.event.returnValue=false;
		}
		//$("#initSearch").show();
		var index = $(this).index();
		var scrolltop = 0;
		for(var i = 0;i<index;i++){
			scrolltop += $(".cityList li").eq(i).children(".cityBox").height()+20;
		}
		$(".showCity").animate({scrollTop:scrolltop},100);
	})


	function createTitleCity(titleCity,createDateObj){
		var  titleCitySpell = [];
		for(var i = 0;i<titleCity.length;i++){
			var spell = makePy(titleCity[i])[0];
			for(var j=0;j<createDateObj.length;j++){
				for(var key in createDateObj[j]);
				if(spell.slice(0,1)==key){
					for(var val =0;val<createDateObj[j][key].length;val++){
						if(createDateObj[j][key][val][0].indexOf(titleCity[i]+"市")==0||createDateObj[j][key][val][0].indexOf("澳门")==0){
							titleCitySpell.push(createDateObj[j][key][val]);

						}
					}
				}
			}
		}
		return titleCitySpell;
	}
	function getCityArr(arr){
		var arrObj=[];
		for(var i=0;i<arr.length;i++){
			var obj={};
			obj.city=arr[i].split(",")[0];
			obj.lng=arr[i].split(",")[1];
			obj.lat=arr[i].split(",")[2];
			obj.spell=makePy(arr[i].split(",")[0])[0];
			arrObj.push(obj)
		}
		return arrObj;
	}
	function findSpell(objData){
		var str="";
		var createDateObj=[];
		for(var i = 0;i<objData.length;i++){
			if(str.indexOf(objData[i].spell.slice(0,1))!=-1){
				var arr=[objData[i].city,objData[i].lat,objData[i].lng]
				createDateObj[str.indexOf(objData[i].spell.slice(0,1))][objData[i].spell.slice(0,1)].push(arr);
			}else{
				str+=objData[i].spell.slice(0,1);
				var obj={};
				obj[objData[i].spell.slice(0,1)]=[[objData[i].city,objData[i].lat,objData[i].lng]];
				createDateObj.push(obj)
			}
		}
		var spellArr=str.split("");
		var dataArr=[];
		spellArr = spellArr.sort();
		for(var i = 0;i<spellArr.length;i++){
			for(var j=0;j<createDateObj.length;j++){
				for(var key in createDateObj[j]){
					if(spellArr[i] == key){
						var objOne={};
						objOne[key]=createDateObj[j][key];
						dataArr.push(objOne);
					}
				}

			}
		}
		return dataArr;
	}


//参数,中文字符串
//返回值:拼音首字母串数组
	function makePy(str) {
		if (typeof (str) != "string")
			throw new Error(-1, "函数makePy需要字符串类型参数!");
		var arrResult = new Array(); //保存中间结果的数组
		for (var i = 0, len = str.length; i < len; i++) {
			//获得unicode码
			var ch = str.charAt(i);
			//检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
			arrResult.push(checkCh(ch));
		}
		//处理arrResult,返回所有可能的拼音首字母串数组
		return mkRslt(arrResult);
	}
	function checkCh(ch) {
		var uni = ch.charCodeAt(0);
		//如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
		if (uni > 40869 || uni < 19968)
			return ch; //dealWithOthers(ch);
		//检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
		return (oMultiDiff[uni] ? oMultiDiff[uni] : (strChineseFirstPY.charAt(uni - 19968)));
	}
	function mkRslt(arr) {
		var arrRslt = [""];
		for (var i = 0, len = arr.length; i < len; i++) {
			var str = arr[i];
			var strlen = str.length;
			if (strlen == 1) {
				for (var k = 0; k < arrRslt.length; k++) {
					arrRslt[k] += str;
				}
			} else {
				var tmpArr = arrRslt.slice(0);
				arrRslt = [];
				for (k = 0; k < strlen; k++) {
					//复制一个相同的arrRslt
					var tmp = tmpArr.slice(0);
					//把当前字符str[k]添加到每个元素末尾
					for (var j = 0; j < tmp.length; j++) {
						tmp[j] += str.charAt(k);
					}
					//把复制并修改后的数组连接到arrRslt上
					arrRslt = arrRslt.concat(tmp);
				}
			}
		}
		return arrRslt;
	}

	//温馨提示
	var mobile = isMobile();
	if(mobile){
		$(".searchDiv").css("display","block");
		$(".stationLis").css({'bottom':'180px'});
		$("#slider-range-min").css({'bottom':'210px'});
		$("#slider-range-max").css({'bottom':'210px'});
		$(".val").css({'bottom':'207px'});
		$(".val1").css({'bottom':'227px'});
	}else{
		setTimeout(function(){
			$("#reminder").fadeOut(500);
			$(".searchDiv").fadeIn(500);
		},5000);
	}
})

//下拉列表消失
$(".newText").mouseover(function () {
	$(this).show();
})
$(".newText").mouseout(function () {
	$(this).hide();
})
if (!!window.ActiveXObject || "ActiveXObject" in window){

}else{
		$("#initSearch").mouseover(function () {
			$(this).show();

		})
		$("#initSearch").mouseout(function () {
			$("#search").blur();

		})
}

//随机生成地图
function collage() {
	var clientWidth=document.body.offsetWidth;
	var clientHeight=document.body.offsetHeight;
	var tileLayer;
	map.eachLayer(function(layer) {
		if (layer instanceof L.TileLayer) {
			tileLayer = layer;
		}
	});
	var canvas = document.createElement("canvas");
	var ctx = canvas.getContext("2d");
	canvas.width=clientWidth;
	canvas.height=clientHeight;
	var mapRect = map.getContainer().getBoundingClientRect();
	var tilesBox = tileLayer.getContainer();
	var div = tilesBox.firstElementChild;
	do{
		var tile = div.firstElementChild;
		if(!tile)continue;
		do {
			var tileRect = tile.getBoundingClientRect();
			var tilePos = {left: tileRect.left - mapRect.left, top: tileRect.top - mapRect.top};

			ctx.drawImage(tile, tilePos.left, tilePos.top, tileRect.width, tileRect.height);
		} while (tile = tile.nextElementSibling)
	}while (div = div.nextElementSibling)

	return canvas;
}

//  格式化时间
Date.prototype.Format = function (fmt) {
	var o = {
		"M+": this.getMonth() + 1, //月份 
        "d+": this.getDate(), //日 
        "h+": this.getHours(), //小时 
        "m+": this.getMinutes(), //分 
        "s+": this.getSeconds(), //秒 
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
        "S": this.getMilliseconds() //毫秒 
	};
	if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for (var k in o)
		if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
}

var addressData = [
"北京市,116.4,39.9",
"天安门,116.38,39.9",
"东城区,116.42,39.93",
"西城区,116.37,39.92",
"崇文区,116.43,39.88",
"宣武区,116.35,39.87",
"朝阳区,116.43,39.92",
"丰台区,116.28,39.85",
"石景山区,116.22,39.9",
"海淀区,116.3,39.95",
"门头沟区,116.1,39.93",
"房山区,116.13,39.75",
"通州区,116.65,39.92",
"顺义区,116.65,40.13",
"昌平区,116.23,40.22",
"大兴区,116.33,39.73",
"怀柔区,116.63,40.32",
"平谷区,117.12,40.13",
"密云县,116.83,40.37",
"延庆县,115.97,40.45",
"天津市,117.2,39.12",
"和平区,117.2,39.12",
"河东区,117.22,39.12",
"河西区,117.22,39.12",
"南开区,117.15,39.13",
"河北区,117.18,39.15",
"红桥区,117.15,39.17",
"塘沽区,117.65,39.02",
"汉沽区,117.8,39.25",
"大港区,117.45,38.83",
"东丽区,117.3,39.08",
"西青区,117,39.13",
"津南区,117.38,38.98",
"北辰区,117.13,39.22",
"武清区,117.03,39.38",
"宝坻区,117.3,39.72",
"滨海新区,117.68,39.03",
"宁河县,117.82,39.33",
"静海县,116.92,38.93",
"蓟县,117.4,40.05",
"石家庄市,114.52,38.05",
"长安区,114.52,38.05",
"桥东区,114.5,38.05",
"桥东区,114.9,40.78",
"桥东区,114.5,37.07",
"桥西区,114.47,37.05",
"桥西区,114.87,40.83",
"桥西区,114.47,38.03",
"新华区,114.47,38.05",
"新华区,116.87,38.32",
"井陉矿区,114.05,38.08",
"裕华区,114.52,38.02",
"井陉县,114.13,38.03",
"正定县,114.57,38.15",
"栾城县,114.65,37.88",
"行唐县,114.55,38.43",
"灵寿县,114.37,38.3",
"高邑县,114.6,37.6",
"深泽县,115.2,38.18",
"赞皇县,114.38,37.67",
"无极县,114.97,38.18",
"平山县,114.2,38.25",
"元氏县,114.52,37.75",
"赵县,114.77,37.75",
"辛集市,115.22,37.92",
"藁城市,114.83,38.03",
"晋州市,115.03,38.03",
"新乐市,114.68,38.35",
"鹿泉市,114.3,38.08",
"唐山市,118.2,39.63",
"路南区,118.17,39.63",
"路北区,118.22,39.63",
"古冶区,118.42,39.73",
"开平区,118.27,39.68",
"丰南区,118.1,39.57",
"丰润区,118.17,39.83",
"滦县,118.7,39.75",
"滦南县,118.68,39.5",
"乐亭县,118.9,39.42",
"迁西县,118.32,40.15",
"玉田县,117.73,39.88",
"唐海县,118.45,39.27",
"遵化市,117.95,40.18",
"迁安市,118.7,40.02",
"秦皇岛市,119.6,39.93",
"海港区,119.6,39.93",
"山海关区,119.77,40",
"北戴河区,119.48,39.83",
"青龙满族自治县,118.95,40.4",
"昌黎县,119.17,39.7",
"抚宁县,119.23,39.88",
"卢龙县,118.87,39.88",
"邯郸市,114.48,36.62",
"邯山区,114.48,36.6",
"丛台区,114.48,36.63",
"复兴区,114.45,36.63",
"峰峰矿区,114.2,36.42",
"邯郸县,114.53,36.6",
"临漳县,114.62,36.35",
"成安县,114.68,36.43",
"大名县,115.15,36.28",
"涉县,113.67,36.57",
"磁县,114.37,36.35",
"肥乡县,114.8,36.55",
"永年县,114.48,36.78",
"邱县,115.17,36.82",
"鸡泽县,114.87,36.92",
"广平县,114.93,36.48",
"馆陶县,115.3,36.53",
"魏县,114.93,36.37",
"曲周县,114.95,36.78",
"武安市,114.2,36.7",
"邢台市,114.48,37.07",
"桥东区,114.5,38.05",
"桥东区,114.9,40.78",
"桥东区,114.5,37.07",
"桥西区,114.87,40.83",
"桥西区,114.47,38.03",
"桥西区,114.47,37.05",
"邢台县,114.5,37.08",
"临城县,114.5,37.43",
"内丘县,114.52,37.3",
"柏乡县,114.68,37.5",
"隆尧县,114.77,37.35",
"任县,114.68,37.13",
"南和县,114.68,37",
"宁晋县,114.92,37.62",
"巨鹿县,115.03,37.22",
"新河县,115.25,37.53",
"广宗县,115.15,37.07",
"平乡县,115.03,37.07",
"威县,115.25,36.98",
"清河县,115.67,37.07",
"临西县,115.5,36.85",
"南宫市,115.38,37.35",
"沙河市,114.5,36.85",
"保定市,115.47,38.87",
"新市区,115.45,38.87",
"北市区,115.48,38.87",
"南市区,115.5,38.85",
"满城县,115.32,38.95",
"清苑县,115.48,38.77",
"涞水县,115.72,39.4",
"阜平县,114.18,38.85",
"徐水县,115.65,39.02",
"定兴县,115.77,39.27",
"唐县,114.98,38.75",
"高阳县,115.78,38.68",
"容城县,115.87,39.05",
"涞源县,114.68,39.35",
"望都县,115.15,38.72",
"安新县,115.93,38.92",
"易县,115.5,39.35",
"曲阳县,114.7,38.62",
"蠡县,115.57,38.48",
"顺平县,115.13,38.83",
"博野县,115.47,38.45",
"雄县,116.1,38.98",
"涿州市,115.97,39.48",
"定州市,114.97,38.52",
"安国市,115.32,38.42",
"高碑店市,115.85,39.33",
"张家口市,114.88,40.82",
"桥东区,114.5,38.05",
"桥东区,114.9,40.78",
"桥东区,114.5,37.07",
"桥西区,114.87,40.83",
"桥西区,114.47,38.03",
"桥西区,114.47,37.05",
"宣化区,115.05,40.6",
"下花园区,115.27,40.48",
"宣化县,115.02,40.55",
"张北县,114.7,41.15",
"康保县,114.62,41.85",
"沽源县,115.7,41.67",
"尚义县,113.97,41.08",
"蔚县,114.57,39.85",
"阳原县,114.17,40.12",
"怀安县,114.42,40.67",
"万全县,114.72,40.75",
"怀来县,115.52,40.4",
"涿鹿县,115.22,40.38",
"赤城县,115.83,40.92",
"崇礼县,115.27,40.97",
"承德市,117.93,40.97",
"双桥区,117.93,40.97",
"双滦区,117.78,40.95",
"鹰手营子矿区,117.65,40.55",
"承德县,118.17,40.77",
"兴隆县,117.52,40.43",
"平泉县,118.68,41",
"滦平县,117.33,40.93",
"隆化县,117.72,41.32",
"丰宁满族自治县,116.65,41.2",
"宽城满族自治县,118.48,40.6",
"围场满族蒙古族自治县,117.75,41.93",
"沧州市,116.83,38.3",
"新华区,114.47,38.05",
"新华区,116.87,38.32",
"运河区,116.85,38.32",
"沧县,116.87,38.3",
"青县,116.82,38.58",
"东光县,116.53,37.88",
"海兴县,117.48,38.13",
"盐山县,117.22,38.05",
"肃宁县,115.83,38.43",
"南皮县,116.7,38.03",
"吴桥县,116.38,37.62",
"献县,116.12,38.18",
"孟村回族自治县,117.1,38.07",
"泊头市,116.57,38.07",
"任丘市,116.1,38.72",
"黄骅市,117.35,38.37",
"河间市,116.08,38.43",
"廊坊市,116.7,39.52",
"安次区,116.68,39.52",
"广阳区,116.72,39.53",
"固安县,116.3,39.43",
"永清县,116.5,39.32",
"香河县,117,39.77",
"大城县,116.63,38.7",
"文安县,116.47,38.87",
"大厂回族自治县,116.98,39.88",
"霸州市,116.4,39.1",
"三河市,117.07,39.98",
"衡水市,115.68,37.73",
"桃城区,115.68,37.73",
"枣强县,115.72,37.52",
"武邑县,115.88,37.82",
"武强县,115.98,38.03",
"饶阳县,115.73,38.23",
"安平县,115.52,38.23",
"故城县,115.97,37.35",
"景县,116.27,37.7",
"阜城县,116.15,37.87",
"冀州市,115.57,37.57",
"深州市,115.55,38.02",
"太原市,112.55,37.87",
"小店区,112.57,37.73",
"迎泽区,112.57,37.87",
"杏花岭区,112.57,37.88",
"尖草坪区,112.48,37.93",
"万柏林区,112.52,37.87",
"晋源区,112.48,37.73",
"清徐县,112.35,37.6",
"阳曲县,112.67,38.07",
"娄烦县,111.78,38.07",
"古交市,112.17,37.92",
"大同市,113.3,40.08",
"城区,113.28,40.08",
"城区,113.6,37.85",
"城区,113.12,36.22",
"城区,112.83,35.5",
"矿区,113.17,40.03",
"矿区,113.57,37.87",
"南郊区,113.13,40",
"新荣区,113.15,40.27",
"阳高县,113.75,40.37",
"天镇县,114.08,40.42",
"广灵县,114.28,39.77",
"灵丘县,114.23,39.43",
"浑源县,113.68,39.7",
"左云县,112.7,40",
"大同县,113.6,40.03",
"阳泉市,113.57,37.85",
"城区,113.28,40.08",
"城区,113.6,37.85",
"城区,113.12,36.22",
"城区,112.83,35.5",
"矿区,113.17,40.03",
"矿区,113.57,37.87",
"郊区,113.58,37.93",
"郊区,113.12,36.2",
"平定县,113.62,37.8",
"盂县,113.4,38.08",
"长治市,113.12,36.2",
"城区,113.28,40.08",
"城区,113.6,37.85",
"城区,113.12,36.22",
"城区,112.83,35.5",
"郊区,113.58,37.93",
"郊区,113.12,36.2",
"长治县,113.03,36.05",
"襄垣县,113.05,36.53",
"屯留县,112.88,36.32",
"平顺县,113.43,36.2",
"黎城县,113.38,36.5",
"壶关县,113.2,36.12",
"长子县,112.87,36.12",
"武乡县,112.85,36.83",
"沁县,112.7,36.75",
"沁源县,112.33,36.5",
"潞城市,113.22,36.33",
"晋城市,112.83,35.5",
"城区,113.28,40.08",
"城区,113.6,37.85",
"城区,113.12,36.22",
"城区,112.83,35.5",
"沁水县,112.18,35.68",
"阳城县,112.42,35.48",
"陵川县,113.27,35.78",
"泽州县,112.83,35.5",
"高平市,112.92,35.8",
"朔州市,112.43,39.33",
"朔城区,112.43,39.33",
"山阴县,112.82,39.52",
"应县,113.18,39.55",
"右玉县,112.47,39.98",
"怀仁县,113.08,39.83",
"晋中市,112.75,37.68",
"榆次区,112.75,37.68",
"榆社县,112.97,37.07",
"左权县,113.37,37.07",
"和顺县,113.57,37.33",
"昔阳县,113.7,37.62",
"寿阳县,113.18,37.88",
"太谷县,112.55,37.42",
"祁县,112.33,37.35",
"平遥县,112.17,37.18",
"灵石县,111.77,36.85",
"介休市,111.92,37.03",
"运城市,110.98,35.02",
"盐湖区,110.98,35.02",
"临猗县,110.77,35.15",
"万荣县,110.83,35.42",
"闻喜县,111.22,35.35",
"稷山县,110.97,35.6",
"新绛县,111.22,35.62",
"绛县,111.57,35.48",
"垣曲县,111.67,35.3",
"夏县,111.22,35.15",
"平陆县,111.22,34.83",
"芮城县,110.68,34.7",
"河津市,110.7,35.6",
"忻州市,112.73,38.42",
"忻府区,112.73,38.42",
"定襄县,112.95,38.48",
"五台县,113.25,38.73",
"代县,112.95,39.07",
"繁峙县,113.25,39.18",
"宁武县,112.3,39",
"静乐县,111.93,38.37",
"神池县,112.2,39.08",
"五寨县,111.85,38.9",
"岢岚县,111.57,38.7",
"河曲县,111.13,39.38",
"偏关县,111.5,39.43",
"原平市,112.7,38.73",
"临汾市,111.52,36.08",
"尧都区,111.52,36.08",
"曲沃县,111.47,35.63",
"翼城县,111.72,35.73",
"襄汾县,111.43,35.88",
"洪洞县,111.67,36.25",
"古县,111.92,36.27",
"安泽县,112.25,36.15",
"浮山县,111.83,35.97",
"吉县,110.68,36.1",
"乡宁县,110.83,35.97",
"大宁县,110.75,36.47",
"隰县,110.93,36.7",
"永和县,110.63,36.77",
"蒲县,111.08,36.42",
"汾西县,111.57,36.65",
"侯马市,111.35,35.62",
"霍州市,111.72,36.57",
"吕梁市,111.13,37.52",
"离石区,111.13,37.52",
"文水县,112.02,37.43",
"交城县,112.15,37.55",
"兴县,111.12,38.47",
"临县,110.98,37.95",
"柳林县,110.9,37.43",
"石楼县,110.83,37",
"岚县,111.67,38.28",
"方山县,111.23,37.88",
"中阳县,111.18,37.33",
"交口县,111.2,36.97",
"孝义市,111.77,37.15",
"汾阳市,111.78,37.27",
"呼和浩特市,111.73,40.83",
"新城区,111.65,40.87",
"回民区,111.6,40.8",
"玉泉区,111.67,40.75",
"赛罕区,111.68,40.8",
"土默特左旗,111.13,40.72",
"托克托县,111.18,40.27",
"和林格尔县,111.82,40.38",
"清水河县,111.68,39.92",
"武川县,111.45,41.08",
"包头市,109.83,40.65",
"东河区,110.02,40.58",
"昆都仑区,109.83,40.63",
"青山区,109.9,40.65",
"石拐区,110.27,40.68",
"九原区,109.97,40.6",
"土默特右旗,110.52,40.57",
"固阳县,110.05,41.03",
"达尔罕茂明安联合旗,110.43,41.7",
"乌海市,106.82,39.67",
"海勃湾区,106.83,39.7",
"海南区,106.88,39.43",
"乌达区,106.7,39.5",
"赤峰市,118.92,42.27",
"红山区,118.97,42.28",
"元宝山区,119.28,42.03",
"松山区,118.92,42.28",
"阿鲁科尔沁旗,120.08,43.88",
"巴林左旗,119.38,43.98",
"巴林右旗,118.67,43.52",
"林西县,118.05,43.6",
"克什克腾旗,117.53,43.25",
"翁牛特旗,119.02,42.93",
"喀喇沁旗,118.7,41.93",
"宁城县,119.33,41.6",
"敖汉旗,119.9,42.28",
"通辽市,122.27,43.62",
"科尔沁区,122.27,43.62",
"科尔沁左翼中旗,123.32,44.13",
"科尔沁左翼后旗,122.35,42.95",
"开鲁县,121.3,43.6",
"库伦旗,121.77,42.73",
"奈曼旗,120.65,42.85",
"扎鲁特旗,120.92,44.55",
"霍林郭勒市,119.65,45.53",
"鄂尔多斯市,109.8,39.62",
"东胜区,110,39.82",
"达拉特旗,110.03,40.4",
"准格尔旗,111.23,39.87",
"鄂托克前旗,107.48,38.18",
"鄂托克旗,107.98,39.1",
"杭锦旗,108.72,39.83",
"乌审旗,108.85,38.6",
"伊金霍洛旗,109.73,39.57",
"呼伦贝尔市,119.77,49.22",
"海拉尔区,119.77,49.22",
"阿荣旗,123.47,48.13",
"鄂伦春自治旗,123.72,50.58",
"鄂温克族自治旗,119.75,49.13",
"陈巴尔虎旗,119.43,49.32",
"新巴尔虎左旗,118.27,48.22",
"新巴尔虎右旗,116.82,48.67",
"满洲里市,117.45,49.58",
"牙克石市,120.73,49.28",
"扎兰屯市,122.75,47.98",
"额尔古纳市,120.18,50.23",
"根河市,121.52,50.78",
"巴彦淖尔市,107.42,40.75",
"临河区,107.4,40.75",
"五原县,108.27,41.1",
"磴口县,107.02,40.33",
"乌拉特前旗,108.65,40.72",
"乌拉特中旗,108.52,41.57",
"乌拉特后旗,107.07,41.1",
"杭锦后旗,107.15,40.88",
"乌兰察布市,113.12,40.98",
"集宁区,113.1,41.03",
"卓资县,112.57,40.9",
"化德县,114,41.9",
"商都县,113.53,41.55",
"兴和县,113.88,40.88",
"凉城县,112.48,40.53",
"察哈尔右翼前旗,113.22,40.78",
"察哈尔右翼中旗,112.63,41.27",
"察哈尔右翼后旗,113.18,41.45",
"四子王旗,111.7,41.52",
"丰镇市,113.15,40.43",
"兴安盟,122.05,46.08",
"乌兰浩特市,122.05,46.08",
"阿尔山市,119.93,47.18",
"科尔沁右翼前旗,121.92,46.07",
"科尔沁右翼中旗,121.47,45.05",
"扎赉特旗,122.9,46.73",
"突泉县,121.57,45.38",
"锡林郭勒盟,116.07,43.95",
"二连浩特市,111.98,43.65",
"锡林浩特市,116.07,43.93",
"阿巴嘎旗,114.97,44.02",
"苏尼特左旗,113.63,43.85",
"苏尼特右旗,112.65,42.75",
"东乌珠穆沁旗,116.97,45.52",
"西乌珠穆沁旗,117.6,44.58",
"太仆寺旗,115.28,41.9",
"镶黄旗,113.83,42.23",
"正镶白旗,115,42.3",
"正蓝旗,116,42.25",
"多伦县,116.47,42.18",
"阿拉善盟,105.67,38.83",
"阿拉善左旗,105.67,38.83",
"阿拉善右旗,101.68,39.2",
"额济纳旗,101.07,41.97",
"沈阳市,123.43,41.8",
"和平区,123.4,41.78",
"沈河区,123.45,41.8",
"大东区,123.47,41.8",
"皇姑区,123.42,41.82",
"铁西区,122.95,41.12",
"铁西区,123.35,41.8",
"苏家屯区,123.33,41.67",
"东陵区,123.47,41.77",
"新城子区,123.52,42.05",
"于洪区,123.3,41.78",
"辽中县,122.72,41.52",
"康平县,123.35,42.75",
"法库县,123.4,42.5",
"新民市,122.82,42",
"大连市,121.62,38.92",
"中山区,121.63,38.92",
"西岗区,121.6,38.92",
"沙河口区,121.58,38.9",
"甘井子区,121.57,38.95",
"旅顺口区,121.27,38.82",
"金州区,121.7,39.1",
"长海县,122.58,39.27",
"瓦房店市,122,39.62",
"普兰店市,121.95,39.4",
"庄河市,122.98,39.7",
"鞍山市,122.98,41.1",
"铁东区,122.98,41.1",
"铁西区,122.95,41.12",
"铁西区,123.35,41.8",
"立山区,123,41.15",
"千山区,122.97,41.07",
"台安县,122.42,41.38",
"岫岩满族自治县,123.28,40.28",
"海城市,122.7,40.88",
"抚顺市,123.98,41.88",
"新抚区,123.88,41.87",
"东洲区,124.02,41.85",
"望花区,123.78,41.85",
"顺城区,123.93,41.88",
"抚顺县,123.9,41.88",
"新宾满族自治县,125.03,41.73",
"清原满族自治县,124.92,42.1",
"本溪市,123.77,41.3",
"平山区,123.77,41.3",
"溪湖区,123.77,41.33",
"明山区,123.82,41.3",
"南芬区,123.73,41.1",
"本溪满族自治县,124.12,41.3",
"桓仁满族自治县,125.35,41.27",
"丹东市,124.38,40.13",
"元宝区,124.38,40.13",
"振兴区,124.35,40.08",
"振安区,124.42,40.17",
"宽甸满族自治县,124.78,40.73",
"东港市,124.15,39.87",
"凤城市,124.07,40.45",
"锦州市,121.13,41.1",
"古塔区,121.12,41.13",
"凌河区,121.15,41.12",
"太和区,121.1,41.1",
"黑山县,122.12,41.7",
"义县,121.23,41.53",
"凌海市,121.35,41.17",
"营口市,122.23,40.67",
"站前区,122.27,40.68",
"西市区,122.22,40.67",
"鲅鱼圈区,122.12,40.27",
"老边区,122.37,40.67",
"盖州市,122.35,40.4",
"大石桥市,122.5,40.65",
"阜新市,121.67,42.02",
"海州区,121.65,42.02",
"太平区,121.67,42.02",
"清河门区,121.42,41.75",
"细河区,121.68,42.03",
"阜新蒙古族自治县,121.75,42.07",
"彰武县,122.53,42.38",
"辽阳市,123.17,41.27",
"白塔区,123.17,41.27",
"文圣区,123.18,41.27",
"宏伟区,123.2,41.2",
"弓长岭区,123.45,41.13",
"太子河区,123.18,41.25",
"辽阳县,123.07,41.22",
"灯塔市,123.33,41.42",
"盘锦市,122.07,41.12",
"双台子区,122.05,41.2",
"兴隆台区,122.07,41.12",
"大洼县,122.07,40.98",
"盘山县,122.02,41.25",
"铁岭市,123.83,42.28",
"银州区,123.85,42.28",
"清河区,124.15,42.53",
"铁岭县,123.83,42.3",
"西丰县,124.72,42.73",
"昌图县,124.1,42.78",
"调兵山市,123.55,42.47",
"开原市,124.03,42.55",
"朝阳市,120.45,41.57",
"双塔区,120.45,41.57",
"龙城区,120.43,41.6",
"朝阳县,120.47,41.58",
"建平县,119.63,41.4",
"北票市,120.77,41.8",
"凌源市,119.4,41.25",
"葫芦岛市,120.83,40.72",
"连山区,120.87,40.77",
"龙港区,120.93,40.72",
"南票区,120.75,41.1",
"绥中县,120.33,40.32",
"建昌县,119.8,40.82",
"兴城市,120.72,40.62",
"长春市,125.32,43.9",
"南关区,125.33,43.87",
"宽城区,125.32,43.92",
"朝阳区,125.28,43.83",
"二道区,125.37,43.87",
"绿园区,125.25,43.88",
"双阳区,125.67,43.52",
"农安县,125.18,44.43",
"九台市,125.83,44.15",
"榆树市,126.55,44.82",
"德惠市,125.7,44.53",
"吉林市,126.55,43.83",
"昌邑区,126.57,43.88",
"龙潭区,126.57,43.92",
"船营区,126.53,43.83",
"丰满区,126.57,43.82",
"永吉县,126.5,43.67",
"蛟河市,127.33,43.72",
"桦甸市,126.73,42.97",
"舒兰市,126.95,44.42",
"磐石市,126.05,42.95",
"四平市,124.35,43.17",
"铁西区,124.35,43.15",
"铁东区,124.38,43.17",
"梨树县,124.33,43.32",
"伊通满族自治县,125.3,43.35",
"公主岭市,124.82,43.5",
"双辽市,123.5,43.52",
"辽源市,125.13,42.88",
"龙山区,125.12,42.9",
"西安区,125.15,42.92",
"东丰县,125.53,42.68",
"东辽县,125,42.92",
"通化市,125.93,41.73",
"东昌区,125.95,41.73",
"二道江区,126.03,41.77",
"通化县,125.75,41.68",
"辉南县,126.03,42.68",
"柳河县,125.73,42.28",
"梅河口市,125.68,42.53",
"集安市,126.18,41.12",
"白山市,126.42,41.93",
"八道江区,126.4,41.93",
"抚松县,127.28,42.33",
"靖宇县,126.8,42.4",
"长白朝鲜族自治县,128.2,41.42",
"临江市,126.9,41.8",
"松原市,124.82,45.13",
"宁江区,124.8,45.17",
"长岭县,123.98,44.28",
"乾安县,124.02,45.02",
"扶余县,126.02,44.98",
"白城市,122.83,45.62",
"洮北区,122.85,45.62",
"镇赉县,123.2,45.85",
"通榆县,123.08,44.82",
"洮南市,122.78,45.33",
"大安市,124.28,45.5",
"延边朝鲜族自治州,129.5,42.88",
"延吉市,129.5,42.88",
"图们市,129.83,42.97",
"敦化市,128.23,43.37",
"珲春市,130.37,42.87",
"龙井市,129.42,42.77",
"和龙市,129,42.53",
"汪清县,129.75,43.32",
"安图县,128.9,43.12",
"哈尔滨市,126.53,45.8",
"道里区,126.62,45.77",
"南岗区,126.68,45.77",
"道外区,126.65,45.78",
"香坊区,126.68,45.72",
"平房区,126.62,45.62",
"松北区,126.55,45.8",
"呼兰区,126.58,45.9",
"依兰县,129.55,46.32",
"方正县,128.83,45.83",
"宾县,127.48,45.75",
"巴彦县,127.4,46.08",
"木兰县,128.03,45.95",
"通河县,128.75,45.97",
"延寿县,128.33,45.45",
"双城市,126.32,45.37",
"尚志市,127.95,45.22",
"五常市,127.15,44.92",
"齐齐哈尔市,123.95,47.33",
"龙沙区,123.95,47.32",
"建华区,123.95,47.35",
"铁锋区,123.98,47.35",
"昂昂溪区,123.8,47.15",
"富拉尔基区,123.62,47.2",
"龙江县,123.18,47.33",
"依安县,125.3,47.88",
"泰来县,123.42,46.4",
"甘南县,123.5,47.92",
"富裕县,124.47,47.82",
"克山县,125.87,48.03",
"克东县,126.25,48.03",
"拜泉县,126.08,47.6",
"讷河市,124.87,48.48",
"鸡西市,130.97,45.3",
"鸡冠区,130.97,45.3",
"恒山区,130.93,45.2",
"滴道区,130.78,45.37",
"梨树区,130.68,45.08",
"城子河区,131,45.33",
"麻山区,130.52,45.2",
"鸡东县,131.13,45.25",
"虎林市,132.98,45.77",
"密山市,131.87,45.55",
"鹤岗市,130.27,47.33",
"向阳区,130.28,47.33",
"向阳区,130.33,46.8",
"工农区,130.25,47.32",
"南山区,130.28,47.3",
"兴安区,130.22,47.27",
"东山区,130.32,47.33",
"兴山区,130.3,47.37",
"萝北县,130.83,47.58",
"绥滨县,131.85,47.28",
"双鸭山市,131.15,46.63",
"尖山区,131.17,46.63",
"岭东区,131.13,46.57",
"四方台区,131.33,46.58",
"宝山区,131.4,46.57",
"集贤县,131.13,46.72",
"友谊县,131.8,46.78",
"宝清县,132.2,46.32",
"饶河县,134.02,46.8",
"大庆市,125.03,46.58",
"萨尔图区,125.02,46.6",
"龙凤区,125.1,46.53",
"让胡路区,124.85,46.65",
"红岗区,124.88,46.4",
"大同区,124.82,46.03",
"肇州县,125.27,45.7",
"肇源县,125.08,45.52",
"林甸县,124.87,47.18",
"杜尔伯特蒙古族自治县,124.45,46.87",
"伊春市,128.9,47.73",
"南岔区,129.28,47.13",
"友好区,128.82,47.85",
"西林区,129.28,47.48",
"翠峦区,128.65,47.72",
"新青区,129.53,48.28",
"美溪区,129.13,47.63",
"金山屯区,129.43,47.42",
"五营区,129.25,48.12",
"乌马河区,128.78,47.72",
"汤旺河区,129.57,48.45",
"带岭区,129.02,47.02",
"乌伊岭区,129.42,48.6",
"红星区,129.38,48.23",
"上甘岭区,129.02,47.97",
"嘉荫县,130.38,48.88",
"铁力市,128.02,46.98",
"佳木斯市,130.37,46.82",
"向阳区,130.28,47.33",
"向阳区,130.33,46.8",
"前进区,130.37,46.82",
"东风区,130.4,46.82",
"郊区,130.32,46.8",
"桦南县,130.57,46.23",
"桦川县,130.72,47.02",
"汤原县,129.9,46.73",
"抚远县,134.28,48.37",
"同江市,132.52,47.65",
"富锦市,132.03,47.25",
"七台河市,130.95,45.78",
"新兴区,130.83,45.8",
"桃山区,130.97,45.77",
"茄子河区,131.07,45.77",
"勃利县,130.57,45.75",
"牡丹江市,129.6,44.58",
"东安区,129.62,44.58",
"阳明区,129.63,44.6",
"爱民区,129.58,44.58",
"西安区,129.62,44.57",
"东宁县,131.12,44.07",
"林口县,130.27,45.3",
"绥芬河市,131.15,44.42",
"海林市,129.38,44.57",
"宁安市,129.47,44.35",
"穆棱市,130.52,44.92",
"黑河市,127.48,50.25",
"爱辉区,127.48,50.25",
"逊克县,128.47,49.58",
"孙吴县,127.32,49.42",
"北安市,126.52,48.23",
"五大连池市,126.2,48.52",
"绥化市,126.98,46.63",
"北林区,126.98,46.63",
"望奎县,126.48,46.83",
"兰西县,126.28,46.27",
"青冈县,126.1,46.68",
"庆安县,127.52,46.88",
"明水县,125.9,47.18",
"绥棱县,127.1,47.25",
"安达市,125.33,46.4",
"肇东市,125.98,46.07",
"海伦市,126.97,47.47",
"大兴安岭地区,124.12,50.42",
"呼玛县,126.65,51.73",
"塔河县,124.7,52.32",
"漠河县,122.53,52.97",
"上海市,121.47,31.23",
"黄浦区,121.48,31.23",
"卢湾区,121.47,31.22",
"徐汇区,121.43,31.18",
"长宁区,121.42,31.22",
"静安区,121.45,31.23",
"普陀区,121.4,31.25",
"闸北区,121.45,31.25",
"虹口区,121.5,31.27",
"杨浦区,121.52,31.27",
"闵行区,121.38,31.12",
"宝山区,121.48,31.4",
"嘉定区,121.27,31.38",
"浦东新区,121.53,31.22",
"金山区,121.33,30.75",
"松江区,121.22,31.03",
"青浦区,121.12,31.15",
"南汇区,121.75,31.05",
"奉贤区,121.47,30.92",
"崇明县,121.4,31.62",
"南京市,118.78,32.07",
"玄武区,118.8,32.05",
"白下区,118.78,32.03",
"秦淮区,118.8,32.02",
"建邺区,118.75,32.03",
"鼓楼区,117.18,34.28",
"鼓楼区,118.77,32.07",
"下关区,118.73,32.08",
"浦口区,118.62,32.05",
"栖霞区,118.88,32.12",
"雨花台区,118.77,32",
"江宁区,118.85,31.95",
"六合区,118.83,32.35",
"溧水县,119.02,31.65",
"高淳县,118.88,31.33",
"无锡市,120.3,31.57",
"崇安区,120.3,31.58",
"南长区,120.3,31.57",
"北塘区,120.28,31.58",
"锡山区,120.35,31.6",
"惠山区,120.28,31.68",
"滨湖区,120.27,31.57",
"江阴市,120.27,31.9",
"宜兴市,119.82,31.35",
"徐州市,117.18,34.27",
"鼓楼区,117.18,34.28",
"鼓楼区,118.77,32.07",
"云龙区,117.22,34.25",
"九里区,117.13,34.3",
"贾汪区,117.45,34.45",
"泉山区,117.18,34.25",
"丰县,116.6,34.7",
"沛县,116.93,34.73",
"铜山县,117.17,34.18",
"睢宁县,117.95,33.9",
"新沂市,118.35,34.38",
"邳州市,117.95,34.32",
"常州市,119.95,31.78",
"天宁区,119.93,31.75",
"钟楼区,119.93,31.78",
"戚墅堰区,120.05,31.73",
"新北区,119.97,31.83",
"武进区,119.93,31.72",
"溧阳市,119.48,31.42",
"金坛市,119.57,31.75",
"苏州市,120.58,31.3",
"沧浪区,120.63,31.3",
"平江区,120.63,31.32",
"金阊区,120.6,31.32",
"虎丘区,120.57,31.3",
"吴中区,120.63,31.27",
"相城区,120.63,31.37",
"常熟市,120.75,31.65",
"张家港市,120.55,31.87",
"昆山市,120.98,31.38",
"吴江市,120.63,31.17",
"太仓市,121.1,31.45",
"南通市,120.88,31.98",
"崇川区,120.85,32",
"港闸区,120.8,32.03",
"海安县,120.45,32.55",
"如东县,121.18,32.32",
"启东市,121.65,31.82",
"如皋市,120.57,32.4",
"通州市,121.07,32.08",
"海门市,121.17,31.9",
"连云港市,119.22,34.6",
"连云区,119.37,34.75",
"新浦区,119.17,34.6",
"海州区,119.12,34.57",
"赣榆县,119.12,34.83",
"东海县,118.77,34.53",
"灌云县,119.25,34.3",
"灌南县,119.35,34.08",
"淮安市,119.02,33.62",
"清河区,119.02,33.6",
"楚州区,119.13,33.5",
"淮阴区,119.03,33.63",
"清浦区,119.03,33.58",
"涟水县,119.27,33.78",
"洪泽县,118.83,33.3",
"盱眙县,118.48,33",
"金湖县,119.02,33.02",
"盐城市,120.15,33.35",
"亭湖区,120.13,33.4",
"盐都区,120.15,33.33",
"响水县,119.57,34.2",
"滨海县,119.83,33.98",
"阜宁县,119.8,33.78",
"射阳县,120.25,33.78",
"建湖县,119.8,33.47",
"东台市,120.3,32.85",
"大丰市,120.47,33.2",
"扬州市,119.4,32.4",
"广陵区,119.43,32.38",
"邗江区,119.4,32.38",
"维扬区,119.4,32.42",
"宝应县,119.3,33.23",
"仪征市,119.18,32.27",
"高邮市,119.43,32.78",
"江都市,119.55,32.43",
"镇江市,119.45,32.2",
"京口区,119.47,32.2",
"润州区,119.4,32.2",
"丹徒区,119.45,32.13",
"丹阳市,119.57,32",
"扬中市,119.82,32.23",
"句容市,119.17,31.95",
"泰州市,119.92,32.45",
"兴化市,119.85,32.92",
"靖江市,120.27,32.02",
"泰兴市,120.02,32.17",
"姜堰市,120.15,32.52",
"宿迁市,118.28,33.97",
"宿城区,118.25,33.97",
"宿豫区,118.32,33.95",
"沭阳县,118.77,34.13",
"泗阳县,118.68,33.72",
"泗洪县,118.22,33.47",
"杭州市,120.15,30.28",
"上城区,120.17,30.25",
"下城区,120.17,30.28",
"江干区,120.2,30.27",
"拱墅区,120.13,30.32",
"西湖区,120.13,30.27",
"滨江区,120.2,30.2",
"萧山区,120.27,30.17",
"余杭区,120.3,30.42",
"桐庐县,119.67,29.8",
"淳安县,119.03,29.6",
"建德市,119.28,29.48",
"富阳市,119.95,30.05",
"临安市,119.72,30.23",
"宁波市,121.55,29.88",
"海曙区,121.55,29.87",
"江东区,121.57,29.87",
"江北区,121.55,29.88",
"北仑区,121.85,29.93",
"镇海区,121.72,29.95",
"鄞州区,121.53,29.83",
"象山县,121.87,29.48",
"宁海县,121.43,29.28",
"余姚市,121.15,30.03",
"慈溪市,121.23,30.17",
"奉化市,121.4,29.65",
"温州市,120.7,28",
"鹿城区,120.65,28.02",
"龙湾区,120.82,27.93",
"洞头县,121.15,27.83",
"永嘉县,120.68,28.15",
"平阳县,120.57,27.67",
"苍南县,120.4,27.5",
"文成县,120.08,27.78",
"泰顺县,119.72,27.57",
"瑞安市,120.63,27.78",
"乐清市,120.95,28.13",
"嘉兴市,120.75,30.75",
"秀洲区,120.7,30.77",
"嘉善县,120.92,30.85",
"海盐县,120.95,30.53",
"海宁市,120.68,30.53",
"平湖市,121.02,30.7",
"桐乡市,120.57,30.63",
"湖州市,120.08,30.9",
"吴兴区,120.12,30.87",
"南浔区,120.43,30.88",
"德清县,119.97,30.53",
"长兴县,119.9,31.02",
"安吉县,119.68,30.63",
"绍兴市,120.57,30",
"越城区,120.57,30",
"绍兴县,120.47,30.08",
"新昌县,120.9,29.5",
"诸暨市,120.23,29.72",
"上虞市,120.87,30.03",
"嵊州市,120.82,29.58",
"金华市,119.65,29.08",
"婺城区,119.65,29.08",
"金东区,119.7,29.08",
"武义县,119.82,28.9",
"浦江县,119.88,29.45",
"磐安县,120.43,29.05",
"兰溪市,119.45,29.22",
"义乌市,120.07,29.3",
"东阳市,120.23,29.28",
"永康市,120.03,28.9",
"衢州市,118.87,28.93",
"柯城区,118.87,28.93",
"衢江区,118.93,28.98",
"常山县,118.52,28.9",
"开化县,118.42,29.13",
"龙游县,119.17,29.03",
"江山市,118.62,28.75",
"舟山市,122.2,30",
"定海区,122.1,30.02",
"普陀区,122.3,29.95",
"岱山县,122.2,30.25",
"嵊泗县,122.45,30.73",
"台州市,121.43,28.68",
"椒江区,121.43,28.68",
"黄岩区,121.27,28.65",
"路桥区,121.38,28.58",
"玉环县,121.23,28.13",
"三门县,121.38,29.12",
"天台县,121.03,29.13",
"仙居县,120.73,28.87",
"温岭市,121.37,28.37",
"临海市,121.12,28.85",
"丽水市,119.92,28.45",
"莲都区,119.92,28.45",
"青田县,120.28,28.15",
"缙云县,120.07,28.65",
"遂昌县,119.27,28.6",
"松阳县,119.48,28.45",
"云和县,119.57,28.12",
"庆元县,119.05,27.62",
"景宁畲族自治县,119.63,27.98",
"龙泉市,119.13,28.08",
"合肥市,117.25,31.83",
"瑶海区,117.3,31.87",
"庐阳区,117.25,31.88",
"蜀山区,117.27,31.85",
"包河区,117.3,31.8",
"长丰县,117.17,32.48",
"肥东县,117.47,31.88",
"肥西县,117.17,31.72",
"芜湖市,118.38,31.33",
"镜湖区,118.37,31.35",
"鸠江区,118.38,31.37",
"芜湖县,118.57,31.15",
"繁昌县,118.2,31.08",
"南陵县,118.33,30.92",
"蚌埠市,117.38,32.92",
"龙子湖区,117.38,32.95",
"蚌山区,117.35,32.95",
"禹会区,117.33,32.93",
"淮上区,117.35,32.97",
"怀远县,117.18,32.97",
"五河县,117.88,33.15",
"固镇县,117.32,33.32",
"淮南市,117,32.63",
"大通区,117.05,32.63",
"田家庵区,117,32.67",
"谢家集区,116.85,32.6",
"八公山区,116.83,32.63",
"潘集区,116.82,32.78",
"凤台县,116.72,32.7",
"马鞍山市,118.5,31.7",
"金家庄区,118.48,31.73",
"花山区,118.5,31.72",
"雨山区,118.48,31.68",
"当涂县,118.48,31.55",
"淮北市,116.8,33.95",
"杜集区,116.82,34",
"相山区,116.8,33.95",
"烈山区,116.8,33.9",
"濉溪县,116.77,33.92",
"铜陵市,117.82,30.93",
"铜官山区,117.82,30.93",
"狮子山区,117.85,30.95",
"郊区,117.78,30.92",
"铜陵县,117.78,30.95",
"安庆市,117.05,30.53",
"迎江区,117.05,30.5",
"大观区,117.03,30.52",
"郊区,117.78,30.92",
"怀宁县,116.83,30.72",
"枞阳县,117.2,30.7",
"潜山县,116.57,30.63",
"太湖县,116.27,30.43",
"宿松县,116.12,30.15",
"望江县,116.68,30.13",
"岳西县,116.35,30.85",
"桐城市,116.95,31.05",
"黄山市,118.33,29.72",
"屯溪区,118.33,29.72",
"黄山区,118.13,30.3",
"徽州区,118.33,29.82",
"歙县,118.43,29.87",
"休宁县,118.18,29.78",
"黟县,117.93,29.93",
"祁门县,117.72,29.87",
"滁州市,118.32,32.3",
"琅琊区,118.3,32.3",
"南谯区,118.3,32.32",
"来安县,118.43,32.45",
"全椒县,118.27,32.1",
"定远县,117.67,32.53",
"凤阳县,117.57,32.87",
"天长市,119,32.7",
"明光市,117.98,32.78",
"阜阳市,115.82,32.9",
"颍州区,115.8,32.88",
"颍东区,115.85,32.92",
"颍泉区,115.8,32.93",
"临泉县,115.25,33.07",
"太和县,115.62,33.17",
"阜南县,115.58,32.63",
"颍上县,116.27,32.63",
"宿州市,116.98,33.63",
"埇桥区,116.97,33.63",
"砀山县,116.35,34.42",
"萧县,116.93,34.18",
"灵璧县,117.55,33.55",
"泗县,117.88,33.48",
"巢湖市,117.87,31.6",
"居巢区,117.85,31.6",
"庐江县,117.28,31.25",
"无为县,117.92,31.3",
"含山县,118.1,31.72",
"和县,118.37,31.72",
"六安市,116.5,31.77",
"金安区,116.5,31.77",
"裕安区,116.48,31.77",
"寿县,116.78,32.58",
"霍邱县,116.27,32.33",
"舒城县,116.93,31.47",
"金寨县,115.92,31.72",
"霍山县,116.33,31.4",
"亳州市,115.78,33.85",
"谯城区,115.77,33.88",
"涡阳县,116.22,33.52",
"蒙城县,116.57,33.27",
"利辛县,116.2,33.15",
"池州市,117.48,30.67",
"贵池区,117.48,30.65",
"东至县,117.02,30.1",
"石台县,117.48,30.22",
"青阳县,117.85,30.65",
"宣城市,118.75,30.95",
"宣州区,118.75,30.95",
"郎溪县,119.17,31.13",
"广德县,119.42,30.9",
"泾县,118.4,30.7",
"绩溪县,118.6,30.07",
"旌德县,118.53,30.28",
"宁国市,118.98,30.63",
"福州市,119.3,26.08",
"鼓楼区,119.3,26.08",
"台江区,119.3,26.07",
"仓山区,119.32,26.05",
"马尾区,119.45,26",
"晋安区,119.32,26.08",
"闽侯县,119.13,26.15",
"连江县,119.53,26.2",
"罗源县,119.55,26.48",
"闽清县,118.85,26.22",
"永泰县,118.93,25.87",
"平潭县,119.78,25.52",
"福清市,119.38,25.72",
"长乐市,119.52,25.97",
"厦门市,118.08,24.48",
"思明区,118.08,24.45",
"海沧区,117.98,24.47",
"湖里区,118.08,24.52",
"集美区,118.1,24.57",
"同安区,118.15,24.73",
"翔安区,118.23,24.62",
"莆田市,119,25.43",
"城厢区,119,25.43",
"涵江区,119.1,25.45",
"荔城区,119.02,25.43",
"秀屿区,119.08,25.32",
"仙游县,118.68,25.37",
"三明市,117.62,26.27",
"梅列区,117.63,26.27",
"三元区,117.6,26.23",
"明溪县,117.2,26.37",
"清流县,116.82,26.18",
"宁化县,116.65,26.27",
"大田县,117.85,25.7",
"尤溪县,118.18,26.17",
"沙县,117.78,26.4",
"将乐县,117.47,26.73",
"泰宁县,117.17,26.9",
"建宁县,116.83,26.83",
"永安市,117.37,25.98",
"泉州市,118.67,24.88",
"鲤城区,118.6,24.92",
"丰泽区,118.6,24.92",
"洛江区,118.67,24.95",
"泉港区,118.88,25.12",
"惠安县,118.8,25.03",
"安溪县,118.18,25.07",
"永春县,118.3,25.32",
"德化县,118.23,25.5",
"金门县,118.32,24.43",
"石狮市,118.65,24.73",
"晋江市,118.58,24.82",
"南安市,118.38,24.97",
"漳州市,117.65,24.52",
"芗城区,117.65,24.52",
"龙文区,117.72,24.52",
"云霄县,117.33,23.95",
"漳浦县,117.62,24.13",
"诏安县,117.18,23.72",
"长泰县,117.75,24.62",
"东山县,117.43,23.7",
"南靖县,117.37,24.52",
"平和县,117.3,24.37",
"华安县,117.53,25.02",
"龙海市,117.82,24.45",
"南平市,118.17,26.65",
"延平区,118.17,26.65",
"顺昌县,117.8,26.8",
"浦城县,118.53,27.92",
"光泽县,117.33,27.55",
"松溪县,118.78,27.53",
"政和县,118.85,27.37",
"邵武市,117.48,27.37",
"武夷山市,118.03,27.77",
"建瓯市,118.32,27.03",
"建阳市,118.12,27.33",
"龙岩市,117.03,25.1",
"新罗区,117.03,25.1",
"长汀县,116.35,25.83",
"永定县,116.73,24.72",
"上杭县,116.42,25.05",
"武平县,116.1,25.1",
"连城县,116.75,25.72",
"漳平市,117.42,25.3",
"宁德市,119.52,26.67",
"蕉城区,119.52,26.67",
"霞浦县,120,26.88",
"古田县,118.75,26.58",
"屏南县,118.98,26.92",
"寿宁县,119.5,27.47",
"周宁县,119.33,27.12",
"柘荣县,119.9,27.23",
"福安市,119.65,27.08",
"福鼎市,120.22,27.33",
"南昌市,115.85,28.68",
"东湖区,115.9,28.68",
"西湖区,115.87,28.67",
"青云谱区,115.92,28.63",
"湾里区,115.73,28.72",
"青山湖区,115.95,28.68",
"南昌县,115.93,28.55",
"新建县,115.82,28.7",
"安义县,115.55,28.85",
"进贤县,116.27,28.37",
"景德镇市,117.17,29.27",
"昌江区,117.17,29.27",
"珠山区,117.2,29.3",
"浮梁县,117.25,29.37",
"乐平市,117.12,28.97",
"萍乡市,113.85,27.63",
"安源区,113.87,27.65",
"湘东区,113.73,27.65",
"莲花县,113.95,27.13",
"上栗县,113.8,27.88",
"芦溪县,114.03,27.63",
"九江市,116,29.7",
"庐山区,115.98,29.68",
"浔阳区,115.98,29.73",
"九江县,115.88,29.62",
"武宁县,115.1,29.27",
"修水县,114.57,29.03",
"永修县,115.8,29.03",
"德安县,115.77,29.33",
"星子县,116.03,29.45",
"都昌县,116.18,29.27",
"湖口县,116.22,29.73",
"彭泽县,116.55,29.9",
"瑞昌市,115.67,29.68",
"新余市,114.92,27.82",
"渝水区,114.93,27.8",
"分宜县,114.67,27.82",
"鹰潭市,117.07,28.27",
"月湖区,117.05,28.23",
"余江县,116.82,28.2",
"贵溪市,117.22,28.28",
"赣州市,114.93,25.83",
"章贡区,114.93,25.87",
"赣县,115,25.87",
"信丰县,114.93,25.38",
"大余县,114.35,25.4",
"上犹县,114.53,25.8",
"崇义县,114.3,25.7",
"安远县,115.38,25.13",
"龙南县,114.78,24.92",
"定南县,115.03,24.78",
"全南县,114.52,24.75",
"宁都县,116.02,26.48",
"于都县,115.42,25.95",
"兴国县,115.35,26.33",
"会昌县,115.78,25.6",
"寻乌县,115.65,24.95",
"石城县,116.33,26.33",
"瑞金市,116.03,25.88",
"南康市,114.75,25.65",
"吉安市,114.98,27.12",
"吉州区,114.98,27.12",
"青原区,115,27.1",
"吉安县,114.9,27.05",
"吉水县,115.13,27.22",
"峡江县,115.33,27.62",
"新干县,115.4,27.77",
"永丰县,115.43,27.32",
"泰和县,114.88,26.8",
"遂川县,114.52,26.33",
"万安县,114.78,26.47",
"安福县,114.62,27.38",
"永新县,114.23,26.95",
"井冈山市,114.27,26.72",
"宜春市,114.38,27.8",
"袁州区,114.38,27.8",
"奉新县,115.38,28.7",
"万载县,114.43,28.12",
"上高县,114.92,28.23",
"宜丰县,114.78,28.38",
"靖安县,115.35,28.87",
"铜鼓县,114.37,28.53",
"丰城市,115.78,28.2",
"樟树市,115.53,28.07",
"高安市,115.37,28.42",
"抚州市,116.35,28",
"临川区,116.35,27.98",
"南城县,116.63,27.55",
"黎川县,116.92,27.3",
"南丰县,116.53,27.22",
"崇仁县,116.05,27.77",
"乐安县,115.83,27.43",
"宜黄县,116.22,27.55",
"金溪县,116.77,27.92",
"资溪县,117.07,27.7",
"东乡县,116.62,28.23",
"广昌县,116.32,26.83",
"上饶市,117.97,28.45",
"信州区,117.95,28.43",
"上饶县,117.92,28.43",
"广丰县,118.18,28.43",
"玉山县,118.25,28.68",
"铅山县,117.7,28.32",
"横峰县,117.6,28.42",
"弋阳县,117.43,28.4",
"余干县,116.68,28.7",
"鄱阳县,116.67,29",
"万年县,117.07,28.7",
"婺源县,117.85,29.25",
"德兴市,117.57,28.95",
"济南市,116.98,36.67",
"历下区,117.08,36.67",
"市中区,117,36.65",
"市中区,116.58,35.4",
"市中区,117.57,34.87",
"槐荫区,116.93,36.65",
"天桥区,116.98,36.68",
"历城区,117.07,36.68",
"长清区,116.73,36.55",
"平阴县,116.45,36.28",
"济阳县,117.22,36.98",
"商河县,117.15,37.32",
"章丘市,117.53,36.72",
"青岛市,120.38,36.07",
"市南区,120.38,36.07",
"市北区,120.38,36.08",
"四方区,120.35,36.1",
"黄岛区,120.18,35.97",
"崂山区,120.47,36.1",
"李沧区,120.43,36.15",
"城阳区,120.37,36.3",
"胶州市,120.03,36.27",
"即墨市,120.45,36.38",
"平度市,119.95,36.78",
"胶南市,120.03,35.87",
"莱西市,120.5,36.87",
"淄博市,118.05,36.82",
"张店区,118.03,36.82",
"博山区,117.85,36.5",
"临淄区,118.3,36.82",
"周村区,117.87,36.8",
"桓台县,118.08,36.97",
"高青县,117.82,37.17",
"沂源县,118.17,36.18",
"枣庄市,117.32,34.82",
"市中区,117,36.65",
"市中区,116.58,35.4",
"市中区,117.57,34.87",
"薛城区,117.25,34.8",
"峄城区,117.58,34.77",
"台儿庄区,117.73,34.57",
"山亭区,117.45,35.08",
"滕州市,117.15,35.08",
"东营市,118.67,37.43",
"东营区,118.5,37.47",
"河口区,118.53,37.88",
"垦利县,118.55,37.58",
"利津县,118.25,37.48",
"广饶县,118.4,37.07",
"烟台市,121.43,37.45",
"芝罘区,121.38,37.53",
"福山区,121.25,37.5",
"牟平区,121.6,37.38",
"莱山区,121.43,37.5",
"长岛县,120.73,37.92",
"龙口市,120.52,37.65",
"莱阳市,120.7,36.98",
"莱州市,119.93,37.18",
"蓬莱市,120.75,37.82",
"招远市,120.4,37.37",
"栖霞市,120.83,37.3",
"海阳市,121.15,36.78",
"潍坊市,119.15,36.7",
"潍城区,119.1,36.72",
"寒亭区,119.22,36.77",
"坊子区,119.17,36.67",
"奎文区,119.12,36.72",
"临朐县,118.53,36.52",
"昌乐县,118.82,36.7",
"青州市,118.47,36.68",
"诸城市,119.4,36",
"寿光市,118.73,36.88",
"安丘市,119.2,36.43",
"高密市,119.75,36.38",
"昌邑市,119.4,36.87",
"济宁市,116.58,35.42",
"市中区,117,36.65",
"市中区,116.58,35.4",
"市中区,117.57,34.87",
"任城区,116.58,35.42",
"微山县,117.13,34.82",
"鱼台县,116.65,35",
"金乡县,116.3,35.07",
"嘉祥县,116.33,35.42",
"汶上县,116.48,35.73",
"泗水县,117.27,35.67",
"梁山县,116.08,35.8",
"曲阜市,116.98,35.58",
"兖州市,116.83,35.55",
"邹城市,116.97,35.4",
"泰安市,117.08,36.2",
"泰山区,117.13,36.18",
"岱岳区,117,36.18",
"宁阳县,116.8,35.77",
"东平县,116.47,35.93",
"新泰市,117.77,35.92",
"肥城市,116.77,36.18",
"威海市,122.12,37.52",
"环翠区,122.12,37.5",
"文登市,122.05,37.2",
"荣成市,122.42,37.17",
"乳山市,121.53,36.92",
"日照市,119.52,35.42",
"东港区,119.45,35.42",
"岚山区,119.33,35.1",
"五莲县,119.2,35.75",
"莒县,118.83,35.58",
"莱芜市,117.67,36.22",
"莱城区,117.65,36.2",
"钢城区,117.8,36.07",
"临沂市,118.35,35.05",
"兰山区,118.33,35.07",
"罗庄区,118.28,34.98",
"河东区,118.4,35.08",
"沂南县,118.47,35.55",
"郯城县,118.35,34.62",
"沂水县,118.62,35.78",
"苍山县,118.05,34.85",
"费县,117.97,35.27",
"平邑县,117.63,35.5",
"莒南县,118.83,35.18",
"蒙阴县,117.93,35.72",
"临沭县,118.65,34.92",
"德州市,116.3,37.45",
"德城区,116.3,37.45",
"陵县,116.57,37.33",
"宁津县,116.78,37.65",
"庆云县,117.38,37.78",
"临邑县,116.87,37.18",
"齐河县,116.75,36.8",
"平原县,116.43,37.17",
"夏津县,116,36.95",
"武城县,116.07,37.22",
"乐陵市,117.23,37.73",
"禹城市,116.63,36.93",
"聊城市,115.98,36.45",
"东昌府区,115.98,36.45",
"阳谷县,115.78,36.12",
"莘县,115.67,36.23",
"茌平县,116.25,36.58",
"东阿县,116.25,36.33",
"冠县,115.43,36.48",
"高唐县,116.23,36.87",
"临清市,115.7,36.85",
"滨州市,117.97,37.38",
"滨城区,118,37.38",
"惠民县,117.5,37.48",
"阳信县,117.58,37.63",
"无棣县,117.6,37.73",
"沾化县,118.13,37.7",
"博兴县,118.13,37.15",
"邹平县,117.73,36.88",
"牡丹区,115.43,35.25",
"曹县,115.53,34.83",
"单县,116.08,34.8",
"成武县,115.88,34.95",
"巨野县,116.08,35.4",
"郓城县,115.93,35.6",
"鄄城县,115.5,35.57",
"定陶县,115.57,35.07",
"东明县,115.08,35.28",
"郑州市,113.62,34.75",
"中原区,113.6,34.75",
"二七区,113.65,34.73",
"管城回族区,113.67,34.75",
"金水区,113.65,34.78",
"上街区,113.28,34.82",
"惠济区,113.6,34.87",
"中牟县,113.97,34.72",
"巩义市,112.98,34.77",
"荥阳市,113.4,34.78",
"新密市,113.38,34.53",
"新郑市,113.73,34.4",
"登封市,113.03,34.47",
"开封市,114.3,34.8",
"龙亭区,114.35,34.8",
"顺河回族区,114.35,34.8",
"鼓楼区,114.35,34.78",
"杞县,114.78,34.55",
"通许县,114.47,34.48",
"尉氏县,114.18,34.42",
"开封县,114.43,34.77",
"兰考县,114.82,34.82",
"洛阳市,112.45,34.62",
"老城区,112.47,34.68",
"西工区,112.43,34.67",
"涧西区,112.4,34.67",
"吉利区,112.58,34.9",
"洛龙区,112.45,34.62",
"孟津县,112.43,34.83",
"新安县,112.15,34.72",
"栾川县,111.62,33.78",
"嵩县,112.1,34.15",
"汝阳县,112.47,34.15",
"宜阳县,112.17,34.52",
"洛宁县,111.65,34.38",
"伊川县,112.42,34.42",
"偃师市,112.78,34.73",
"平顶山市,113.18,33.77",
"新华区,113.3,33.73",
"卫东区,113.33,33.73",
"石龙区,112.88,33.9",
"湛河区,113.28,33.73",
"宝丰县,113.07,33.88",
"叶县,113.35,33.62",
"鲁山县,112.9,33.73",
"郏县,113.22,33.97",
"舞钢市,113.52,33.3",
"汝州市,112.83,34.17",
"安阳市,114.38,36.1",
"文峰区,114.35,36.08",
"北关区,114.35,36.12",
"殷都区,114.3,36.12",
"龙安区,114.32,36.1",
"安阳县,114.35,36.1",
"汤阴县,114.35,35.92",
"滑县,114.52,35.58",
"内黄县,114.9,35.95",
"林州市,113.82,36.07",
"鹤壁市,114.28,35.75",
"鹤山区,114.15,35.95",
"山城区,114.18,35.9",
"淇滨区,114.3,35.73",
"浚县,114.55,35.67",
"淇县,114.2,35.6",
"新乡市,113.9,35.3",
"红旗区,113.87,35.3",
"卫滨区,113.85,35.3",
"凤泉区,113.92,35.38",
"牧野区,113.9,35.32",
"新乡县,113.8,35.2",
"获嘉县,113.65,35.27",
"原阳县,113.97,35.05",
"延津县,114.2,35.15",
"封丘县,114.42,35.05",
"长垣县,114.68,35.2",
"卫辉市,114.07,35.4",
"辉县市,113.8,35.47",
"焦作市,113.25,35.22",
"解放区,113.22,35.25",
"中站区,113.17,35.23",
"马村区,113.32,35.27",
"山阳区,113.25,35.22",
"修武县,113.43,35.23",
"博爱县,113.07,35.17",
"武陟县,113.38,35.1",
"温县,113.08,34.93",
"济源市,112.58,35.07",
"沁阳市,112.93,35.08",
"孟州市,112.78,34.9",
"濮阳市,115.03,35.77",
"华龙区,115.07,35.78",
"清丰县,115.12,35.9",
"南乐县,115.2,36.08",
"范县,115.5,35.87",
"台前县,115.85,36",
"濮阳县,115.02,35.7",
"许昌市,113.85,34.03",
"魏都区,113.82,34.03",
"许昌县,113.83,34",
"鄢陵县,114.2,34.1",
"襄城县,113.48,33.85",
"禹州市,113.47,34.17",
"长葛市,113.77,34.22",
"漯河市,114.02,33.58",
"郾城区,114,33.58",
"召陵区,114.07,33.57",
"舞阳县,113.6,33.43",
"临颍县,113.93,33.82",
"三门峡市,111.2,34.78",
"湖滨区,111.2,34.78",
"渑池县,111.75,34.77",
"陕县,111.08,34.7",
"卢氏县,111.05,34.05",
"义马市,111.87,34.75",
"灵宝市,110.87,34.52",
"南阳市,112.52,33",
"宛城区,112.55,33.02",
"卧龙区,112.53,32.98",
"南召县,112.43,33.5",
"方城县,113,33.27",
"西峡县,111.48,33.28",
"镇平县,112.23,33.03",
"内乡县,111.85,33.05",
"淅川县,111.48,33.13",
"社旗县,112.93,33.05",
"唐河县,112.83,32.7",
"新野县,112.35,32.52",
"桐柏县,113.4,32.37",
"邓州市,112.08,32.68",
"商丘市,115.65,34.45",
"梁园区,115.63,34.45",
"睢阳区,115.63,34.38",
"民权县,115.13,34.65",
"睢县,115.07,34.45",
"宁陵县,115.32,34.45",
"柘城县,115.3,34.07",
"虞城县,115.85,34.4",
"夏邑县,116.13,34.23",
"永城市,116.43,33.92",
"信阳市,114.07,32.13",
"浉河区,114.05,32.12",
"平桥区,114.12,32.1",
"罗山县,114.53,32.2",
"光山县,114.9,32.02",
"新县,114.87,31.63",
"商城县,115.4,31.8",
"固始县,115.68,32.18",
"潢川县,115.03,32.13",
"淮滨县,115.4,32.43",
"息县,114.73,32.35",
"周口市,114.65,33.62",
"扶沟县,114.38,34.07",
"西华县,114.53,33.8",
"商水县,114.6,33.53",
"沈丘县,115.07,33.4",
"郸城县,115.2,33.65",
"淮阳县,114.88,33.73",
"太康县,114.85,34.07",
"鹿邑县,115.48,33.87",
"项城市,114.9,33.45",
"驻马店市,114.02,32.98",
"驿城区,114.05,32.97",
"西平县,114.02,33.38",
"上蔡县,114.27,33.27",
"平舆县,114.63,32.97",
"正阳县,114.38,32.6",
"确山县,114.02,32.8",
"泌阳县,113.32,32.72",
"汝南县,114.35,33",
"遂平县,114,33.15",
"新蔡县,114.98,32.75",
"武汉市,114.3,30.6",
"江岸区,114.3,30.6",
"江汉区,114.27,30.6",
"硚口区,114.27,30.57",
"汉阳区,114.27,30.55",
"武昌区,114.3,30.57",
"青山区,114.38,30.63",
"洪山区,114.33,30.5",
"东西湖区,114.13,30.62",
"汉南区,114.08,30.32",
"蔡甸区,114.03,30.58",
"江夏区,114.32,30.35",
"黄陂区,114.37,30.87",
"新洲区,114.8,30.85",
"黄石市,115.03,30.2",
"黄石港区,115.07,30.23",
"西塞山区,115.12,30.2",
"下陆区,114.97,30.18",
"铁山区,114.9,30.2",
"阳新县,115.2,29.85",
"大冶市,114.97,30.1",
"十堰市,110.78,32.65",
"茅箭区,110.82,32.6",
"张湾区,110.78,32.65",
"郧县,110.82,32.83",
"郧西县,110.42,33",
"竹山县,110.23,32.23",
"竹溪县,109.72,32.32",
"房县,110.73,32.07",
"丹江口市,111.52,32.55",
"宜昌市,111.28,30.7",
"西陵区,111.27,30.7",
"伍家岗区,111.35,30.65",
"点军区,111.27,30.7",
"猇亭区,111.42,30.53",
"夷陵区,111.32,30.77",
"远安县,111.63,31.07",
"兴山县,110.75,31.35",
"秭归县,110.98,30.83",
"长阳土家族自治县,111.18,30.47",
"五峰土家族自治县,110.67,30.2",
"宜都市,111.45,30.4",
"当阳市,111.78,30.82",
"枝江市,111.77,30.43",
"襄樊市,112.15,32.02",
"襄城区,112.15,32.02",
"樊城区,112.13,32.03",
"襄阳区,112.2,32.08",
"南漳县,111.83,31.78",
"谷城县,111.65,32.27",
"保康县,111.25,31.88",
"老河口市,111.67,32.38",
"枣阳市,112.75,32.13",
"宜城市,112.25,31.72",
"鄂州市,114.88,30.4",
"梁子湖区,114.67,30.08",
"华容区,114.73,30.53",
"鄂城区,114.88,30.4",
"荆门市,112.2,31.03",
"东宝区,112.2,31.05",
"掇刀区,112.2,30.98",
"京山县,113.1,31.02",
"沙洋县,112.58,30.7",
"钟祥市,112.58,31.17",
"孝感市,113.92,30.93",
"孝南区,113.92,30.92",
"孝昌县,113.97,31.25",
"大悟县,114.12,31.57",
"云梦县,113.75,31.02",
"应城市,113.57,30.95",
"安陆市,113.68,31.27",
"汉川市,113.83,30.65",
"荆州市,112.23,30.33",
"沙市区,112.25,30.32",
"荆州区,112.18,30.35",
"公安县,112.23,30.07",
"监利县,112.88,29.82",
"江陵县,112.42,30.03",
"石首市,112.4,29.73",
"洪湖市,113.45,29.8",
"松滋市,111.77,30.18",
"黄冈市,114.87,30.45",
"黄州区,114.88,30.43",
"团风县,114.87,30.63",
"红安县,114.62,31.28",
"罗田县,115.4,30.78",
"英山县,115.67,30.75",
"浠水县,115.27,30.45",
"蕲春县,115.43,30.23",
"黄梅县,115.93,30.08",
"麻城市,115.03,31.18",
"武穴市,115.55,29.85",
"咸宁市,114.32,29.85",
"咸安区,114.3,29.87",
"嘉鱼县,113.9,29.98",
"通城县,113.82,29.25",
"崇阳县,114.03,29.55",
"通山县,114.52,29.6",
"赤壁市,113.88,29.72",
"随州市,113.37,31.72",
"曾都区,113.37,31.72",
"广水市,113.82,31.62",
"恩施土家族苗族自治州,109.47,30.3",
"恩施市,109.47,30.3",
"利川市,108.93,30.3",
"建始县,109.73,30.6",
"巴东县,110.33,31.05",
"宣恩县,109.48,29.98",
"咸丰县,109.15,29.68",
"来凤县,109.4,29.52",
"鹤峰县,110.03,29.9",
"仙桃市,113.45,30.37",
"潜江市,112.88,30.42",
"天门市,113.17,30.67",
"神农架林区,110.67,31.75",
"长沙市,112.93,28.23",
"芙蓉区,113.03,28.18",
"天心区,112.98,28.12",
"岳麓区,112.93,28.23",
"开福区,112.98,28.25",
"雨花区,113.03,28.13",
"长沙县,113.07,28.25",
"望城县,112.82,28.37",
"宁乡县,112.55,28.25",
"浏阳市,113.63,28.15",
"株洲市,113.13,27.83",
"荷塘区,113.17,27.87",
"芦淞区,113.15,27.83",
"石峰区,113.1,27.87",
"天元区,113.12,27.83",
"株洲县,113.13,27.72",
"攸县,113.33,27",
"茶陵县,113.53,26.8",
"炎陵县,113.77,26.48",
"醴陵市,113.48,27.67",
"湘潭市,112.93,27.83",
"雨湖区,112.9,27.87",
"岳塘区,112.95,27.87",
"湘潭县,112.95,27.78",
"湘乡市,112.53,27.73",
"韶山市,112.52,27.93",
"衡阳市,112.57,26.9",
"珠晖区,112.62,26.9",
"雁峰区,112.6,26.88",
"石鼓区,112.6,26.9",
"蒸湘区,112.6,26.9",
"南岳区,112.73,27.25",
"衡阳县,112.37,26.97",
"衡南县,112.67,26.73",
"衡山县,112.87,27.23",
"衡东县,112.95,27.08",
"祁东县,112.12,26.78",
"耒阳市,112.85,26.42",
"常宁市,112.38,26.42",
"邵阳市,111.47,27.25",
"双清区,111.47,27.23",
"大祥区,111.45,27.23",
"北塔区,111.45,27.25",
"邵东县,111.75,27.25",
"新邵县,111.45,27.32",
"邵阳县,111.27,27",
"隆回县,111.03,27.12",
"洞口县,110.57,27.05",
"绥宁县,110.15,26.58",
"新宁县,110.85,26.43",
"城步苗族自治县,110.32,26.37",
"武冈市,110.63,26.73",
"岳阳市,113.12,29.37",
"岳阳楼区,113.1,29.37",
"云溪区,113.3,29.47",
"君山区,113,29.43",
"岳阳县,113.12,29.15",
"华容县,112.57,29.52",
"湘阴县,112.88,28.68",
"平江县,113.58,28.72",
"汨罗市,113.08,28.8",
"临湘市,113.47,29.48",
"常德市,111.68,29.05",
"武陵区,111.68,29.03",
"鼎城区,111.68,29.02",
"安乡县,112.17,29.42",
"汉寿县,111.97,28.9",
"澧县,111.75,29.63",
"临澧县,111.65,29.45",
"桃源县,111.48,28.9",
"石门县,111.38,29.58",
"津市市,111.88,29.62",
"张家界市,110.47,29.13",
"永定区,110.48,29.13",
"武陵源区,110.53,29.35",
"慈利县,111.12,29.42",
"桑植县,110.15,29.4",
"益阳市,112.32,28.6",
"资阳区,112.32,28.6",
"赫山区,112.37,28.6",
"南县,112.4,29.38",
"桃江县,112.12,28.53",
"安化县,111.22,28.38",
"沅江市,112.38,28.85",
"郴州市,113.02,25.78",
"北湖区,113.02,25.8",
"苏仙区,113.03,25.8",
"桂阳县,112.73,25.73",
"宜章县,112.95,25.4",
"永兴县,113.1,26.13",
"嘉禾县,112.37,25.58",
"临武县,112.55,25.28",
"汝城县,113.68,25.55",
"桂东县,113.93,26.08",
"安仁县,113.27,26.7",
"资兴市,113.23,25.98",
"永州市,111.62,26.43",
"冷水滩区,111.6,26.43",
"祁阳县,111.85,26.58",
"东安县,111.28,26.4",
"双牌县,111.65,25.97",
"道县,111.58,25.53",
"江永县,111.33,25.28",
"宁远县,111.93,25.6",
"蓝山县,112.18,25.37",
"新田县,112.22,25.92",
"江华瑶族自治县,111.58,25.18",
"怀化市,110,27.57",
"鹤城区,109.95,27.55",
"中方县,109.93,27.4",
"沅陵县,110.38,28.47",
"辰溪县,110.18,28",
"溆浦县,110.58,27.92",
"会同县,109.72,26.87",
"麻阳苗族自治县,109.8,27.87",
"新晃侗族自治县,109.17,27.37",
"芷江侗族自治县,109.68,27.45",
"靖州苗族侗族自治县,109.68,26.58",
"通道侗族自治县,109.78,26.17",
"洪江市,109.82,27.2",
"娄底市,112,27.73",
"娄星区,112,27.73",
"双峰县,112.2,27.45",
"新化县,111.3,27.75",
"冷水江市,111.43,27.68",
"涟源市,111.67,27.7",
"湘西土家族苗族自治州,109.73,28.32",
"吉首市,109.73,28.32",
"泸溪县,110.22,28.22",
"凤凰县,109.6,27.95",
"花垣县,109.48,28.58",
"保靖县,109.65,28.72",
"古丈县,109.95,28.62",
"永顺县,109.85,29",
"龙山县,109.43,29.47",
"广州市,113.27,23.13",
"荔湾区,113.23,23.13",
"越秀区,113.27,23.13",
"海珠区,113.25,23.1",
"天河区,113.35,23.12",
"白云区,113.27,23.17",
"黄埔区,113.45,23.1",
"番禺区,113.35,22.95",
"花都区,113.22,23.4",
"增城市,113.83,23.3",
"从化市,113.58,23.55",
"韶关市,113.6,24.82",
"武江区,113.57,24.8",
"浈江区,113.6,24.8",
"曲江区,113.6,24.68",
"始兴县,114.07,24.95",
"仁化县,113.75,25.08",
"翁源县,114.13,24.35",
"乳源瑶族自治县,113.27,24.78",
"新丰县,114.2,24.07",
"乐昌市,113.35,25.13",
"南雄市,114.3,25.12",
"深圳市,114.05,22.55",
"罗湖区,114.12,22.55",
"福田区,114.05,22.53",
"南山区,113.92,22.52",
"宝安区,113.9,22.57",
"龙岗区,114.27,22.73",
"盐田区,114.22,22.55",
"珠海市,113.57,22.27",
"香洲区,113.55,22.27",
"斗门区,113.28,22.22",
"金湾区,113.4,22.07",
"汕头市,116.68,23.35",
"龙湖区,116.72,23.37",
"金平区,116.7,23.37",
"潮阳区,116.6,23.27",
"潮南区,116.43,23.25",
"澄海区,116.77,23.48",
"南澳县,117.02,23.42",
"佛山市,113.12,23.02",
"南海区,113.15,23.03",
"顺德区,113.3,22.8",
"三水区,112.87,23.17",
"高明区,112.88,22.9",
"江门市,113.08,22.58",
"新会区,113.03,22.47",
"台山市,112.78,22.25",
"开平市,112.67,22.38",
"鹤山市,112.97,22.77",
"恩平市,112.3,22.18",
"湛江市,110.35,21.27",
"赤坎区,110.37,21.27",
"霞山区,110.4,21.2",
"坡头区,110.47,21.23",
"麻章区,110.32,21.27",
"遂溪县,110.25,21.38",
"徐闻县,110.17,20.33",
"廉江市,110.27,21.62",
"雷州市,110.08,20.92",
"吴川市,110.77,21.43",
"茂名市,110.92,21.67",
"茂南区,110.92,21.63",
"茂港区,111.02,21.47",
"电白县,111,21.5",
"高州市,110.85,21.92",
"化州市,110.63,21.67",
"信宜市,110.95,22.35",
"肇庆市,112.47,23.05",
"端州区,112.48,23.05",
"鼎湖区,112.57,23.17",
"广宁县,112.43,23.63",
"怀集县,112.18,23.92",
"封开县,111.5,23.43",
"德庆县,111.77,23.15",
"高要市,112.45,23.03",
"四会市,112.68,23.33",
"惠州市,114.42,23.12",
"惠城区,114.4,23.08",
"惠阳区,114.47,22.8",
"博罗县,114.28,23.18",
"惠东县,114.72,22.98",
"龙门县,114.25,23.73",
"梅州市,116.12,24.28",
"梅江区,116.12,24.32",
"梅县,116.05,24.28",
"大埔县,116.7,24.35",
"丰顺县,116.18,23.77",
"五华县,115.77,23.93",
"平远县,115.88,24.57",
"蕉岭县,116.17,24.67",
"兴宁市,115.73,24.15",
"汕尾市,115.37,22.78",
"海丰县,115.33,22.97",
"陆河县,115.65,23.3",
"陆丰市,115.65,22.95",
"河源市,114.7,23.73",
"源城区,114.7,23.73",
"紫金县,115.18,23.63",
"龙川县,115.25,24.1",
"连平县,114.48,24.37",
"和平县,114.93,24.45",
"东源县,114.77,23.82",
"阳江市,111.98,21.87",
"江城区,111.95,21.87",
"阳西县,111.62,21.75",
"阳东县,112.02,21.88",
"阳春市,111.78,22.18",
"清远市,113.03,23.7",
"清城区,113.02,23.7",
"佛冈县,113.53,23.88",
"阳山县,112.63,24.48",
"连山壮族瑶族自治县,112.08,24.57",
"连南瑶族自治县,112.28,24.72",
"清新县,112.98,23.73",
"英德市,113.4,24.18",
"连州市,112.38,24.78",
"东莞市,113.75,23.05",
"中山市,113.38,22.52",
"潮州市,116.62,23.67",
"湘桥区,116.63,23.68",
"潮安县,116.68,23.45",
"饶平县,117,23.67",
"揭阳市,116.37,23.55",
"揭东县,116.42,23.57",
"揭西县,115.83,23.43",
"惠来县,116.28,23.03",
"普宁市,116.18,23.3",
"云浮市,112.03,22.92",
"云城区,112.03,22.93",
"新兴县,112.23,22.7",
"郁南县,111.53,23.23",
"云安县,112,23.08",
"罗定市,111.57,22.77",
"南宁市,108.37,22.82",
"兴宁区,108.38,22.87",
"江南区,108.28,22.78",
"西乡塘区,108.3,22.83",
"良庆区,108.32,22.77",
"邕宁区,108.48,22.75",
"武鸣县,108.27,23.17",
"隆安县,107.68,23.18",
"马山县,108.17,23.72",
"上林县,108.6,23.43",
"宾阳县,108.8,23.22",
"横县,109.27,22.68",
"柳州市,109.42,24.33",
"柳南区,109.38,24.35",
"柳江县,109.33,24.27",
"柳城县,109.23,24.65",
"鹿寨县,109.73,24.48",
"融安县,109.4,25.23",
"融水苗族自治县,109.25,25.07",
"三江侗族自治县,109.6,25.78",
"桂林市,110.28,25.28",
"阳朔县,110.48,24.78",
"临桂县,110.2,25.23",
"灵川县,110.32,25.42",
"全州县,111.07,25.93",
"兴安县,110.67,25.62",
"永福县,109.98,24.98",
"灌阳县,111.15,25.48",
"龙胜各族自治县,110,25.8",
"资源县,110.63,26.03",
"平乐县,110.63,24.63",
"恭城瑶族自治县,110.83,24.83",
"梧州市,111.27,23.48",
"苍梧县,111.23,23.42",
"藤县,110.92,23.38",
"蒙山县,110.52,24.2",
"岑溪市,110.98,22.92",
"北海市,109.12,21.48",
"铁山港区,109.43,21.53",
"合浦县,109.2,21.67",
"防城港市,108.35,21.7",
"港口区,108.37,21.65",
"防城区,108.35,21.77",
"上思县,107.98,22.15",
"东兴市,107.97,21.53",
"钦州市,108.62,21.95",
"钦北区,108.63,21.98",
"灵山县,109.3,22.43",
"浦北县,109.55,22.27",
"贵港市,109.6,23.1",
"覃塘区,109.42,23.13",
"平南县,110.38,23.55",
"桂平市,110.08,23.4",
"玉林市,110.17,22.63",
"容县,110.55,22.87",
"陆川县,110.27,22.33",
"博白县,109.97,22.28",
"兴业县,109.87,22.75",
"北流市,110.35,22.72",
"百色市,106.62,23.9",
"田阳县,106.92,23.73",
"田东县,107.12,23.6",
"平果县,107.58,23.32",
"德保县,106.62,23.33",
"靖西县,106.42,23.13",
"那坡县,105.83,23.42",
"凌云县,106.57,24.35",
"乐业县,106.55,24.78",
"田林县,106.23,24.3",
"西林县,105.1,24.5",
"隆林各族自治县,105.33,24.77",
"贺州市,111.55,24.42",
"昭平县,110.8,24.17",
"钟山县,111.3,24.53",
"富川瑶族自治县,111.27,24.83",
"河池市,108.07,24.7",
"金城江区,108.05,24.7",
"南丹县,107.53,24.98",
"天峨县,107.17,25",
"凤山县,107.05,24.55",
"东兰县,107.37,24.52",
"罗城仫佬族自治县,108.9,24.78",
"环江毛南族自治县,108.25,24.83",
"巴马瑶族自治县,107.25,24.15",
"都安瑶族自治县,108.1,23.93",
"大化瑶族自治县,107.98,23.73",
"宜州市,108.67,24.5",
"来宾市,109.23,23.73",
"忻城县,108.67,24.07",
"象州县,109.68,23.97",
"武宣县,109.67,23.6",
"金秀瑶族自治县,110.18,24.13",
"合山市,108.87,23.82",
"崇左市,107.37,22.4",
"扶绥县,107.9,22.63",
"宁明县,107.07,22.13",
"龙州县,106.85,22.35",
"大新县,107.2,22.83",
"天等县,107.13,23.08",
"凭祥市,106.75,22.12",
"海口市,110.32,20.03",
"秀英区,110.28,20.02",
"龙华区,110.3,20.03",
"琼山区,110.35,20",
"美兰区,110.37,20.03",
"三亚市,109.5,18.25",
"五指山市,109.52,18.78",
"琼海市,110.47,19.25",
"儋州市,109.57,19.52",
"文昌市,110.8,19.55",
"万宁市,110.4,18.8",
"东方市,108.63,19.1",
"定安县,110.32,19.7",
"屯昌县,110.1,19.37",
"澄迈县,110,19.73",
"临高县,109.68,19.92",
"白沙黎族自治县,109.45,19.23",
"昌江黎族自治县,109.05,19.25",
"乐东黎族自治县,109.17,18.75",
"陵水黎族自治县,110.03,18.5",
"保亭黎族苗族自治县,109.7,18.63",
"琼中黎族苗族自治县,109.83,19.03",
"重庆市,106.55,29.57",
"万州区,108.4,30.82",
"涪陵区,107.4,29.72",
"渝中区,106.57,29.55",
"大渡口区,106.48,29.48",
"江北区,106.57,29.6",
"沙坪坝区,106.45,29.53",
"九龙坡区,106.5,29.5",
"南岸区,106.57,29.52",
"北碚区,106.4,29.8",
"万盛区,106.92,28.97",
"双桥区,105.78,29.48",
"渝北区,106.63,29.72",
"巴南区,106.52,29.38",
"黔江区,108.77,29.53",
"长寿区,107.08,29.87",
"綦江县,106.65,29.03",
"潼南县,105.83,30.18",
"铜梁县,106.05,29.85",
"大足县,105.72,29.7",
"荣昌县,105.58,29.4",
"璧山县,106.22,29.6",
"梁平县,107.8,30.68",
"城口县,108.67,31.95",
"丰都县,107.73,29.87",
"垫江县,107.35,30.33",
"武隆县,107.75,29.33",
"忠县,108.02,30.3",
"开县,108.42,31.18",
"云阳县,108.67,30.95",
"奉节县,109.47,31.02",
"巫山县,109.88,31.08",
"巫溪县,109.63,31.4",
"石柱土家族自治县,108.12,30",
"秀山土家族苗族自治县,108.98,28.45",
"酉阳土家族苗族自治县,108.77,28.85",
"彭水苗族土家族自治县,108.17,29.3",
"成都市,104.07,30.67",
"锦江区,104.08,30.67",
"青羊区,104.05,30.68",
"金牛区,104.05,30.7",
"武侯区,104.05,30.65",
"成华区,104.1,30.67",
"龙泉驿区,104.27,30.57",
"青白江区,104.23,30.88",
"新都区,104.15,30.83",
"温江区,103.83,30.7",
"金堂县,104.43,30.85",
"双流县,103.92,30.58",
"郫县,103.88,30.82",
"大邑县,103.52,30.58",
"蒲江县,103.5,30.2",
"新津县,103.82,30.42",
"都江堰市,103.62,31",
"彭州市,103.93,30.98",
"邛崃市,103.47,30.42",
"崇州市,103.67,30.63",
"自贡市,104.78,29.35",
"自流井区,104.77,29.35",
"贡井区,104.72,29.35",
"大安区,104.77,29.37",
"沿滩区,104.87,29.27",
"荣县,104.42,29.47",
"富顺县,104.98,29.18",
"攀枝花市,101.72,26.58",
"东区,101.7,26.55",
"西区,101.6,26.6",
"仁和区,101.73,26.5",
"米易县,102.12,26.88",
"盐边县,101.85,26.7",
"泸州市,105.43,28.87",
"江阳区,105.45,28.88",
"纳溪区,105.37,28.77",
"龙马潭区,105.43,28.9",
"泸县,105.38,29.15",
"合江县,105.83,28.82",
"叙永县,105.43,28.17",
"古蔺县,105.82,28.05",
"德阳市,104.38,31.13",
"旌阳区,104.38,31.13",
"中江县,104.68,31.03",
"罗江县,104.5,31.32",
"广汉市,104.28,30.98",
"什邡市,104.17,31.13",
"绵竹市,104.2,31.35",
"绵阳市,104.73,31.47",
"涪城区,104.73,31.47",
"游仙区,104.75,31.47",
"三台县,105.08,31.1",
"盐亭县,105.38,31.22",
"安县,104.57,31.53",
"梓潼县,105.17,31.63",
"北川羌族自治县,104.45,31.82",
"平武县,104.53,32.42",
"江油市,104.75,31.78",
"广元市,105.83,32.43",
"市中区,105.05,29.58",
"市中区,103.77,29.57",
"元坝区,105.97,32.32",
"朝天区,105.88,32.65",
"旺苍县,106.28,32.23",
"青川县,105.23,32.58",
"剑阁县,105.52,32.28",
"苍溪县,105.93,31.73",
"遂宁市,105.57,30.52",
"船山区,105.57,30.52",
"安居区,105.45,30.35",
"蓬溪县,105.72,30.78",
"射洪县,105.38,30.87",
"大英县,105.25,30.58",
"内江市,105.05,29.58",
"市中区,105.05,29.58",
"市中区,103.77,29.57",
"东兴区,105.07,29.6",
"威远县,104.67,29.53",
"资中县,104.85,29.78",
"隆??县,105.28,29.35",
"乐山市,103.77,29.57",
"市中区,105.05,29.58",
"市中区,103.77,29.57",
"沙湾区,103.55,29.42",
"五通桥区,103.82,29.4",
"金口河区,103.08,29.25",
"犍为县,103.95,29.22",
"井研县,104.07,29.65",
"夹江县,103.57,29.73",
"沐川县,103.9,28.97",
"峨边彝族自治县,103.27,29.23",
"马边彝族自治县,103.55,28.83",
"峨眉山市,103.48,29.6",
"南充市,106.08,30.78",
"顺庆区,106.08,30.78",
"高坪区,106.1,30.77",
"嘉陵区,106.05,30.77",
"南部县,106.07,31.35",
"营山县,106.57,31.08",
"蓬安县,106.42,31.03",
"仪陇县,106.28,31.27",
"西充县,105.88,31",
"阆中市,106,31.55",
"眉山市,103.83,30.05",
"东坡区,103.83,30.05",
"仁寿县,104.15,30",
"彭山县,103.87,30.2",
"洪雅县,103.37,29.92",
"丹棱县,103.52,30.02",
"青神县,103.85,29.83",
"宜宾市,104.62,28.77",
"翠屏区,104.62,28.77",
"宜宾县,104.55,28.7",
"南溪县,104.98,28.85",
"江安县,105.07,28.73",
"长宁县,104.92,28.58",
"高县,104.52,28.43",
"珙县,104.72,28.45",
"筠连县,104.52,28.17",
"兴文县,105.23,28.3",
"屏山县,104.33,28.83",
"广安市,106.63,30.47",
"岳池县,106.43,30.55",
"武胜县,106.28,30.35",
"邻水县,106.93,30.33",
"华蓥市,106.77,30.38",
"达州市,107.5,31.22",
"通川区,107.48,31.22",
"达县,107.5,31.2",
"宣汉县,107.72,31.35",
"开江县,107.87,31.08",
"大竹县,107.2,30.73",
"渠县,106.97,30.83",
"万源市,108.03,32.07",
"雅安市,103,29.98",
"雨城区,103,29.98",
"名山县,103.12,30.08",
"荥经县,102.85,29.8",
"汉源县,102.65,29.35",
"石棉县,102.37,29.23",
"天全县,102.75,30.07",
"芦山县,102.92,30.15",
"宝兴县,102.82,30.37",
"巴中市,106.77,31.85",
"巴州区,106.77,31.85",
"通江县,107.23,31.92",
"南江县,106.83,32.35",
"平昌县,107.1,31.57",
"资阳市,104.65,30.12",
"雁江区,104.65,30.12",
"安岳县,105.33,30.1",
"乐至县,105.02,30.28",
"简阳市,104.55,30.4",
"阿坝藏族羌族自治州,102.22,31.9",
"汶川县,103.58,31.48",
"理县,103.17,31.43",
"茂县,103.85,31.68",
"松潘县,103.6,32.63",
"九寨沟县,104.23,33.27",
"金川县,102.07,31.48",
"小金县,102.37,31",
"黑水县,102.98,32.07",
"马尔康县,102.22,31.9",
"壤塘县,100.98,32.27",
"阿坝县,101.7,32.9",
"若尔盖县,102.95,33.58",
"红原县,102.55,32.8",
"甘孜藏族自治州,101.97,30.05",
"康定县,101.97,30.05",
"泸定县,102.23,29.92",
"丹巴县,101.88,30.88",
"九龙县,101.5,29",
"雅江县,101.02,30.03",
"道孚县,101.12,30.98",
"炉霍县,100.68,31.4",
"甘孜县,99.98,31.62",
"新龙县,100.32,30.95",
"德格县,98.58,31.82",
"白玉县,98.83,31.22",
"石渠县,98.1,32.98",
"色达县,100.33,32.27",
"理塘县,100.27,30",
"巴塘县,99.1,30",
"乡城县,99.8,28.93",
"稻城县,100.3,29.03",
"得荣县,99.28,28.72",
"凉山彝族自治州,102.27,27.9",
"西昌市,102.27,27.9",
"木里藏族自治县,101.28,27.93",
"盐源县,101.5,27.43",
"德昌县,102.18,27.4",
"会理县,102.25,26.67",
"会东县,102.58,26.63",
"宁南县,102.77,27.07",
"普格县,102.53,27.38",
"布拖县,102.82,27.72",
"金阳县,103.25,27.7",
"昭觉县,102.85,28.02",
"喜德县,102.42,28.32",
"冕宁县,102.17,28.55",
"越西县,102.52,28.65",
"甘洛县,102.77,28.97",
"美姑县,103.13,28.33",
"雷波县,103.57,28.27",
"贵阳市,106.63,26.65",
"南明区,106.72,26.57",
"云岩区,106.72,26.62",
"乌当区,106.75,26.63",
"白云区,106.65,26.68",
"小河区,106.7,26.53",
"开阳县,106.97,27.07",
"息烽县,106.73,27.1",
"修文县,106.58,26.83",
"清镇市,106.47,26.55",
"六盘水市,104.83,26.6",
"钟山区,104.83,26.6",
"六枝特区,105.48,26.22",
"水城县,104.95,26.55",
"盘县,104.47,25.72",
"遵义市,106.92,27.73",
"红花岗区,106.92,27.65",
"汇川区,106.92,27.73",
"遵义县,106.83,27.53",
"桐梓县,106.82,28.13",
"绥阳县,107.18,27.95",
"正安县,107.43,28.55",
"道真仡佬族苗族自治县,107.6,28.88",
"务川仡佬族苗族自治县,107.88,28.53",
"凤冈县,107.72,27.97",
"湄潭县,107.48,27.77",
"余庆县,107.88,27.22",
"习水县,106.22,28.32",
"赤水市,105.7,28.58",
"仁怀市,106.42,27.82",
"安顺市,105.95,26.25",
"西秀区,105.92,26.25",
"平坝县,106.25,26.42",
"普定县,105.75,26.32",
"镇宁布依族苗族自治县,105.77,26.07",
"关岭布依族苗族自治县,105.62,25.95",
"紫云苗族布依族自治县,106.08,25.75",
"铜仁地区,109.18,27.72",
"铜仁市,109.18,27.72",
"江口县,108.85,27.7",
"玉屏侗族自治县,108.92,27.23",
"石阡县,108.23,27.52",
"思南县,108.25,27.93",
"印江土家族苗族自治县,108.4,28",
"德江县,108.12,28.27",
"沿河土家族自治县,108.5,28.57",
"松桃苗族自治县,109.2,28.17",
"万山特区,109.2,27.52",
"兴义市,104.9,25.08",
"兴仁县,105.18,25.43",
"普安县,104.95,25.78",
"晴隆县,105.22,25.83",
"贞丰县,105.65,25.38",
"望谟县,106.1,25.17",
"册亨县,105.82,24.98",
"安龙县,105.47,25.12",
"毕节地区,105.28,27.3",
"毕节市,105.28,27.3",
"大方县,105.6,27.15",
"黔西县,106.03,27.03",
"金沙县,106.22,27.47",
"织金县,105.77,26.67",
"纳雍县,105.38,26.78",
"赫章县,104.72,27.13",
"黔东南苗族侗族自治州,107.97,26.58",
"凯里市,107.97,26.58",
"黄平县,107.9,26.9",
"施秉县,108.12,27.03",
"三穗县,108.68,26.97",
"镇远县,108.42,27.05",
"岑巩县,108.82,27.18",
"天柱县,109.2,26.92",
"锦屏县,109.2,26.68",
"剑河县,108.45,26.73",
"台江县,108.32,26.67",
"黎平县,109.13,26.23",
"榕江县,108.52,25.93",
"从江县,108.9,25.75",
"雷山县,108.07,26.38",
"麻江县,107.58,26.5",
"丹寨县,107.8,26.2",
"黔南布依族苗族自治州,107.52,26.27",
"都匀市,107.52,26.27",
"福泉市,107.5,26.7",
"荔波县,107.88,25.42",
"贵定县,107.23,26.58",
"瓮安县,107.47,27.07",
"独山县,107.53,25.83",
"平塘县,107.32,25.83",
"罗甸县,106.75,25.43",
"长顺县,106.45,26.03",
"龙里县,106.97,26.45",
"惠水县,106.65,26.13",
"三都水族自治县,107.87,25.98",
"昆明市,102.72,25.05",
"五华区,102.7,25.05",
"盘龙区,102.72,25.03",
"官渡区,102.75,25.02",
"西山区,102.67,25.03",
"东川区,103.18,26.08",
"呈贡县,102.8,24.88",
"晋宁县,102.6,24.67",
"富民县,102.5,25.22",
"宜良县,103.15,24.92",
"石林彝族自治县,103.27,24.77",
"嵩明县,103.03,25.35",
"禄劝彝族苗族自治县,102.47,25.55",
"寻甸回族彝族自治县,103.25,25.57",
"安宁市,102.48,24.92",
"曲靖市,103.8,25.5",
"麒麟区,103.8,25.5",
"马龙县,103.58,25.43",
"陆良县,103.67,25.03",
"师宗县,103.98,24.83",
"罗平县,104.3,24.88",
"富源县,104.25,25.67",
"会泽县,103.3,26.42",
"沾益县,103.82,25.62",
"宣威市,104.1,26.22",
"玉溪市,102.55,24.35",
"江川县,102.75,24.28",
"澄江县,102.92,24.67",
"通海县,102.75,24.12",
"华宁县,102.93,24.2",
"易门县,102.17,24.67",
"峨山彝族自治县,102.4,24.18",
"新平彝族傣族自治县,101.98,24.07",
"保山市,99.17,25.12",
"隆阳区,99.17,25.12",
"施甸县,99.18,24.73",
"腾冲县,98.5,25.03",
"龙陵县,98.68,24.58",
"昌宁县,99.6,24.83",
"昭通市,103.72,27.33",
"昭阳区,103.72,27.33",
"鲁甸县,103.55,27.2",
"巧家县,102.92,26.92",
"盐津县,104.23,28.12",
"大关县,103.88,27.75",
"永善县,103.63,28.23",
"绥江县,103.95,28.6",
"镇雄县,104.87,27.45",
"彝良县,104.05,27.63",
"威信县,105.05,27.85",
"水富县,104.4,28.63",
"丽江市,100.23,26.88",
"古城区,100.23,26.88",
"玉龙纳西族自治县,100.23,26.82",
"永胜县,100.75,26.68",
"华坪县,101.27,26.63",
"宁蒗彝族自治县,100.85,27.28",
"墨江哈尼族自治县,101.68,23.43",
"景东彝族自治县,100.83,24.45",
"景谷傣族彝族自治县,100.7,23.5",
"江城哈尼族彝族自治县,101.85,22.58",
"澜沧拉祜族自治县,99.93,22.55",
"西盟佤族自治县,99.62,22.63",
"临沧市,100.08,23.88",
"临翔区,100.08,23.88",
"凤庆县,99.92,24.6",
"云县,100.13,24.45",
"永德县,99.25,24.03",
"镇康县,98.83,23.78",
"耿马傣族佤族自治县,99.4,23.55",
"沧源佤族自治县,99.25,23.15",
"楚雄彝族自治州,101.55,25.03",
"楚雄市,101.55,25.03",
"双柏县,101.63,24.7",
"牟定县,101.53,25.32",
"南华县,101.27,25.2",
"姚安县,101.23,25.5",
"大姚县,101.32,25.73",
"永仁县,101.67,26.07",
"元谋县,101.88,25.7",
"武定县,102.4,25.53",
"禄丰县,102.08,25.15",
"红河哈尼族彝族自治州,103.4,23.37",
"个旧市,103.15,23.37",
"开远市,103.27,23.72",
"蒙自县,103.4,23.37",
"屏边苗族自治县,103.68,22.98",
"建水县,102.83,23.62",
"石屏县,102.5,23.72",
"弥勒县,103.43,24.4",
"泸西县,103.77,24.53",
"元阳县,102.83,23.23",
"红河县,102.42,23.37",
"绿春县,102.4,23",
"河口瑶族自治县,103.97,22.52",
"文山壮族苗族自治州,104.25,23.37",
"文山县,104.25,23.37",
"砚山县,104.33,23.62",
"西畴县,104.67,23.45",
"麻栗坡县,104.7,23.12",
"马关县,104.4,23.02",
"丘北县,104.18,24.05",
"广南县,105.07,24.05",
"富宁县,105.62,23.63",
"西双版纳傣族自治州,100.8,22.02",
"景洪市,100.8,22.02",
"勐海县,100.45,21.97",
"勐腊县,101.57,21.48",
"大理白族自治州,100.23,25.6",
"大理市,100.23,25.6",
"漾濞彝族自治县,99.95,25.67",
"祥云县,100.55,25.48",
"宾川县,100.58,25.83",
"弥渡县,100.48,25.35",
"南涧彝族自治县,100.52,25.05",
"巍山彝族回族自治县,100.3,25.23",
"永平县,99.53,25.47",
"云龙县,99.37,25.88",
"洱源县,99.95,26.12",
"剑川县,99.9,26.53",
"鹤庆县,100.18,26.57",
"德宏傣族景颇族自治州,98.58,24.43",
"瑞丽市,97.85,24.02",
"潞西市,98.58,24.43",
"梁河县,98.3,24.82",
"盈江县,97.93,24.72",
"陇川县,97.8,24.2",
"怒江傈僳族自治州,98.85,25.85",
"泸水县,98.85,25.85",
"福贡县,98.87,26.9",
"贡山独龙族怒族自治县,98.67,27.73",
"兰坪白族普米族自治县,99.42,26.45",
"迪庆藏族自治州,99.7,27.83",
"香格里拉县,99.7,27.83",
"德钦县,98.92,28.48",
"维西傈僳族自治县,99.28,27.18",
"拉萨市,91.13,29.65",
"城关区,91.13,29.65",
"林周县,91.25,29.9",
"当雄县,91.1,30.48",
"尼木县,90.15,29.45",
"曲水县,90.73,29.37",
"堆龙德庆县,91,29.65",
"达孜县,91.35,29.68",
"墨竹工卡县,91.73,29.83",
"昌都地区,97.18,31.13",
"昌都县,97.18,31.13",
"江达县,98.22,31.5",
"贡觉县,98.27,30.87",
"类乌齐县,96.6,31.22",
"丁青县,95.6,31.42",
"察雅县,97.57,30.65",
"八宿县,96.92,30.05",
"左贡县,97.85,29.67",
"芒康县,98.6,29.68",
"洛隆县,95.83,30.75",
"边坝县,94.7,30.93",
"山南地区,91.77,29.23",
"乃东县,91.77,29.23",
"扎囊县,91.33,29.25",
"贡嘎县,90.98,29.3",
"桑日县,92.02,29.27",
"琼结县,91.68,29.03",
"曲松县,92.2,29.07",
"措美县,91.43,28.43",
"洛扎县,90.87,28.38",
"加查县,92.58,29.15",
"隆子县,92.47,28.42",
"错那县,91.95,28",
"浪卡子县,90.4,28.97",
"日喀则地区,88.88,29.27",
"日喀则市,88.88,29.27",
"南木林县,89.1,29.68",
"江孜县,89.6,28.92",
"定日县,87.12,28.67",
"萨迦县,88.02,28.9",
"拉孜县,87.63,29.08",
"昂仁县,87.23,29.3",
"谢通门县,88.27,29.43",
"白朗县,89.27,29.12",
"仁布县,89.83,29.23",
"康马县,89.68,28.57",
"定结县,87.77,28.37",
"仲巴县,84.03,29.77",
"亚东县,88.9,27.48",
"吉隆县,85.3,28.85",
"聂拉木县,85.98,28.17",
"萨嘎县,85.23,29.33",
"岗巴县,88.52,28.28",
"那曲地区,92.07,31.48",
"那曲县,92.07,31.48",
"嘉黎县,93.25,30.65",
"比如县,93.68,31.48",
"聂荣县,92.3,32.12",
"安多县,91.68,32.27",
"申扎县,88.7,30.93",
"索县,93.78,31.88",
"班戈县,90.02,31.37",
"巴青县,94.03,31.93",
"尼玛县,87.23,31.78",
"阿里地区,80.1,32.5",
"普兰县,81.17,30.3",
"札达县,79.8,31.48",
"噶尔县,80.1,32.5",
"日土县,79.72,33.38",
"革吉县,81.12,32.4",
"改则县,84.07,32.3",
"措勤县,85.17,31.02",
"林芝地区,94.37,29.68",
"林芝县,94.37,29.68",
"工布江达县,93.25,29.88",
"米林县,94.22,29.22",
"墨脱县,95.33,29.33",
"波密县,95.77,29.87",
"察隅县,97.47,28.67",
"朗县,93.07,29.05",
"西安市,108.93,34.27",
"新城区,108.95,34.27",
"碑林区,108.93,34.23",
"莲湖区,108.93,34.27",
"灞桥区,109.07,34.27",
"未央区,108.93,34.28",
"雁塔区,108.95,34.22",
"阎良区,109.23,34.65",
"临潼区,109.22,34.37",
"长安区,108.93,34.17",
"蓝田县,109.32,34.15",
"周至县,108.2,34.17",
"户县,108.6,34.1",
"高陵县,109.08,34.53",
"铜川市,108.93,34.9",
"王益区,109.07,35.07",
"印台区,109.1,35.1",
"耀州区,108.98,34.92",
"宜君县,109.12,35.4",
"宝鸡市,107.13,34.37",
"渭滨区,107.15,34.37",
"金台区,107.13,34.38",
"陈仓区,107.37,34.37",
"凤翔县,107.38,34.52",
"岐山县,107.62,34.45",
"扶风县,107.87,34.37",
"眉县,107.75,34.28",
"陇县,106.85,34.9",
"千阳县,107.13,34.65",
"麟游县,107.78,34.68",
"凤县,106.52,33.92",
"太白县,107.32,34.07",
"咸阳市,108.7,34.33",
"秦都区,108.72,34.35",
"杨凌区,108.07,34.28",
"渭城区,108.73,34.33",
"三原县,108.93,34.62",
"泾阳县,108.83,34.53",
"乾县,108.23,34.53",
"礼泉县,108.42,34.48",
"永寿县,108.13,34.7",
"彬县,108.08,35.03",
"长武县,107.78,35.2",
"旬邑县,108.33,35.12",
"淳化县,108.58,34.78",
"武功县,108.2,34.27",
"兴平市,108.48,34.3",
"渭南市,109.5,34.5",
"临渭区,109.48,34.5",
"华县,109.77,34.52",
"潼关县,110.23,34.55",
"大荔县,109.93,34.8",
"合阳县,110.15,35.23",
"澄城县,109.93,35.18",
"蒲城县,109.58,34.95",
"白水县,109.58,35.18",
"富平县,109.18,34.75",
"韩城市,110.43,35.48",
"华阴市,110.08,34.57",
"延安市,109.48,36.6",
"宝塔区,109.48,36.6",
"延长县,110,36.58",
"延川县,110.18,36.88",
"子长县,109.67,37.13",
"安塞县,109.32,36.87",
"志丹县,108.77,36.82",
"甘泉县,109.35,36.28",
"富县,109.37,35.98",
"洛川县,109.43,35.77",
"宜川县,110.17,36.05",
"黄龙县,109.83,35.58",
"黄陵县,109.25,35.58",
"汉中市,107.02,33.07",
"汉台区,107.03,33.07",
"南郑县,106.93,33",
"城固县,107.33,33.15",
"洋县,107.55,33.22",
"西乡县,107.77,32.98",
"勉县,106.67,33.15",
"宁强县,106.25,32.83",
"略阳县,106.15,33.33",
"镇巴县,107.9,32.53",
"留坝县,106.92,33.62",
"佛坪县,107.98,33.53",
"榆林市,109.73,38.28",
"榆阳区,109.75,38.28",
"神木县,110.5,38.83",
"府谷县,111.07,39.03",
"横山县,109.28,37.95",
"靖边县,108.8,37.6",
"定边县,107.6,37.58",
"绥德县,110.25,37.5",
"米脂县,110.18,37.75",
"佳县,110.48,38.02",
"吴堡县,110.73,37.45",
"清涧县,110.12,37.08",
"子洲县,110.03,37.62",
"安康市,109.02,32.68",
"汉滨区,109.02,32.68",
"汉阴县,108.5,32.9",
"石泉县,108.25,33.05",
"宁陕县,108.32,33.32",
"紫阳县,108.53,32.52",
"岚皋县,108.9,32.32",
"平利县,109.35,32.4",
"镇坪县,109.52,31.88",
"旬阳县,109.38,32.83",
"白河县,110.1,32.82",
"商洛市,109.93,33.87",
"商州区,109.93,33.87",
"洛南县,110.13,34.08",
"丹凤县,110.33,33.7",
"商南县,110.88,33.53",
"山阳县,109.88,33.53",
"镇安县,109.15,33.43",
"柞水县,109.1,33.68",
"兰州市,103.82,36.07",
"城关区,103.83,36.05",
"西固区,103.62,36.1",
"红古区,102.87,36.33",
"永登县,103.27,36.73",
"皋兰县,103.95,36.33",
"榆中县,104.12,35.85",
"嘉峪关市,98.27,39.8",
"金昌市,102.18,38.5",
"金川区,102.18,38.5",
"永昌县,101.97,38.25",
"白银市,104.18,36.55",
"白银区,104.18,36.55",
"平川区,104.83,36.73",
"靖远县,104.68,36.57",
"会宁县,105.05,35.7",
"景泰县,104.07,37.15",
"天水市,105.72,34.58",
"清水县,106.13,34.75",
"秦安县,105.67,34.87",
"甘谷县,105.33,34.73",
"武山县,104.88,34.72",
"张家川回族自治县,106.22,35",
"武威市,102.63,37.93",
"凉州区,102.63,37.93",
"民勤县,103.08,38.62",
"古浪县,102.88,37.47",
"天祝藏族自治县,103.13,36.98",
"张掖市,100.45,38.93",
"甘州区,100.45,38.93",
"肃南裕固族自治县,99.62,38.83",
"民乐县,100.82,38.43",
"临泽县,100.17,39.13",
"高台县,99.82,39.38",
"山丹县,101.08,38.78",
"平凉市,106.67,35.55",
"崆峒区,106.67,35.55",
"泾川县,107.37,35.33",
"灵台县,107.62,35.07",
"崇信县,107.03,35.3",
"华亭县,106.65,35.22",
"庄浪县,106.05,35.2",
"静宁县,105.72,35.52",
"酒泉市,98.52,39.75",
"肃州区,98.52,39.75",
"金塔县,98.9,39.98",
"肃北蒙古族自治县,94.88,39.52",
"阿克塞哈萨克族自治县,94.33,39.63",
"玉门市,97.05,40.28",
"敦煌市,94.67,40.13",
"庆阳市,107.63,35.73",
"西峰区,107.63,35.73",
"庆城县,107.88,36",
"环县,107.3,36.58",
"华池县,107.98,36.47",
"合水县,108.02,35.82",
"正宁县,108.37,35.5",
"宁县,107.92,35.5",
"镇原县,107.2,35.68",
"定西市,104.62,35.58",
"安定区,104.62,35.58",
"通渭县,105.25,35.2",
"陇西县,104.63,35",
"渭源县,104.22,35.13",
"临洮县,103.87,35.38",
"漳县,104.47,34.85",
"岷县,104.03,34.43",
"陇南市,104.92,33.4",
"武都区,104.92,33.4",
"成县,105.72,33.73",
"文县,104.68,32.95",
"宕昌县,104.38,34.05",
"康县,105.6,33.33",
"西和县,105.3,34.02",
"礼县,105.17,34.18",
"徽县,106.08,33.77",
"两当县,106.3,33.92",
"临夏回族自治州,103.22,35.6",
"临夏市,103.22,35.6",
"临夏县,103,35.5",
"康乐县,103.72,35.37",
"永靖县,103.32,35.93",
"广河县,103.58,35.48",
"和政县,103.35,35.43",
"东乡族自治县,103.4,35.67",
"甘南藏族自治州,102.92,34.98",
"合作市,102.92,34.98",
"临潭县,103.35,34.7",
"卓尼县,103.5,34.58",
"舟曲县,104.37,33.78",
"迭部县,103.22,34.05",
"玛曲县,102.07,34",
"碌曲县,102.48,34.58",
"夏河县,102.52,35.2",
"西宁市,101.78,36.62",
"城东区,101.8,36.62",
"城中区,101.78,36.62",
"城西区,101.77,36.62",
"城北区,101.77,36.67",
"大通回族土族自治县,101.68,36.93",
"湟中县,101.57,36.5",
"湟源县,101.27,36.68",
"海东地区,102.12,36.5",
"平安县,102.12,36.5",
"民和回族土族自治县,102.8,36.33",
"乐都县,102.4,36.48",
"互助土族自治县,101.95,36.83",
"化隆回族自治县,102.27,36.1",
"循化撒拉族自治县,102.48,35.85",
"海北藏族自治州,100.9,36.97",
"门源回族自治县,101.62,37.38",
"祁连县,100.25,38.18",
"海晏县,100.98,36.9",
"刚察县,100.13,37.33",
"黄南藏族自治州,102.02,35.52",
"同仁县,102.02,35.52",
"尖扎县,102.03,35.93",
"泽库县,101.47,35.03",
"河南蒙古族自治县,101.6,34.73",
"海南藏族自治州,100.62,36.28",
"共和县,100.62,36.28",
"同德县,100.57,35.25",
"贵德县,101.43,36.05",
"兴海县,99.98,35.58",
"贵南县,100.75,35.58",
"果洛藏族自治州,100.23,34.48",
"玛沁县,100.23,34.48",
"班玛县,100.73,32.93",
"甘德县,99.9,33.97",
"达日县,99.65,33.75",
"久治县,101.48,33.43",
"玛多县,98.18,34.92",
"玉树藏族自治州,97.02,33",
"玉树县,97.02,33",
"杂多县,95.3,32.9",
"称多县,97.1,33.37",
"治多县,95.62,33.85",
"囊谦县,96.48,32.2",
"曲麻莱县,95.8,34.13",
"海西蒙古族藏族自治州,97.37,37.37",
"格尔木市,94.9,36.42",
"德令哈市,97.37,37.37",
"乌兰县,98.48,36.93",
"都兰县,98.08,36.3",
"天峻县,99.02,37.3",
"银川市,106.28,38.47",
"兴庆区,106.28,38.48",
"西夏区,106.18,38.48",
"金凤区,106.25,38.47",
"永宁县,106.25,38.28",
"贺兰县,106.35,38.55",
"灵武市,106.33,38.1",
"石嘴山市,106.38,39.02",
"大武口区,106.38,39.02",
"惠农区,106.78,39.25",
"平罗县,106.53,38.9",
"吴忠市,106.2,37.98",
"利通区,106.2,37.98",
"盐池县,107.4,37.78",
"同心县,105.92,36.98",
"青铜峡市,106.07,38.02",
"固原市,106.28,36",
"原州区,106.28,36",
"西吉县,105.73,35.97",
"隆德县,106.12,35.62",
"泾源县,106.33,35.48",
"彭阳县,106.63,35.85",
"中卫市,105.18,37.52",
"沙坡头区,105.18,37.52",
"中宁县,105.67,37.48",
"海原县,105.65,36.57",
"乌鲁木齐市,87.62,43.82",
"天山区,87.65,43.78",
"沙依巴克区,87.6,43.78",
"新市区,87.6,43.85",
"水磨沟区,87.63,43.83",
"头屯河区,87.42,43.87",
"达坂城区,88.3,43.35",
"东山区,87.68,43.95",
"乌鲁木齐县,87.6,43.8",
"克拉玛依市,84.87,45.6",
"独山子区,84.85,44.32",
"克拉玛依区,84.87,45.6",
"白碱滩区,85.13,45.7",
"乌尔禾区,85.68,46.08",
"吐鲁番地区,89.17,42.95",
"吐鲁番市,89.17,42.95",
"鄯善县,90.22,42.87",
"托克逊县,88.65,42.78",
"哈密地区,93.52,42.83",
"哈密市,93.52,42.83",
"伊吾县,94.7,43.25",
"昌吉回族自治州,87.3,44.02",
"昌吉市,87.3,44.02",
"阜康市,87.98,44.15",
"米泉市,87.65,43.97",
"呼图壁县,86.9,44.18",
"玛纳斯县,86.22,44.3",
"奇台县,89.58,44.02",
"吉木萨尔县,89.18,44",
"木垒哈萨克自治县,90.28,43.83",
"博尔塔拉蒙古自治州,82.07,44.9",
"博乐市,82.07,44.9",
"精河县,82.88,44.6",
"温泉县,81.03,44.97",
"巴音郭楞蒙古自治州,86.15,41.77",
"库尔勒市,86.15,41.77",
"轮台县,84.27,41.78",
"尉犁县,86.25,41.33",
"若羌县,88.17,39.02",
"且末县,85.53,38.13",
"焉耆回族自治县,86.57,42.07",
"和静县,86.4,42.32",
"和硕县,86.87,42.27",
"博湖县,86.63,41.98",
"阿克苏地区,80.27,41.17",
"阿克苏市,80.27,41.17",
"温宿县,80.23,41.28",
"库车县,82.97,41.72",
"沙雅县,82.78,41.22",
"新和县,82.6,41.55",
"拜城县,81.87,41.8",
"乌什县,79.23,41.22",
"阿瓦提县,80.38,40.63",
"柯坪县,79.05,40.5",
"阿图什市,76.17,39.72",
"阿克陶县,75.95,39.15",
"阿合奇县,78.45,40.93",
"乌恰县,75.25,39.72",
"喀什地区,75.98,39.47",
"喀什市,75.98,39.47",
"疏附县,75.85,39.38",
"疏勒县,76.05,39.4",
"英吉沙县,76.17,38.93",
"泽普县,77.27,38.18",
"莎车县,77.23,38.42",
"叶城县,77.42,37.88",
"麦盖提县,77.65,38.9",
"岳普湖县,76.77,39.23",
"伽师县,76.73,39.5",
"巴楚县,78.55,39.78",
"和田地区,79.92,37.12",
"和田市,79.92,37.12",
"和田县,79.93,37.1",
"墨玉县,79.73,37.27",
"皮山县,78.28,37.62",
"洛浦县,80.18,37.07",
"策勒县,80.8,37",
"于田县,81.67,36.85",
"民丰县,82.68,37.07",
"伊犁哈萨克自治州,81.32,43.92",
"伊宁市,81.32,43.92",
"奎屯市,84.9,44.42",
"伊宁县,81.52,43.98",
"察布查尔锡伯自治县,81.15,43.83",
"霍城县,80.88,44.05",
"巩留县,82.23,43.48",
"新源县,83.25,43.43",
"昭苏县,81.13,43.15",
"特克斯县,81.83,43.22",
"尼勒克县,82.5,43.78",
"塔城地区,82.98,46.75",
"塔城市,82.98,46.75",
"乌苏市,84.68,44.43",
"额敏县,83.63,46.53",
"沙湾县,85.62,44.33",
"托里县,83.6,45.93",
"裕民县,82.98,46.2",
"和布克赛尔蒙古自治县,85.72,46.8",
"阿勒泰地区,88.13,47.85",
"阿勒泰市,88.13,47.85",
"布尔津县,86.85,47.7",
"富蕴县,89.52,47",
"福海县,87.5,47.12",
"哈巴河县,86.42,48.07",
"青河县,90.38,46.67",
"吉木乃县,85.88,47.43",
"石河子市,86.03,44.3",
"阿拉尔市,81.28,40.55",
"图木舒克市,79.13,39.85",
"五家渠市,87.53,44.17",
"香港,114.08,22.2",
"澳门,113.33,22.13",
"台北市,121.5,25.03",
"高雄市,120.28,22.62",
"基隆市,121.73,25.13",
"台中市,120.67,24.15",
"台南市,120.2,23",
"新竹市,120.95,24.82",
"嘉义市,120.43,23.48",
"台北县,121.47,25.02",
"宜兰县,121.75,24.77",
"桃园县,121.3,24.97",
"苗栗县,120.8,24.53",
"台中县,120.72,24.25",
"彰化县,120.53,24.08",
"南投县,120.67,23.92",
"云林县,120.53,23.72",
"台南县,120.32,23.32",
"高雄县,120.37,22.63",
"屏东县,120.48,22.67",
"台东县,121.15,22.75",
"花莲县,121.6,23.98",
"澎湖县,119.58,23.58"];

//require jQuery,
// 格式化日期和数字时，require moment和numbro
(function($,window){
	//npt作为消息总线，on，off，fire
	var npt = $({});
	npt.fire = function() {
		npt.trigger.apply(npt, arguments);
	};

	//npt.fire(npt.event.dateChanged,new Date());
	//npt.on(npt.event.dateChanged,,function(e,date){
	//     console.info(date);//Mon Apr 25 2016....
	// });
	npt.event={
		show:{
			preLevel:"show.preLevel",
			nextLevel:"show.nextLevel",
			pre:"show.pre",
			next:"show.next",
			levelChanged:"show.levelChanged",
			regionChanged:"show.regionChanged",
			//新闻类产品中图片处理，点击图片插入单图到ppt页面中
			//参数是Image
			insertImgIntoPpt:"show.insertImgIntoPpt",
			//停止播放动画
			stopPlay:"show.stopPlay",
			iviewer:"show.iviewer"
		},
		dateChanged:"dateChanged",
		ttChanged:"show.ttChanged",
		currentFFFChanged:"currentFFFChanged"
	}
	npt.state={
		ajaxing:false
	};
	var templateRe=/\{ *(.+?) *(: *[^ }]+)? *\}/g;
	npt.util= {
		//取模运算
		mod: function (a, n) {
			return (a % n + n) % n;
		},
		wrapNum: function (x, range, includeMax) {
			var max = range[1],
				min = range[0],
				d = max - min;
			return x === max && includeMax ? x : ((x - min) % d + d) % d + min;
		},
		//npt.util.template("My name is {name}; I was born in {birthday|YYYY年MM月DD日}"，{name:"npt",birthday:new Date()});
		//npt.util.template("My name is {0}; I was born in {1|YYYY年MM月DD日}"，"npt",new Date());
		template: function (str, data) {
			if (typeof data !== 'object') {
				data = Array.prototype.slice.call(arguments, 1);
			}
			return str.replace(templateRe, function (match, key, format) {
				//L.Util.template
				var value = data[key];

				if (value === undefined) {
					//没有的话，就不替换
					value = match;
					// throw new Error('No value provided for variable ' + str);

				} else if (typeof value === 'function') {
					value = value(data);
				}
				//有format时对value进行格式化
				if (format) {
					format = format.replace(/: */, '');
					if (value instanceof Date||value._isAMomentObject) {//是日期
						value = moment(value).format(format);
					} else {//是数字
						value = numbro(value).format(format);
					}
				}
				return value;
			});
		},
		/**
		 * 模式匹配，提取模式信息
		 * @param format {String}eg:ANI_IR4_R04_{time:YYYYMMDD_HHmm}_FY2G.AWX
		 * @param sample {String}eg: ANI_IR4_R04_20160628_1229_FY2G.AWX
		 */
		//param matchers {Object} 此参数可不传eg:{time:[{pattern:"YYYYMMDD_HHmm",value:"20160628_1229"}]}
		patternMatch:function (format,sample,matchers) {
			matchers=matchers||{};
			var startIdx=format.indexOf('{');
			if(startIdx===-1)//退出条件
				return;
			var endIdx=format.indexOf('}');
			var key_pattern=format.substring(startIdx+1,endIdx).split(':');
			var key=key_pattern[0].trim(),
				pattern=key_pattern[1].trim();
			var valueEndIdx=startIdx+pattern.length;
			var value=sample.substring(startIdx,valueEndIdx);
			matchers[key]=matchers[key]||[];
			matchers[key].push({pattern:pattern,value:value});

			format=format.substring(endIdx+1);
			sample=sample.substring(valueEndIdx);
			arguments.callee(format,sample,matchers);
			return matchers;
		},
		/**
		 * 对每一个叶节点执行fn，并用执行结果替换节点
		 * @param node
		 * @param fn
		 * @param ctx
		 * @returns {*}
		 */
		eachLeafNode:function(node,fn,ctx){
			if(typeof node=='object'){
				for(var key in node){
					node[key]=arguments.callee(node[key],fn,ctx);
				}
				return node;
			}else{
				return fn.call(ctx,node)
			}
		},
		getPalette:function (url,noA) {
			return $.get(url).then(function (pal) {
				var entries = $.xml2json(pal).entry;
				_.each(entries, function (entry) {
					var rgba = entry.rgba.split(",");
					rgba[3] = noA&&1||rgba[3] / 255;
					entry.rgba = npt.util.template("rgba({0},{1},{2},{3})", rgba);
					entry.value *= 1;
				});
				return entries;
			});
		},
		/**
		 * 深度clone
		 * @param obj
		 * @returns {*}
		 */
		clone:function(obj) {
			if (typeof obj != 'object') {
				return obj;
			} else {
				var newobj = obj instanceof Date? new Date(obj):
					obj instanceof Array ? [] :
					{};
				for (var i in obj) {
					newobj[i] = arguments.callee(obj[i]);
				}
				return newobj;
			}
		},
		/**
		 * 扩展，代理jQuery.extend方法
		 */
		extend:function () {
			return $.extend.apply(this,arguments);
		},
		/**
		 * 绑定执行环境，将obj中所有的function的执行环境绑定为ctx，直接修改obj对象
		 * @returns 修改后的obj对象
		 */
		bind:function (obj,ctx) {
			npt.util.eachLeafNode(obj,function(leaf){
				if(typeof leaf=='function'){
					return $.proxy(leaf,ctx);
				}
				return leaf;
			},this);
			return obj;
		}
	}
	npt.geo={
		api:"http://10.1.64.171/geo",
		municipalities:["北京市","天津市","上海市","重庆市"],
		isMunicipality:function (province) {
			return this.municipalities.indexOf(province) > -1;
		},
		getLayer:function (layer,latlng) {
			var url=npt.util.template("{0}/Addressing?layer={3}&lon={1}&lat={2}",npt.geo.api,latlng.lng,latlng.lat,layer);
			return $.ajax({
				url: ctx + '/json',
				dataType : 'json',
				data:{url:url},
				cache:true
			}).then(function (json) {//["NAME:广安市,CODE:238;"]
				var city=json[0];
				city=city.slice(0,-1);
				city=city.split(/:|,/);
				return {
					name:city[1],
					code:city[3]
				};
			})
		},
		/**
		 *
		 * @param json eg: [{
		 * "Name":"周口市","Code":"211",
		 * "extent": {"Xmax":115.64478301185738,"Xmin":114.08532001235108,"Ymax":34.34199907415962,"Ymin":33.05918075179909},
		 * "PointNum":88,"RingNum":1,
		 * "Points":[114.437965,34.3414;..."
		 * }]
		 * @returns {*}
		 * @private
		 */
		//
		_geoAdapter:function (json) {
			var points=json[0]["Points"];//["lng0,lat0;lng1,lat1;", ... ,""]
			var lnglats=[];
			for(var i=0,polygon;i<points.length;i++){
				polygon=points[i];
				polygon=polygon.slice(0,-1);
				polygon="[[[" + polygon.replace(/;/g,"],[") + "]]]";
				polygon=JSON.parse(polygon);
				lnglats.push(polygon);
			}
			return json["RingNum"]>1?
			{ type:"MultiPolygon",coordinates:lnglats }:
			{ type:"Polygon",coordinates:lnglats[0] };
		},
		getLayerBoundaryByName:function (layer,name) {
			return this.getLayerBoundaryWhere(layer,"NAME",encodeURIComponent(name));
		},
		getLayerBoundaryByLatLng:function (layer,latlng) {
			return this.getLayer(layer,latlng).then(function (city) {
				return npt.geo.getLayerBoundaryWhere(layer,"CODE",city.code);
			});
		},
		getLayerBoundaryWhere:function (layer,key,value) {
			var url=npt.util.template("{0}/where?layer={3}&key={1}&value={2}",npt.geo.api,key,value,layer);
			return $.ajax({
				url: ctx + '/json',
				dataType : 'json',
				data:{url:url},
				cache:true
			}).then(this._geoAdapter);
		}
	}
	npt.aws={
		//判断是否是国家站
		isNational:function (stationId) {
			return !Math.floor(stationId/1e5)
		},
		/**
		 * 获取自动站信息
		 * @param sCodes 站号数组
         * @returns {*}Promise
         */
		getStationInfos:function (sCodes) {
			return $.ajax({
				type:'POST',
				traditional:true,
				url:ctx+"/livemonitor/stationInfo",
				data:{ids:sCodes},
				dataType:'json'}).then(function (json) {
				//数组 转 对象
				var sInfos = {};
				_.each(json.data, function (sInfo) {
					sInfos[+sInfo.scode] = {
						sName: sInfo.sname,
						province: sInfo.province,
						city: sInfo.city,
						sCode: +sInfo.scode
					};
				});
				return sInfos;
			});
		}
	}
	npt.Palette=function (entries) {
		this.setEntries(entries);
	}
	/**
	 *
	 * @param entries 要求entries按value从小到大排列
     */
	npt.Palette.prototype.setEntries=function(entries){
		this.entries=entries;
	}
	npt.Palette.prototype.getColor=function (value) {
		for(var idx=this.entries.length-1;idx>-1;idx--){
			if(this.entries[idx].value<=value){
				return this.entries[idx].rgba;
			}
		}
		return this.entries[0].rgba;
	}
	function expose() {
		var oldNpt = window.npt;

		npt.noConflict = function () {
			window.npt = oldNpt;
			return this;
		};

		window.npt = npt;
	}
	if (typeof define === 'function' && define.amd) {
		define(npt);
	}
	if (typeof window !== 'undefined') {
		expose();
	}
})($,window);
/**
 * Created by xumenglei on 2016/12/16.
 */
npt.Basemap = L.LayerGroup.extend({
	options: {
		resUrl:"../../shapefiles/",//如果指定了目录，必须用“/”结尾
		shps: [
			{
				url:"provinceBorders.shp/Province",
				options:{
					color:"#F0954D",
					weight:1,
					fillOpacity: 0
				}
			},
			//{
			//    url:"river1.shp.zip",
			//    options:{
			//        color:"#0EDD0E",
			//        weight:1
			//    }
			//},
			{
				url: "nationalBorder.shp/NationalBorder",
				options: {
					color:"#F0954D",
					weight:2
				}
			}
		]
	},
	initialize:function (options) {
		L.setOptions(this,options);
		L.LayerGroup.prototype.initialize.call(this);
		this._renderer = L.canvas({padding:0});
		this._renderer.once('add',function(){
			L.DomUtil.addClass(this._container,'npt-basemap');
		});
		this._addShps();
	},
	_addShps:function () {
		var shp;
		for(var idx in this.options.shps){
			shp=this.options.shps[idx];
			this.addShp(shp);
		}
		return this;
	},
	addShp:function (shp) {
		shp.options.renderer = this._renderer;
		var layer=L.shapefile(this.options.resUrl+shp.url,shp.options);
		this.addLayer(layer);
		return layer;
	},
	bringToFront:function () {
		L.DomUtil.toFront(this._renderer._container);
		return this;
	}//,
	//绘制刷新时,会重置style,z-index被抹杀,因此setZIndex是无效的
	// setZIndex:function (zIndex) {
	//     this._renderer._container.style.zIndex=zIndex;
	//     return this;
	// }

	/**
	 * backwards compatibility，打残放缩动画过程，以便和all.js 1.0表现一致。
     * 要求在addTo(map)之前调用
	 */
	,bc:function () {
		var getEvents=function () {
			//参考 webmicaps/canvasrender/canvasLayer#onAdd
			var events = {
				moveend: this._update,
				zoomstart: function () {
					this._container.style.display='none';
				},
				zoomend: function () {
					this._container.style.display='block';
				}
			};
			return events;
		}
		this._renderer.getEvents = getEvents;
		return this;
	}
});
shell.TileLayer = L.TileLayer;
shell.ImageLayer = L.ImageOverlay;
ui = {};

/**
 * @module application
 * (入口文件)
 */	

shell.Application = L.Evented.extend({
		/**
		 * @function initialize 
		 * @param {Object} options  传入必要参数
		 * @todo	根据传入的参数  初始化。
		 */
    initialize: function (options) {
        this.options = options;
        this._handlers = [];
        this.StyleRoot="";
        this.dataRootUrl = options.dataRootUrl;
        this.detailUrl=options.detailUrl;
        this.imageUrl = options.imageUrl;
        
	      this.defaultLayer = options.defaultLayer;
				
        canvasrender.CanvasLayer.include(canvasrender.CanvasRenders);
        canvasrender.FeatureCanvasDraw.include(canvasrender.FeatureCanvasRenderers);
        canvasrender.CanvasTileLayer.include(canvasrender.CanvasRenders);
        
        this._initMap();
        this._initUI();
				
        this.mapEnhance = new shell.MapEnhance(this.map);

    },
	
		/**
		 * @function addHandler
		 * @param {Object} name
		 * @param {Object} HandlerClass
		 * @return {obj} this
		 * @todo 处理fire 发出事件的 ，添加handler处理
		 */
    addHandler: function (name, HandlerClass) {
        if (!HandlerClass) { return this; }
        var handler = this[name] = new HandlerClass(this);
        this._handlers.push(handler);
        if (this.options[name]) {
            handler.enable();
        }
        
        return this;
    },
    
    /**
     * @function _initMap
     * @todo 初始化地图
     */
    _initMap: function () {
        
        //var crs = new L.Proj.CRS('EPSG:4326', '', {
        //    origin: [-180, 90],
        //    resolutions: [0.47919505937250795, 0.23959752968625397, 0.11979876484312699, 0.05989938242156349, 0.029949691210781747, 0.014974845605390873, 0.007487422802695437, 0.0037437114013477183, 0.0018718557006738592]
        //});
			//
        var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            osmAttrib = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            osm = L.tileLayer(osmUrl, {maxZoom: 18, attribution: osmAttrib});
				
        var normalArgs=getTianDiTu(4326,'normal');
        var satelliteArgs=getTianDiTu(4326,'satellite');
        var terrainArgs=getTianDiTu(4326,'terrain');
				
        var normalLayer = L.tileLayer('http://10.1.64.146/map/{z}/{x}/{y}.png', {crossOrigin:true});

        var satelliteLayer = L.tileLayer('https://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}', {crossOrigin:true});
        var terrainLayer = L.tileLayer(terrainArgs.map,terrainArgs.options);
				
				var vecUrl = "http://t1.tianditu.com/DataServer?T=vec_c&x={x}&y={y}&l={z}";
				vecUrl = "http://10.1.64.146/vec_c/{z}/{x}/{y}.png?v=1.0.183";
        var vecLayer = L.tileLayer(vecUrl, {maxZoom: 14, minZoom: 1, attribution: 'nmc'});
        vecLayer = L.tileLayer(vecUrl, {subdomains:['0', '1', '2', '3', '4', '5', '6', '7'], zoomOffset:1, crossOrigin:true});
				
				
        var baseLayers = [satelliteLayer,normalLayer,terrainLayer,vecLayer];
        this.baseLayers = baseLayers;
		
        var map = L.map('map',
        {
            //crs: L.CRS.EPSG4326,
            crs: L.CRS.EPSG3857,
            continuousWorld: true,
            worldCopyJump: false,
            center: [40, 117],
            //zoom: 3,
            minZoom:1,
            maxZoom:13,
            zoomAnimation: true,
            attributionControl: false
            // layers: baseLayers[1]
        });
	    	
		    var mobile = isMobile();
		    if(mobile){
		    	map.fitBounds([
		            [-18.184, 71.543],
	        		[75.078, 137.461]
		        ]);
		    }else{
		    	map.fitBounds([
		            [13.754, 68.027],
	                [55.239, 141.855]
		        ]);
		    }
	    	
        map.addLayer(satelliteLayer);
        
        this.map = map;
    },
    
    /**
	   * @function _initUI
	   * @todo application 私有的初始化UI组件。     UI组件开启受控 ： mian.lib 配置组件开启的传递参数。 true 开启
	   */
    _initUI: function () {
         //this.paletteBar = new ui.PaletteBar(this);
         this.universal_tool = new ui.Universal_tool(this);
    },
		
		//获取选中模块项 （默认显示智能网格预报）
		getModule: function (moduleId){
			 //intelligentGridPrediction
			 //impactForecast
			 //bigDataAnalysis
			 //monitorAnalysis
			 //gridEdit
			 
			 this.hideModuleUI();
			 this.initModuleUI(moduleId);
		},
		
		//初始化界面
		initModuleUI: function (moduleId){
			 
			 if(moduleId == "intelligentGridPrediction"){
			 		 if(this.intelligentGridPrediction == null){
			 		 		this.intelligentGridPrediction = new IntelligentGridPrediction();
			 		 }
			 		 this.intelligentGridPrediction.initUI();
			 		 this.intelligentGridPrediction.handler();
			 		 
			 }else if(moduleId == "impactForecast"){
			 		 if(this.impactForecast == null){
			 		 		this.impactForecast = new ImpactForecast();
			 		 }
			 		 this.impactForecast.initUI();
			 		 this.impactForecast.handler();
			 		 
			 }else if(moduleId == "bigDataAnalysis"){
			 		 if(this.bigDataAnalysis == null){
			 		 		this.bigDataAnalysis = new BigDataAnalysis();
			 		 }
			 		 this.bigDataAnalysis.initUI();
			 		 this.bigDataAnalysis.handler();
			 		 
			 }else if(moduleId == "monitorAnalysis"){
			 		 if(this.monitorAnalysis == null){
			 		 		this.monitorAnalysis = new MonitorAnalysis();
			 		 }
			 		 this.monitorAnalysis.initUI();
			 		 this.monitorAnalysis.handler();
			 		 
			 }else if(moduleId == "gridEdit"){
			 		 if(this.gridEdit == null){
			 		 		this.gridEdit = new GridEdit();
			 		 }
			 		 this.gridEdit.initUI();
			 		 this.gridEdit.handler();
			 		 
			 }
			 
		},
		
		//隐藏界面DIV
		hideModuleUI: function (){
			 
			 
		}

});

//判断移动端还是PC端
function isMobile(){
    var sUserAgent= navigator.userAgent.toLowerCase(),
        bIsIpad= sUserAgent.match(/ipad/i) == "ipad",
        bIsIphoneOs= sUserAgent.match(/iphone os/i) == "iphone os",
        bIsMidp= sUserAgent.match(/midp/i) == "midp",
        bIsUc7= sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4",
        bIsUc= sUserAgent.match(/ucweb/i) == "ucweb",
        bIsAndroid= sUserAgent.match(/android/i) == "android",
        bIsCE= sUserAgent.match(/windows ce/i) == "windows ce",
        bIsWM= sUserAgent.match(/windows mobile/i) == "windows mobile",
        bIsWebview = sUserAgent.match(/webview/i) == "webview";
    return (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM);
}

function getTianDiTu(epsg, type) {
        var code;
        if (epsg === 4326)code = 'c';
        else if (epsg === 900913)code = 'w';
        var map, annotation;
        if (type === 'normal') {
            map = 'vec';
            annotation = 'v';
        } else if (type === 'satellite') {
            map = 'img';
            annotation = 'i';
        } else if (type === 'terrain') {
            map = 'ter';
            annotation = 't';
        }
        if (code && map && annotation) {
            return {
		            map:"http://t{s}.tianditu.com/DataServer?T=" + map + "_" + code + "&X={x}&Y={y}&L={z}&v=1.0.183",
		                annotation:"http://t{s}.tianditu.com/DataServer?T=c" + annotation + "a_" + code + "&X={x}&Y={y}&L={z}&v=1.0.183",
		                options:{subdomains:['0', '1', '2', '3', '4', '5', '6', '7'], zoomOffset:epsg === 4326 ? 1 : 0}
		        }
		    }
		}


ui.PaletteBar = L.Class.extend({
	initialize:function(app,options){
		this.application = app;
		this.options = options;
		var canvas = document.getElementById('palette_canvas');
		var ctx = canvas.getContext('2d');
		this.ctx =ctx;
		this.canvas=canvas;
	},
	show:function(){
		$('.palette_control').show();
		this.visible = true;
	},
	hide:function(){
		$('.palette_control').hide();
		this.visible = false;
	},
	update:function(paletteEntries){
		var totalWidth = 0;
		var limitLen = 0;
		var len=paletteEntries.length;
		if(paletteEntries.palettetype==="fix"){
			for(var i=0, l=len; i < l; i++){
				var entry = paletteEntries[i];
				var visible = entry.visible;
				if(visible != null && visible == "true"){
					limitLen++;
				}
			}
			totalWidth = limitLen*30;
			var canvas=this.canvas;
			canvas.width=totalWidth;
			canvas.height=30;
		}else if(paletteEntries.palettetype==="fixlabel"){
			for(var i=0, l=len; i < l; i++){
				var entry = paletteEntries[i];
				var visible = entry.visible;
				if(visible != null && visible == "true"){
					limitLen++;
				}
			}
			totalWidth = limitLen*80;
			var canvas=this.canvas;
			canvas.width=totalWidth;
			canvas.height=30;
		}else{
			limitLen = len;
			totalWidth=len*1;
			var canvas=this.canvas;
			canvas.width=totalWidth;
			canvas.height=30;
		}

		var ctx = this.ctx;
		ctx.clearRect(0,0,750,60);
		var itemWidth = Math.floor(totalWidth/limitLen);
		if(paletteEntries.palettetype==="fix") {
			var j = -1;
			for(var i=0, l=len; i < l; i++){
				var entry = paletteEntries[i];
				var visible = entry.visible;
				if(visible != null && visible == "true"){
					j++;
					var colorArray = entry.color.split(',');
					var r = colorArray[0];
					var g = colorArray[1];
					var b = colorArray[2];
					var color = 'rgb('+r+','+g+','+b+')';

					ctx.fillStyle = color;
					ctx.fillRect(itemWidth*j,-10,itemWidth,25);

					ctx.fillStyle = "#000000";
					ctx.font = "bold 10px 微软雅黑";
					var v = entry.value;
					ctx.fillText(v,j*30,28,18);
				}
			}
		}else if(paletteEntries.palettetype==="fixlabel") {
			var j = -1;
			for(var i=0, l=len; i < l; i++){
				var entry = paletteEntries[i];
				var visible = entry.visible;
				if(visible != null && visible == "true"){
					j++;
					var colorArray = entry.color.split(',');
					var r = colorArray[0];
					var g = colorArray[1];
					var b = colorArray[2];
					var color = 'rgb('+r+','+g+','+b+')';

					ctx.fillStyle = color;
					ctx.fillRect(itemWidth*j,-10,itemWidth,25);

					ctx.fillStyle = "#000000";
					ctx.font = "bold 10px 微软雅黑";
					var v = entry.label;
					ctx.fillText(v,j*80,28,68);
				}
			}
		}else {
			for(var i=0;i<len;i++){
				var entry = paletteEntries[i];
				var colorArray = entry.color.split(',');
				var r = colorArray[0];
				var g = colorArray[1];
				var b = colorArray[2];
				var color = 'rgb('+r+','+g+','+b+')';

				ctx.fillStyle = color;
				ctx.fillRect(itemWidth*i,-10,itemWidth,25);
			}
			var startValue = paletteEntries[0].value;
			var endValue = paletteEntries[len-1].value;

			var valueStep = Math.round(endValue-startValue)/8;
			var textIter = Math.floor(itemWidth*len/8)-3;
			for(var i=0;i<9;i++){
				ctx.fillStyle = "#000000";
				ctx.font = "bold 10px 微软雅黑";
				var v = startValue+i*valueStep;
				ctx.fillText(v.toFixed(1),textIter*i,28,18);
			}
		}

	}
})
// JavaScript Document
ui.Universal_tool = L.Class.extend({
	initialize: function (app, options) {
		this.application = app;

		var map = app.map;
		var layer1 = app.baseLayers[0];
		var layer2 = app.baseLayers[1];
		var layer3 = app.baseLayers[2];
		var layer4 = app.baseLayers[3];
		map.on('baselayeradd',function(layer){
			map.eachLayer(function(layer){
				if(layer instanceof shell.meteoNGLayer) {
					//layer.update();  //投影一致不需要更新   不一致则需要更新
					/*for(var k in layer.layers) {
					 var l = layer.layers[k];
					 if(l.created===true) {
					 l.layer.update();                                                                          
					 }
					 }*/
				}
			});
		});

		$(".Universal_tool04").mouseover(function () {
			$(".Universal_tool04").children("ul").show();
		}).mouseleave(function () {
			var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串//判断是否Fi
			if (userAgent.indexOf("IE") > -1) {
				/*$(".Universal_tool03").attr("style","background:url('images/Universal_tool03_s.png') center no-repeat rgb(111,125,149);");
				 $(".Universal_tool03 ul li:last-child").mouseleave(function () {
				 $(".Universal_tool03").attr("style","background:url('images/Universal_tool03.png') center no-repeat");
				 });*/
				$(".Universal_tool04 ul li:last-child").mouseleave(function () {
					$(".Universal_tool04").children("ul").hide();
				});
				$(this).siblings().mouseover(function(){
					$(".Universal_tool04").children("ul").hide();
				});

			}else{
				$(".Universal_tool04").children("ul").hide();
			}
		});

		$("#map1").live("click",function () {
            //mapId=1;
			mapClick=2;
			mapFlag=true;
			if(map.hasLayer(layer2)===true){
				map.removeLayer(layer2);
			}else if(map.hasLayer(layer3)===true){
				map.removeLayer(layer3);
			}else if(map.hasLayer(layer4)===true){
				map.removeLayer(layer4);
			}
			//var crs = new L.Proj.CRS('EPSG:4326');
			var center=map.getCenter();
			var zoom=map.getZoom();
			//map.options.crs = L.CRS.EPSG4326;
			map.options.crs = L.CRS.EPSG3857;
			map.setZoom(zoom);
			map.panTo(center);

			map.addLayer(app.baseLayers[0]);
			map.fire('baselayeradd');
			map.fire('viewreset');
			// map.panTo([40,117],map.options);
            //$(".pickValue_popup").css({color:"#fff"})
		});

		$("#map2").live("click",function () {
            //mapId=2;
			mapClick=2;
			mapFlag=true;
			if(map.hasLayer(layer1)===true){
				map.removeLayer(layer1);
			}else if(map.hasLayer(layer3)===true){
				map.removeLayer(layer3);
			}else if(map.hasLayer(layer4)===true){
				map.removeLayer(layer4);
			}
			var center=map.getCenter();
			var zoom=map.getZoom();
			//map.options.crs = L.CRS.EPSG4326;
			map.options.crs = L.CRS.EPSG3857;
			map.setZoom(zoom);
			map.panTo(center);

			map.addLayer(app.baseLayers[1]);
			map.fire('baselayeradd');
			map.fire('viewreset');
			// map.panTo([40,117],map.options);
            //$(".pickValue_popup").css({color:"#000"})
		});
		$("#map3").live("click",function () {
            //mapId=3;
			mapClick=2;
			mapFlag=true;
			if(map.hasLayer(layer1)===true){
				map.removeLayer(layer1);
			}else if(map.hasLayer(layer2)===true){
				map.removeLayer(layer2);
			}else if(map.hasLayer(layer4)===true){
				map.removeLayer(layer4);
			}
			var center=map.getCenter();
			var zoom=map.getZoom();
			map.options.crs = L.CRS.EPSG4326;
			map.setZoom(zoom);
			map.panTo(center);

			map.addLayer(app.baseLayers[2]);
			map.fire('baselayeradd');
			map.fire('viewreset');
			// map.panTo([40,117],map.options);
            //$(".pickValue_popup").css({color:"#000"})
		});

		$("#map4").live("click",function () {
            //mapId=4;
            mapClick=2;
			mapFlag=true;
			if(map.hasLayer(layer1)===true){
				map.removeLayer(layer1);
			}else if(map.hasLayer(layer2)===true){
				map.removeLayer(layer2);
			}else if(map.hasLayer(layer3)===true){
				map.removeLayer(layer3);
			}
			var center=map.getCenter();
			var zoom=map.getZoom();
			map.options.crs = L.CRS.EPSG4326;
			map.setZoom(zoom);
			map.panTo(center);

			map.addLayer(app.baseLayers[3]);
			map.fire('baselayeradd');
			map.fire('viewreset');
            //$(".pickValue_popup").css({color:"#000"})
		});


		var dialog05;
		$(".Universal_tool05").click(function () {
			map.panTo([28.7083333, 104.354167]);
			map.fitBounds([
				[2.760, 64.259],
				[54.693, 140.631]
			]);

		});


		$('.Universal_tool06').click(function(){
			map.exportImage();
		});

		//点击工具按钮显示影响预报
		//var uiFlag=true;
		$(".forecast").on("click",function(){
			$(".selectElementBox").show();

			$(".selectElementBox .close").on("click",function(){
				$(".selectElementBox").hide();

			});


			$(".uiMain").on("click",function(){
				//console.log($(".ui-hover-panel").attr("style").slice(-5,-1));
				$(".ui-hover-panel").show();
			})

		});

	}
});



// gif.js 0.2.0 - https://github.com/jnordberg/gif.js
(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.GIF = f()
    }
})(function() {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND",
                    f
                }
                var l = n[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports,
                function(e) {
                    var n = t[o][1][e];
                    return s(n ? n: e)
                },
                l, l.exports, e, t, n, r)
            }
            return n[o].exports
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++) s(r[o]);
        return s
    } ({
        1 : [function(require, module, exports) {
            function EventEmitter() {
                this._events = this._events || {};
                this._maxListeners = this._maxListeners || undefined
            }
            module.exports = EventEmitter;
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;
            EventEmitter.defaultMaxListeners = 10;
            EventEmitter.prototype.setMaxListeners = function(n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                this._maxListeners = n;
                return this
            };
            EventEmitter.prototype.emit = function(type) {
                var er, handler, len, args, i, listeners;
                if (!this._events) this._events = {};
                if (type === "error") {
                    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                        er = arguments[1];
                        if (er instanceof Error) {
                            throw er
                        } else {
                            var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                            err.context = er;
                            throw err
                        }
                    }
                }
                handler = this._events[type];
                if (isUndefined(handler)) return false;
                if (isFunction(handler)) {
                    switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;
                    case 2:
                        handler.call(this, arguments[1]);
                        break;
                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;
                    default:
                        args = Array.prototype.slice.call(arguments, 1);
                        handler.apply(this, args)
                    }
                } else if (isObject(handler)) {
                    args = Array.prototype.slice.call(arguments, 1);
                    listeners = handler.slice();
                    len = listeners.length;
                    for (i = 0; i < len; i++) listeners[i].apply(this, args)
                }
                return true
            };
            EventEmitter.prototype.addListener = function(type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events) this._events = {};
                if (this._events.newListener) this.emit("newListener", type, isFunction(listener.listener) ? listener.listener: listener);
                if (!this._events[type]) this._events[type] = listener;
                else if (isObject(this._events[type])) this._events[type].push(listener);
                else this._events[type] = [this._events[type], listener];
                if (isObject(this._events[type]) && !this._events[type].warned) {
                    if (!isUndefined(this._maxListeners)) {
                        m = this._maxListeners
                    } else {
                        m = EventEmitter.defaultMaxListeners
                    }
                    if (m && m > 0 && this._events[type].length > m) {
                        this._events[type].warned = true;
                        console.error("(node) warning: possible EventEmitter memory " + "leak detected. %d listeners added. " + "Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
                        if (typeof console.trace === "function") {
                            console.trace()
                        }
                    }
                }
                return this
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.once = function(type, listener) {
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = false;
                function g() {
                    this.removeListener(type, g);
                    if (!fired) {
                        fired = true;
                        listener.apply(this, arguments)
                    }
                }
                g.listener = listener;
                this.on(type, g);
                return this
            };
            EventEmitter.prototype.removeListener = function(type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                list = this._events[type];
                length = list.length;
                position = -1;
                if (list === listener || isFunction(list.listener) && list.listener === listener) {
                    delete this._events[type];
                    if (this._events.removeListener) this.emit("removeListener", type, listener)
                } else if (isObject(list)) {
                    for (i = length; i-->0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break
                        }
                    }
                    if (position < 0) return this;
                    if (list.length === 1) {
                        list.length = 0;
                        delete this._events[type]
                    } else {
                        list.splice(position, 1)
                    }
                    if (this._events.removeListener) this.emit("removeListener", type, listener)
                }
                return this
            };
            EventEmitter.prototype.removeAllListeners = function(type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) {
                    if (arguments.length === 0) this._events = {};
                    else if (this._events[type]) delete this._events[type];
                    return this
                }
                if (arguments.length === 0) {
                    for (key in this._events) {
                        if (key === "removeListener") continue;
                        this.removeAllListeners(key)
                    }
                    this.removeAllListeners("removeListener");
                    this._events = {};
                    return this
                }
                listeners = this._events[type];
                if (isFunction(listeners)) {
                    this.removeListener(type, listeners)
                } else if (listeners) {
                    while (listeners.length) this.removeListener(type, listeners[listeners.length - 1])
                }
                delete this._events[type];
                return this
            };
            EventEmitter.prototype.listeners = function(type) {
                var ret;
                if (!this._events || !this._events[type]) ret = [];
                else if (isFunction(this._events[type])) ret = [this._events[type]];
                else ret = this._events[type].slice();
                return ret
            };
            EventEmitter.prototype.listenerCount = function(type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    else if (evlistener) return evlistener.length
                }
                return 0
            };
            EventEmitter.listenerCount = function(emitter, type) {
                return emitter.listenerCount(type)
            };
            function isFunction(arg) {
                return typeof arg === "function"
            }
            function isNumber(arg) {
                return typeof arg === "number"
            }
            function isObject(arg) {
                return typeof arg === "object" && arg !== null
            }
            function isUndefined(arg) {
                return arg === void 0
            }
        },
        {}],
        2 : [function(require, module, exports) {
            var UA, browser, mode, platform, ua;
            ua = navigator.userAgent.toLowerCase();
            platform = navigator.platform.toLowerCase();
            UA = ua.match(/(opera|ie|firefox|chrome|version)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/) || [null, "unknown", 0];
            mode = UA[1] === "ie" && document.documentMode;
            browser = {
                name: UA[1] === "version" ? UA[3] : UA[1],
                version: mode || parseFloat(UA[1] === "opera" && UA[4] ? UA[4] : UA[2]),
                platform: {
                    name: ua.match(/ip(?:ad|od|hone)/) ? "ios": (ua.match(/(?:webos|android)/) || platform.match(/mac|win|linux/) || ["other"])[0]
                }
            };
            browser[browser.name] = true;
            browser[browser.name + parseInt(browser.version, 10)] = true;
            browser.platform[browser.platform.name] = true;
            module.exports = browser
        },
        {}],
        3 : [function(require, module, exports) {
            var EventEmitter, GIF, browser, extend = function(child, parent) {
                for (var key in parent) {
                    if (hasProp.call(parent, key)) child[key] = parent[key]
                }
                function ctor() {
                    this.constructor = child
                }
                ctor.prototype = parent.prototype;
                child.prototype = new ctor;
                child.__super__ = parent.prototype;
                return child
            },
            hasProp = {}.hasOwnProperty,
            indexOf = [].indexOf ||
            function(item) {
                for (var i = 0,
                l = this.length; i < l; i++) {
                    if (i in this && this[i] === item) return i
                }
                return - 1
            },
            slice = [].slice;
            EventEmitter = require("events").EventEmitter;
            browser = require("./browser.coffee");
            GIF = function(superClass) {
                var defaults, frameDefaults;
                extend(GIF, superClass);
                defaults = {
                    workerScript: "gif.worker.js",
                    workers: 2,
                    repeat: 0,
                    background: "#fff",
                    quality: 10,
                    width: null,
                    height: null,
                    transparent: null,
                    debug: false,
                    dither: false
                };
                frameDefaults = {
                    delay: 500,
                    copy: false
                };
                function GIF(options) {
                    var base, key, value;
                    this.running = false;
                    this.options = {};
                    this.frames = [];
                    this.freeWorkers = [];
                    this.activeWorkers = [];
                    this.setOptions(options);
                    for (key in defaults) {
                        value = defaults[key];
                        if ((base = this.options)[key] == null) {
                            base[key] = value
                        }
                    }
                }
                GIF.prototype.setOption = function(key, value) {
                    this.options[key] = value;
                    if (this._canvas != null && (key === "width" || key === "height")) {
                        return this._canvas[key] = value
                    }
                };
                GIF.prototype.setOptions = function(options) {
                    var key, results, value;
                    results = [];
                    for (key in options) {
                        if (!hasProp.call(options, key)) continue;
                        value = options[key];
                        results.push(this.setOption(key, value))
                    }
                    return results
                };
                GIF.prototype.addFrame = function(image, options) {
                    var frame, key;
                    if (options == null) {
                        options = {}
                    }
                    frame = {};
                    frame.transparent = this.options.transparent;
                    for (key in frameDefaults) {
                        frame[key] = options[key] || frameDefaults[key]
                    }
                    if (this.options.width == null) {
                        this.setOption("width", image.width)
                    }
                    if (this.options.height == null) {
                        this.setOption("height", image.height)
                    }
                    if (typeof ImageData !== "undefined" && ImageData !== null && image instanceof ImageData) {
                        frame.data = image.data
                    } else if (typeof CanvasRenderingContext2D !== "undefined" && CanvasRenderingContext2D !== null && image instanceof CanvasRenderingContext2D || typeof WebGLRenderingContext !== "undefined" && WebGLRenderingContext !== null && image instanceof WebGLRenderingContext) {
                        if (options.copy) {
                            frame.data = this.getContextData(image)
                        } else {
                            frame.context = image
                        }
                    } else if (image.childNodes != null) {
                        if (options.copy) {
                            frame.data = this.getImageData(image)
                        } else {
                            frame.image = image
                        }
                    } else {
                        throw new Error("Invalid image")
                    }
                    return this.frames.push(frame)
                };
                GIF.prototype.render = function() {
                    var i, j, numWorkers, ref;
                    if (this.running) {
                        throw new Error("Already running")
                    }
                    if (this.options.width == null || this.options.height == null) {
                        throw new Error("Width and height must be set prior to rendering")
                    }
                    this.running = true;
                    this.nextFrame = 0;
                    this.finishedFrames = 0;
                    this.imageParts = function() {
                        var j, ref, results;
                        results = [];
                        for (i = j = 0, ref = this.frames.length; 0 <= ref ? j < ref: j > ref; i = 0 <= ref ? ++j: --j) {
                            results.push(null)
                        }
                        return results
                    }.call(this);
                    numWorkers = this.spawnWorkers();
                    if (this.options.globalPalette === true) {
                        this.renderNextFrame()
                    } else {
                        for (i = j = 0, ref = numWorkers; 0 <= ref ? j < ref: j > ref; i = 0 <= ref ? ++j: --j) {
                            this.renderNextFrame()
                        }
                    }
                    this.emit("start");
                    return this.emit("progress", 0)
                };
                GIF.prototype.abort = function() {
                    var worker;
                    while (true) {
                        worker = this.activeWorkers.shift();
                        if (worker == null) {
                            break
                        }
                        this.log("killing active worker");
                        worker.terminate()
                    }
                    this.running = false;
                    return this.emit("abort")
                };
                GIF.prototype.spawnWorkers = function() {
                    var j, numWorkers, ref, results;
                    numWorkers = Math.min(this.options.workers, this.frames.length); (function() {
                        results = [];
                        for (var j = ref = this.freeWorkers.length; ref <= numWorkers ? j < numWorkers: j > numWorkers; ref <= numWorkers ? j++:j--) {
                            results.push(j)
                        }
                        return results
                    }).apply(this).forEach(function(_this) {
                        return function(i) {
                            var worker;
                            _this.log("spawning worker " + i);
                            worker = new Worker(_this.options.workerScript);
                            worker.onmessage = function(event) {
                                _this.activeWorkers.splice(_this.activeWorkers.indexOf(worker), 1);
                                _this.freeWorkers.push(worker);
                                return _this.frameFinished(event.data)
                            };
                            return _this.freeWorkers.push(worker)
                        }
                    } (this));
                    return numWorkers
                };
                GIF.prototype.frameFinished = function(frame) {
                    var i, j, ref;
                    this.log("frame " + frame.index + " finished - " + this.activeWorkers.length + " active");
                    this.finishedFrames++;
                    this.emit("progress", this.finishedFrames / this.frames.length);
                    this.imageParts[frame.index] = frame;
                    if (this.options.globalPalette === true) {
                        this.options.globalPalette = frame.globalPalette;
                        this.log("global palette analyzed");
                        if (this.frames.length > 2) {
                            for (i = j = 1, ref = this.freeWorkers.length; 1 <= ref ? j < ref: j > ref; i = 1 <= ref ? ++j: --j) {
                                this.renderNextFrame()
                            }
                        }
                    }
                    if (indexOf.call(this.imageParts, null) >= 0) {
                        return this.renderNextFrame()
                    } else {
                        return this.finishRendering()
                    }
                };
                GIF.prototype.finishRendering = function() {
                    var data, frame, i, image, j, k, l, len, len1, len2, len3, offset, page, ref, ref1, ref2;
                    len = 0;
                    ref = this.imageParts;
                    for (j = 0, len1 = ref.length; j < len1; j++) {
                        frame = ref[j];
                        len += (frame.data.length - 1) * frame.pageSize + frame.cursor
                    }
                    len += frame.pageSize - frame.cursor;
                    this.log("rendering finished - filesize " + Math.round(len / 1e3) + "kb");
                    data = new Uint8Array(len);
                    offset = 0;
                    ref1 = this.imageParts;
                    for (k = 0, len2 = ref1.length; k < len2; k++) {
                        frame = ref1[k];
                        ref2 = frame.data;
                        for (i = l = 0, len3 = ref2.length; l < len3; i = ++l) {
                            page = ref2[i];
                            data.set(page, offset);
                            if (i === frame.data.length - 1) {
                                offset += frame.cursor
                            } else {
                                offset += frame.pageSize
                            }
                        }
                    }
                    image = new Blob([data], {
                        type: "image/gif"
                    });
                    return this.emit("finished", image, data)
                };
                GIF.prototype.renderNextFrame = function() {
                    var frame, task, worker;
                    if (this.freeWorkers.length === 0) {
                        throw new Error("No free workers")
                    }
                    if (this.nextFrame >= this.frames.length) {
                        return
                    }
                    frame = this.frames[this.nextFrame++];
                    worker = this.freeWorkers.shift();
                    task = this.getTask(frame);
                    this.log("starting frame " + (task.index + 1) + " of " + this.frames.length);
                    this.activeWorkers.push(worker);
                    return worker.postMessage(task)
                };
                GIF.prototype.getContextData = function(ctx) {
                    return ctx.getImageData(0, 0, this.options.width, this.options.height).data
                };
                GIF.prototype.getImageData = function(image) {
                    var ctx;
                    if (this._canvas == null) {
                        this._canvas = document.createElement("canvas");
                        this._canvas.width = this.options.width;
                        this._canvas.height = this.options.height
                    }
                    ctx = this._canvas.getContext("2d");
                    ctx.setFill = this.options.background;
                    ctx.fillRect(0, 0, this.options.width, this.options.height);
                    ctx.drawImage(image, 0, 0);
                    return this.getContextData(ctx)
                };
                GIF.prototype.getTask = function(frame) {
                    var index, task;
                    index = this.frames.indexOf(frame);
                    task = {
                        index: index,
                        last: index === this.frames.length - 1,
                        delay: frame.delay,
                        transparent: frame.transparent,
                        width: this.options.width,
                        height: this.options.height,
                        quality: this.options.quality,
                        dither: this.options.dither,
                        globalPalette: this.options.globalPalette,
                        repeat: this.options.repeat,
                        canTransfer: browser.name === "chrome"
                    };
                    if (frame.data != null) {
                        task.data = frame.data
                    } else if (frame.context != null) {
                        task.data = this.getContextData(frame.context)
                    } else if (frame.image != null) {
                        task.data = this.getImageData(frame.image)
                    } else {
                        throw new Error("Invalid frame")
                    }
                    return task
                };
                GIF.prototype.log = function() {
                    var args;
                    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                    if (!this.options.debug) {
                        return
                    }
                    return console.log.apply(console, args)
                };
                return GIF
            } (EventEmitter);
            module.exports = GIF
        },
        {
            "./browser.coffee": 2,
            events: 1
        }]
    },
    {},
    [3])(3)
});
//# sourceMappingURL=gif.js.map

/*Copyrights for code authored by Yahoo Inc. is licensed under the following terms:
MIT License
Copyright  2015 Yahoo Inc.
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
;(function(window, document, navigator, undefined) {
var utils, error, defaultOptions, isSupported, isWebCamGIFSupported, isExistingImagesGIFSupported, isExistingVideoGIFSupported, NeuQuant, processFrameWorker, gifWriter, AnimatedGIF, getBase64GIF, existingImages, screenShot, videoStream, stopVideoStreaming, createAndGetGIF, existingVideo, existingWebcam, createGIF, takeSnapShot, API;
utils = function () {
  var utils = {
    'URL': window.URL || window.webkitURL || window.mozURL || window.msURL,
    'getUserMedia': function () {
      var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
      return getUserMedia ? getUserMedia.bind(navigator) : getUserMedia;
    }(),
    'requestAnimFrame': window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame,
    'requestTimeout': function (callback, delay) {
      callback = callback || utils.noop;
      delay = delay || 0;
      if (!utils.requestAnimFrame) {
        return setTimeout(callback, delay);
      }
      var start = new Date().getTime(), handle = new Object(), requestAnimFrame = utils.requestAnimFrame;
      function loop() {
        var current = new Date().getTime(), delta = current - start;
        delta >= delay ? callback.call() : handle.value = requestAnimFrame(loop);
      }
      handle.value = requestAnimFrame(loop);
      return handle;
    },
    'Blob': window.Blob || window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder,
    'btoa': function () {
      var btoa = window.btoa || function (input) {
        var output = '', i = 0, l = input.length, key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        while (i < l) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = (chr1 & 3) << 4 | chr2 >> 4;
          enc3 = (chr2 & 15) << 2 | chr3 >> 6;
          enc4 = chr3 & 63;
          if (isNaN(chr2))
            enc3 = enc4 = 64;
          else if (isNaN(chr3))
            enc4 = 64;
          output = output + key.charAt(enc1) + key.charAt(enc2) + key.charAt(enc3) + key.charAt(enc4);
        }
        return output;
      };
      return btoa ? btoa.bind(window) : function () {
      };
    }(),
    'isObject': function (obj) {
      return obj && Object.prototype.toString.call(obj) === '[object Object]';
    },
    'isEmptyObject': function (obj) {
      return utils.isObject(obj) && !Object.keys(obj).length;
    },
    'isArray': function (arr) {
      return arr && Array.isArray(arr);
    },
    'isFunction': function (func) {
      return func && typeof func === 'function';
    },
    'isElement': function (elem) {
      return elem && elem.nodeType === 1;
    },
    'isString': function (value) {
      return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';
    },
    'isSupported': {
      'canvas': function () {
        var el = document.createElement('canvas');
        return el && el.getContext && el.getContext('2d');
      },
      'webworkers': function () {
        return window.Worker;
      },
      'blob': function () {
        return utils.Blob;
      },
      'Uint8Array': function () {
        return window.Uint8Array;
      },
      'Uint32Array': function () {
        return window.Uint32Array;
      },
      'videoCodecs': function () {
        var testEl = document.createElement('video'), supportObj = {
            'mp4': false,
            'h264': false,
            'ogv': false,
            'ogg': false,
            'webm': false
          };
        try {
          if (testEl && testEl.canPlayType) {
            supportObj.mp4 = testEl.canPlayType('video/mp4; codecs="mp4v.20.8"') !== '';
            supportObj.h264 = (testEl.canPlayType('video/mp4; codecs="avc1.42E01E"') || testEl.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')) !== '';
            supportObj.ogv = testEl.canPlayType('video/ogg; codecs="theora"') !== '';
            supportObj.ogg = testEl.canPlayType('video/ogg; codecs="theora"') !== '';
            supportObj.webm = testEl.canPlayType('video/webm; codecs="vp8, vorbis"') !== -1;
          }
        } catch (e) {
        }
        return supportObj;
      }()
    },
    'noop': function () {
    },
    'each': function (collection, callback) {
      var x, len;
      if (utils.isArray(collection)) {
        x = -1;
        len = collection.length;
        while (++x < len) {
          if (callback(x, collection[x]) === false) {
            break;
          }
        }
      } else if (utils.isObject(collection)) {
        for (x in collection) {
          if (collection.hasOwnProperty(x)) {
            if (callback(x, collection[x]) === false) {
              break;
            }
          }
        }
      }
    },
    'mergeOptions': function deepMerge(defaultOptions, userOptions) {
      if (!utils.isObject(defaultOptions) || !utils.isObject(userOptions) || !Object.keys) {
        return;
      }
      var newObj = {};
      utils.each(defaultOptions, function (key, val) {
        newObj[key] = defaultOptions[key];
      });
      utils.each(userOptions, function (key, val) {
        var currentUserOption = userOptions[key];
        if (!utils.isObject(currentUserOption)) {
          newObj[key] = currentUserOption;
        } else {
          if (!defaultOptions[key]) {
            newObj[key] = currentUserOption;
          } else {
            newObj[key] = deepMerge(defaultOptions[key], currentUserOption);
          }
        }
      });
      return newObj;
    },
    'setCSSAttr': function (elem, attr, val) {
      if (!utils.isElement(elem)) {
        return;
      }
      if (utils.isString(attr) && utils.isString(val)) {
        elem.style[attr] = val;
      } else if (utils.isObject(attr)) {
        utils.each(attr, function (key, val) {
          elem.style[key] = val;
        });
      }
    },
    'removeElement': function (node) {
      if (!utils.isElement(node)) {
        return;
      }
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    },
    'createWebWorker': function (content) {
      if (!utils.isString(content)) {
        return {};
      }
      try {
        var blob = new utils.Blob([content], { 'type': 'text/javascript' }), objectUrl = utils.URL.createObjectURL(blob), worker = new Worker(objectUrl);
        return {
          'objectUrl': objectUrl,
          'worker': worker
        };
      } catch (e) {
        return '' + e;
      }
    },
    'getExtension': function (src) {
      return src.substr(src.lastIndexOf('.') + 1, src.length);
    },
    'getFontSize': function (options) {
      options = options || {};
      if (!document.body || options.resizeFont === false) {
        return options.fontSize;
      }
      var text = options.text, containerWidth = options.gifWidth, fontSize = parseInt(options.fontSize, 10), minFontSize = parseInt(options.minFontSize, 10), div = document.createElement('div'), span = document.createElement('span');
      div.setAttribute('width', containerWidth);
      div.appendChild(span);
      span.innerHTML = text;
      span.style.fontSize = fontSize + 'px';
      span.style.textIndent = '-9999px';
      span.style.visibility = 'hidden';
      document.body.appendChild(span);
      while (span.offsetWidth > containerWidth && fontSize >= minFontSize) {
        span.style.fontSize = --fontSize + 'px';
      }
      document.body.removeChild(span);
      return fontSize + 'px';
    },
    'webWorkerError': false
  };
  return utils;
}();
error = function (utils) {
  var error = {
    'validate': function (skipObj) {
      skipObj = utils.isObject(skipObj) ? skipObj : {};
      var errorObj = {};
      utils.each(error.validators, function (indece, currentValidator) {
        var errorCode = currentValidator.errorCode;
        if (!skipObj[errorCode] && !currentValidator.condition) {
          errorObj = currentValidator;
          errorObj.error = true;
          return false;
        }
      });
      delete errorObj.condition;
      return errorObj;
    },
    'isValid': function (skipObj) {
      var errorObj = error.validate(skipObj), isValid = errorObj.error !== true ? true : false;
      return isValid;
    },
    'validators': [
      {
        'condition': utils.isFunction(utils.getUserMedia),
        'errorCode': 'getUserMedia',
        'errorMsg': 'The getUserMedia API is not supported in your browser'
      },
      {
        'condition': utils.isSupported.canvas(),
        'errorCode': 'canvas',
        'errorMsg': 'Canvas elements are not supported in your browser'
      },
      {
        'condition': utils.isSupported.webworkers(),
        'errorCode': 'webworkers',
        'errorMsg': 'The Web Workers API is not supported in your browser'
      },
      {
        'condition': utils.isFunction(utils.URL),
        'errorCode': 'window.URL',
        'errorMsg': 'The window.URL API is not supported in your browser'
      },
      {
        'condition': utils.isSupported.blob(),
        'errorCode': 'window.Blob',
        'errorMsg': 'The window.Blob File API is not supported in your browser'
      },
      {
        'condition': utils.isSupported.Uint8Array(),
        'errorCode': 'window.Uint8Array',
        'errorMsg': 'The window.Uint8Array function constructor is not supported in your browser'
      },
      {
        'condition': utils.isSupported.Uint32Array(),
        'errorCode': 'window.Uint32Array',
        'errorMsg': 'The window.Uint32Array function constructor is not supported in your browser'
      }
    ],
    'messages': {
      'videoCodecs': {
        'errorCode': 'videocodec',
        'errorMsg': 'The video codec you are trying to use is not supported in your browser'
      }
    }
  };
  return error;
}(utils);
defaultOptions = {
  'sampleInterval': 10,
  'numWorkers': 2,
  'gifWidth': 200,
  'gifHeight': 200,
  'interval': 0.1,
  'numFrames': 10,
  'keepCameraOn': false,
  'images': [],
  'video': null,
  'webcamVideoElement': null,
  'cameraStream': null,
  'text': '',
  'fontWeight': 'normal',
  'fontSize': '16px',
  'minFontSize': '10px',
  'resizeFont': false,
  'fontFamily': 'sans-serif',
  'fontColor': '#ffffff',
  'textAlign': 'center',
  'textBaseline': 'bottom',
  'textXCoordinate': null,
  'textYCoordinate': null,
  'progressCallback': function (captureProgress) {
  },
  'completeCallback': function () {
  },
  'saveRenderingContexts': false,
  'savedRenderingContexts': [],
  'crossOrigin': 'Anonymous'
};
isSupported = function () {
  return error.isValid();
};
isWebCamGIFSupported = function () {
  return error.isValid();
};
isExistingImagesGIFSupported = function () {
  var skipObj = { 'getUserMedia': true };
  return error.isValid(skipObj);
};
isExistingVideoGIFSupported = function (codecs) {
  var isSupported = false, hasValidCodec = false;
  if (utils.isArray(codecs) && codecs.length) {
    utils.each(codecs, function (indece, currentCodec) {
      if (utils.isSupported.videoCodecs[currentCodec]) {
        hasValidCodec = true;
      }
    });
    if (!hasValidCodec) {
      return false;
    }
  } else if (utils.isString(codecs) && codecs.length) {
    if (!utils.isSupported.videoCodecs[codecs]) {
      return false;
    }
  }
  return error.isValid({ 'getUserMedia': true });
};
NeuQuant = function () {
  function NeuQuant() {
    var netsize = 256;
    var prime1 = 499;
    var prime2 = 491;
    var prime3 = 487;
    var prime4 = 503;
    var minpicturebytes = 3 * prime4;
    var maxnetpos = netsize - 1;
    var netbiasshift = 4;
    var ncycles = 100;
    var intbiasshift = 16;
    var intbias = 1 << intbiasshift;
    var gammashift = 10;
    var gamma = 1 << gammashift;
    var betashift = 10;
    var beta = intbias >> betashift;
    var betagamma = intbias << gammashift - betashift;
    var initrad = netsize >> 3;
    var radiusbiasshift = 6;
    var radiusbias = 1 << radiusbiasshift;
    var initradius = initrad * radiusbias;
    var radiusdec = 30;
    var alphabiasshift = 10;
    var initalpha = 1 << alphabiasshift;
    var alphadec;
    var radbiasshift = 8;
    var radbias = 1 << radbiasshift;
    var alpharadbshift = alphabiasshift + radbiasshift;
    var alpharadbias = 1 << alpharadbshift;
    var thepicture;
    var lengthcount;
    var samplefac;
    var network;
    var netindex = [];
    var bias = [];
    var freq = [];
    var radpower = [];
    function NeuQuantConstructor(thepic, len, sample) {
      var i;
      var p;
      thepicture = thepic;
      lengthcount = len;
      samplefac = sample;
      network = new Array(netsize);
      for (i = 0; i < netsize; i++) {
        network[i] = new Array(4);
        p = network[i];
        p[0] = p[1] = p[2] = (i << netbiasshift + 8) / netsize | 0;
        freq[i] = intbias / netsize | 0;
        bias[i] = 0;
      }
    }
    function colorMap() {
      var map = [];
      var index = new Array(netsize);
      for (var i = 0; i < netsize; i++)
        index[network[i][3]] = i;
      var k = 0;
      for (var l = 0; l < netsize; l++) {
        var j = index[l];
        map[k++] = network[j][0];
        map[k++] = network[j][1];
        map[k++] = network[j][2];
      }
      return map;
    }
    function inxbuild() {
      var i;
      var j;
      var smallpos;
      var smallval;
      var p;
      var q;
      var previouscol;
      var startpos;
      previouscol = 0;
      startpos = 0;
      for (i = 0; i < netsize; i++) {
        p = network[i];
        smallpos = i;
        smallval = p[1];
        for (j = i + 1; j < netsize; j++) {
          q = network[j];
          if (q[1] < smallval) {
            smallpos = j;
            smallval = q[1];
          }
        }
        q = network[smallpos];
        if (i != smallpos) {
          j = q[0];
          q[0] = p[0];
          p[0] = j;
          j = q[1];
          q[1] = p[1];
          p[1] = j;
          j = q[2];
          q[2] = p[2];
          p[2] = j;
          j = q[3];
          q[3] = p[3];
          p[3] = j;
        }
        if (smallval != previouscol) {
          netindex[previouscol] = startpos + i >> 1;
          for (j = previouscol + 1; j < smallval; j++) {
            netindex[j] = i;
          }
          previouscol = smallval;
          startpos = i;
        }
      }
      netindex[previouscol] = startpos + maxnetpos >> 1;
      for (j = previouscol + 1; j < 256; j++) {
        netindex[j] = maxnetpos;
      }
    }
    function learn() {
      var i;
      var j;
      var b;
      var g;
      var r;
      var radius;
      var rad;
      var alpha;
      var step;
      var delta;
      var samplepixels;
      var p;
      var pix;
      var lim;
      if (lengthcount < minpicturebytes) {
        samplefac = 1;
      }
      alphadec = 30 + (samplefac - 1) / 3;
      p = thepicture;
      pix = 0;
      lim = lengthcount;
      samplepixels = lengthcount / (3 * samplefac);
      delta = samplepixels / ncycles | 0;
      alpha = initalpha;
      radius = initradius;
      rad = radius >> radiusbiasshift;
      if (rad <= 1) {
        rad = 0;
      }
      for (i = 0; i < rad; i++) {
        radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));
      }
      if (lengthcount < minpicturebytes) {
        step = 3;
      } else if (lengthcount % prime1 !== 0) {
        step = 3 * prime1;
      } else {
        if (lengthcount % prime2 !== 0) {
          step = 3 * prime2;
        } else {
          if (lengthcount % prime3 !== 0) {
            step = 3 * prime3;
          } else {
            step = 3 * prime4;
          }
        }
      }
      i = 0;
      while (i < samplepixels) {
        b = (p[pix + 0] & 255) << netbiasshift;
        g = (p[pix + 1] & 255) << netbiasshift;
        r = (p[pix + 2] & 255) << netbiasshift;
        j = contest(b, g, r);
        altersingle(alpha, j, b, g, r);
        if (rad !== 0) {
          alterneigh(rad, j, b, g, r);
        }
        pix += step;
        if (pix >= lim) {
          pix -= lengthcount;
        }
        i++;
        if (delta === 0) {
          delta = 1;
        }
        if (i % delta === 0) {
          alpha -= alpha / alphadec;
          radius -= radius / radiusdec;
          rad = radius >> radiusbiasshift;
          if (rad <= 1) {
            rad = 0;
          }
          for (j = 0; j < rad; j++) {
            radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad));
          }
        }
      }
    }
    function map(b, g, r) {
      var i;
      var j;
      var dist;
      var a;
      var bestd;
      var p;
      var best;
      bestd = 1000;
      best = -1;
      i = netindex[g];
      j = i - 1;
      while (i < netsize || j >= 0) {
        if (i < netsize) {
          p = network[i];
          dist = p[1] - g;
          if (dist >= bestd) {
            i = netsize;
          } else {
            i++;
            if (dist < 0) {
              dist = -dist;
            }
            a = p[0] - b;
            if (a < 0) {
              a = -a;
            }
            dist += a;
            if (dist < bestd) {
              a = p[2] - r;
              if (a < 0) {
                a = -a;
              }
              dist += a;
              if (dist < bestd) {
                bestd = dist;
                best = p[3];
              }
            }
          }
        }
        if (j >= 0) {
          p = network[j];
          dist = g - p[1];
          if (dist >= bestd) {
            j = -1;
          } else {
            j--;
            if (dist < 0) {
              dist = -dist;
            }
            a = p[0] - b;
            if (a < 0) {
              a = -a;
            }
            dist += a;
            if (dist < bestd) {
              a = p[2] - r;
              if (a < 0) {
                a = -a;
              }
              dist += a;
              if (dist < bestd) {
                bestd = dist;
                best = p[3];
              }
            }
          }
        }
      }
      return best;
    }
    function process() {
      learn();
      unbiasnet();
      inxbuild();
      return colorMap();
    }
    function unbiasnet() {
      var i;
      var j;
      for (i = 0; i < netsize; i++) {
        network[i][0] >>= netbiasshift;
        network[i][1] >>= netbiasshift;
        network[i][2] >>= netbiasshift;
        network[i][3] = i;
      }
    }
    function alterneigh(rad, i, b, g, r) {
      var j;
      var k;
      var lo;
      var hi;
      var a;
      var m;
      var p;
      lo = i - rad;
      if (lo < -1) {
        lo = -1;
      }
      hi = i + rad;
      if (hi > netsize) {
        hi = netsize;
      }
      j = i + 1;
      k = i - 1;
      m = 1;
      while (j < hi || k > lo) {
        a = radpower[m++];
        if (j < hi) {
          p = network[j++];
          try {
            p[0] -= a * (p[0] - b) / alpharadbias | 0;
            p[1] -= a * (p[1] - g) / alpharadbias | 0;
            p[2] -= a * (p[2] - r) / alpharadbias | 0;
          } catch (e) {
          }
        }
        if (k > lo) {
          p = network[k--];
          try {
            p[0] -= a * (p[0] - b) / alpharadbias | 0;
            p[1] -= a * (p[1] - g) / alpharadbias | 0;
            p[2] -= a * (p[2] - r) / alpharadbias | 0;
          } catch (e) {
          }
        }
      }
    }
    function altersingle(alpha, i, b, g, r) {
      var n = network[i];
      var alphaMult = alpha / initalpha;
      n[0] -= alphaMult * (n[0] - b) | 0;
      n[1] -= alphaMult * (n[1] - g) | 0;
      n[2] -= alphaMult * (n[2] - r) | 0;
    }
    function contest(b, g, r) {
      var i;
      var dist;
      var a;
      var biasdist;
      var betafreq;
      var bestpos;
      var bestbiaspos;
      var bestd;
      var bestbiasd;
      var n;
      bestd = ~(1 << 31);
      bestbiasd = bestd;
      bestpos = -1;
      bestbiaspos = bestpos;
      for (i = 0; i < netsize; i++) {
        n = network[i];
        dist = n[0] - b;
        if (dist < 0) {
          dist = -dist;
        }
        a = n[1] - g;
        if (a < 0) {
          a = -a;
        }
        dist += a;
        a = n[2] - r;
        if (a < 0) {
          a = -a;
        }
        dist += a;
        if (dist < bestd) {
          bestd = dist;
          bestpos = i;
        }
        biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);
        if (biasdist < bestbiasd) {
          bestbiasd = biasdist;
          bestbiaspos = i;
        }
        betafreq = freq[i] >> betashift;
        freq[i] -= betafreq;
        bias[i] += betafreq << gammashift;
      }
      freq[bestpos] += beta;
      bias[bestpos] -= betagamma;
      return bestbiaspos;
    }
    NeuQuantConstructor.apply(this, arguments);
    var exports = {};
    exports.map = map;
    exports.process = process;
    return exports;
  }
  return NeuQuant;
}();
processFrameWorker = function (NeuQuant) {
  var workerCode = function () {
    try {
      self.onmessage = function (ev) {
        var data = ev.data || {};
        var response;
        if (data.gifshot) {
          response = workerMethods.run(data);
          postMessage(response);
        }
      };
    } catch (e) {
    }
    var workerMethods = {
      'dataToRGB': function (data, width, height) {
        var i = 0, length = width * height * 4, rgb = [];
        while (i < length) {
          rgb.push(data[i++]);
          rgb.push(data[i++]);
          rgb.push(data[i++]);
          i++;
        }
        return rgb;
      },
      'componentizedPaletteToArray': function (paletteRGB) {
        var paletteArray = [], i, r, g, b;
        for (i = 0; i < paletteRGB.length; i += 3) {
          r = paletteRGB[i];
          g = paletteRGB[i + 1];
          b = paletteRGB[i + 2];
          paletteArray.push(r << 16 | g << 8 | b);
        }
        return paletteArray;
      },
      'processFrameWithQuantizer': function (imageData, width, height, sampleInterval) {
        var rgbComponents = this.dataToRGB(imageData, width, height), nq = new NeuQuant(rgbComponents, rgbComponents.length, sampleInterval), paletteRGB = nq.process(), paletteArray = new Uint32Array(this.componentizedPaletteToArray(paletteRGB)), numberPixels = width * height, indexedPixels = new Uint8Array(numberPixels), k = 0, i, r, g, b;
        for (i = 0; i < numberPixels; i++) {
          r = rgbComponents[k++];
          g = rgbComponents[k++];
          b = rgbComponents[k++];
          indexedPixels[i] = nq.map(r, g, b);
        }
        return {
          pixels: indexedPixels,
          palette: paletteArray
        };
      },
      'run': function (frame) {
        var width = frame.width, height = frame.height, imageData = frame.data, palette = frame.palette, sampleInterval = frame.sampleInterval;
        return this.processFrameWithQuantizer(imageData, width, height, sampleInterval);
      }
    };
    return workerMethods;
  };
  return workerCode;
}(NeuQuant);
gifWriter = function gifWriter(buf, width, height, gopts) {
  var p = 0;
  gopts = gopts === undefined ? {} : gopts;
  var loop_count = gopts.loop === undefined ? null : gopts.loop;
  var global_palette = gopts.palette === undefined ? null : gopts.palette;
  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)
    throw 'Width/Height invalid.';
  function check_palette_and_num_colors(palette) {
    var num_colors = palette.length;
    if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1)
      throw 'Invalid code/color length, must be power of 2 and 2 .. 256.';
    return num_colors;
  }
  buf[p++] = 71;
  buf[p++] = 73;
  buf[p++] = 70;
  buf[p++] = 56;
  buf[p++] = 57;
  buf[p++] = 97;
  var gp_num_colors_pow2 = 0;
  var background = 0;
  buf[p++] = width & 255;
  buf[p++] = width >> 8 & 255;
  buf[p++] = height & 255;
  buf[p++] = height >> 8 & 255;
  buf[p++] = (global_palette !== null ? 128 : 0) | gp_num_colors_pow2;
  buf[p++] = background;
  buf[p++] = 0;
  if (loop_count !== null) {
    if (loop_count < 0 || loop_count > 65535)
      throw 'Loop count invalid.';
    buf[p++] = 33;
    buf[p++] = 255;
    buf[p++] = 11;
    buf[p++] = 78;
    buf[p++] = 69;
    buf[p++] = 84;
    buf[p++] = 83;
    buf[p++] = 67;
    buf[p++] = 65;
    buf[p++] = 80;
    buf[p++] = 69;
    buf[p++] = 50;
    buf[p++] = 46;
    buf[p++] = 48;
    buf[p++] = 3;
    buf[p++] = 1;
    buf[p++] = loop_count & 255;
    buf[p++] = loop_count >> 8 & 255;
    buf[p++] = 0;
  }
  var ended = false;
  this.addFrame = function (x, y, w, h, indexed_pixels, opts) {
    if (ended === true) {
      --p;
      ended = false;
    }
    opts = opts === undefined ? {} : opts;
    if (x < 0 || y < 0 || x > 65535 || y > 65535)
      throw 'x/y invalid.';
    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
      throw 'Width/Height invalid.';
    if (indexed_pixels.length < w * h)
      throw 'Not enough pixels for the frame size.';
    var using_local_palette = true;
    var palette = opts.palette;
    if (palette === undefined || palette === null) {
      using_local_palette = false;
      palette = global_palette;
    }
    if (palette === undefined || palette === null)
      throw 'Must supply either a local or global palette.';
    var num_colors = check_palette_and_num_colors(palette);
    var min_code_size = 0;
    while (num_colors >>= 1)
      ++min_code_size;
    num_colors = 1 << min_code_size;
    var delay = opts.delay === undefined ? 0 : opts.delay;
    var disposal = opts.disposal === undefined ? 0 : opts.disposal;
    if (disposal < 0 || disposal > 3)
      throw 'Disposal out of range.';
    var use_transparency = false;
    var transparent_index = 0;
    if (opts.transparent !== undefined && opts.transparent !== null) {
      use_transparency = true;
      transparent_index = opts.transparent;
      if (transparent_index < 0 || transparent_index >= num_colors)
        throw 'Transparent color index.';
    }
    if (disposal !== 0 || use_transparency || delay !== 0) {
      buf[p++] = 33;
      buf[p++] = 249;
      buf[p++] = 4;
      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
      buf[p++] = delay & 255;
      buf[p++] = delay >> 8 & 255;
      buf[p++] = transparent_index;
      buf[p++] = 0;
    }
    buf[p++] = 44;
    buf[p++] = x & 255;
    buf[p++] = x >> 8 & 255;
    buf[p++] = y & 255;
    buf[p++] = y >> 8 & 255;
    buf[p++] = w & 255;
    buf[p++] = w >> 8 & 255;
    buf[p++] = h & 255;
    buf[p++] = h >> 8 & 255;
    buf[p++] = using_local_palette === true ? 128 | min_code_size - 1 : 0;
    if (using_local_palette === true) {
      for (var i = 0, il = palette.length; i < il; ++i) {
        var rgb = palette[i];
        buf[p++] = rgb >> 16 & 255;
        buf[p++] = rgb >> 8 & 255;
        buf[p++] = rgb & 255;
      }
    }
    p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);
  };
  this.end = function () {
    if (ended === false) {
      buf[p++] = 59;
      ended = true;
    }
    return p;
  };
  function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
    buf[p++] = min_code_size;
    var cur_subblock = p++;
    var clear_code = 1 << min_code_size;
    var code_mask = clear_code - 1;
    var eoi_code = clear_code + 1;
    var next_code = eoi_code + 1;
    var cur_code_size = min_code_size + 1;
    var cur_shift = 0;
    var cur = 0;
    function emit_bytes_to_buffer(bit_block_size) {
      while (cur_shift >= bit_block_size) {
        buf[p++] = cur & 255;
        cur >>= 8;
        cur_shift -= 8;
        if (p === cur_subblock + 256) {
          buf[cur_subblock] = 255;
          cur_subblock = p++;
        }
      }
    }
    function emit_code(c) {
      cur |= c << cur_shift;
      cur_shift += cur_code_size;
      emit_bytes_to_buffer(8);
    }
    var ib_code = index_stream[0] & code_mask;
    var code_table = {};
    emit_code(clear_code);
    for (var i = 1, il = index_stream.length; i < il; ++i) {
      var k = index_stream[i] & code_mask;
      var cur_key = ib_code << 8 | k;
      var cur_code = code_table[cur_key];
      if (cur_code === undefined) {
        cur |= ib_code << cur_shift;
        cur_shift += cur_code_size;
        while (cur_shift >= 8) {
          buf[p++] = cur & 255;
          cur >>= 8;
          cur_shift -= 8;
          if (p === cur_subblock + 256) {
            buf[cur_subblock] = 255;
            cur_subblock = p++;
          }
        }
        if (next_code === 4096) {
          emit_code(clear_code);
          next_code = eoi_code + 1;
          cur_code_size = min_code_size + 1;
          code_table = {};
        } else {
          if (next_code >= 1 << cur_code_size)
            ++cur_code_size;
          code_table[cur_key] = next_code++;
        }
        ib_code = k;
      } else {
        ib_code = cur_code;
      }
    }
    emit_code(ib_code);
    emit_code(eoi_code);
    emit_bytes_to_buffer(1);
    if (cur_subblock + 1 === p) {
      buf[cur_subblock] = 0;
    } else {
      buf[cur_subblock] = p - cur_subblock - 1;
      buf[p++] = 0;
    }
    return p;
  }
};
AnimatedGIF = function (utils, frameWorkerCode, NeuQuant, GifWriter) {
  var AnimatedGIF = function (options) {
    this.canvas = null;
    this.ctx = null;
    this.repeat = 0;
    this.frames = [];
    this.numRenderedFrames = 0;
    this.onRenderCompleteCallback = utils.noop;
    this.onRenderProgressCallback = utils.noop;
    this.workers = [];
    this.availableWorkers = [];
    this.generatingGIF = false;
    this.options = options;
    this.initializeWebWorkers(options);
  };
  AnimatedGIF.prototype = {
    'workerMethods': frameWorkerCode(),
    'initializeWebWorkers': function (options) {
      var processFrameWorkerCode = NeuQuant.toString() + '(' + frameWorkerCode.toString() + '());', webWorkerObj, objectUrl, webWorker, numWorkers, x = -1, workerError = '';
      numWorkers = options.numWorkers;
      while (++x < numWorkers) {
        webWorkerObj = utils.createWebWorker(processFrameWorkerCode);
        if (utils.isObject(webWorkerObj)) {
          objectUrl = webWorkerObj.objectUrl;
          webWorker = webWorkerObj.worker;
          this.workers.push({
            'worker': webWorker,
            'objectUrl': objectUrl
          });
          this.availableWorkers.push(webWorker);
        } else {
          workerError = webWorkerObj;
          utils.webWorkerError = !!webWorkerObj;
        }
      }
      this.workerError = workerError;
      this.canvas = document.createElement('canvas');
      this.canvas.width = options.gifWidth;
      this.canvas.height = options.gifHeight;
      this.ctx = this.canvas.getContext('2d');
      this.frames = [];
    },
    'getWorker': function () {
      return this.availableWorkers.pop();
    },
    'freeWorker': function (worker) {
      this.availableWorkers.push(worker);
    },
    'byteMap': function () {
      var byteMap = [];
      for (var i = 0; i < 256; i++) {
        byteMap[i] = String.fromCharCode(i);
      }
      return byteMap;
    }(),
    'bufferToString': function (buffer) {
      var numberValues = buffer.length, str = '', x = -1;
      while (++x < numberValues) {
        str += this.byteMap[buffer[x]];
      }
      return str;
    },
    'onFrameFinished': function (progressCallback) {
      var self = this, frames = self.frames, options = self.options;
      hasExistingImages = !!(options.images || []).length;
      allDone = frames.every(function (frame) {
        return !frame.beingProcessed && frame.done;
      });
      self.numRenderedFrames++;
      if (hasExistingImages) {
        progressCallback(self.numRenderedFrames / frames.length);
      }
      self.onRenderProgressCallback(self.numRenderedFrames * 0.75 / frames.length);
      if (allDone) {
        if (!self.generatingGIF) {
          self.generateGIF(frames, self.onRenderCompleteCallback);
        }
      } else {
        utils.requestTimeout(function () {
          self.processNextFrame();
        }, 1);
      }
    },
    'processFrame': function (position) {
      var AnimatedGifContext = this, options = this.options, progressCallback = options.progressCallback, sampleInterval = options.sampleInterval, frames = this.frames, frame, worker, done = function (ev) {
          var data = ev.data;
          delete frame.data;
          frame.pixels = Array.prototype.slice.call(data.pixels);
          frame.palette = Array.prototype.slice.call(data.palette);
          frame.done = true;
          frame.beingProcessed = false;
          AnimatedGifContext.freeWorker(worker);
          AnimatedGifContext.onFrameFinished(progressCallback);
        };
      frame = frames[position];
      if (frame.beingProcessed || frame.done) {
        this.onFrameFinished();
        return;
      }
      frame.sampleInterval = sampleInterval;
      frame.beingProcessed = true;
      frame.gifshot = true;
      worker = this.getWorker();
      if (worker) {
        worker.onmessage = done;
        worker.postMessage(frame);
      } else {
        done({ 'data': AnimatedGifContext.workerMethods.run(frame) });
      }
    },
    'startRendering': function (completeCallback) {
      this.onRenderCompleteCallback = completeCallback;
      for (var i = 0; i < this.options.numWorkers && i < this.frames.length; i++) {
        this.processFrame(i);
      }
    },
    'processNextFrame': function () {
      var position = -1;
      for (var i = 0; i < this.frames.length; i++) {
        var frame = this.frames[i];
        if (!frame.done && !frame.beingProcessed) {
          position = i;
          break;
        }
      }
      if (position >= 0) {
        this.processFrame(position);
      }
    },
    'generateGIF': function (frames, callback) {
      var buffer = [], gifOptions = { 'loop': this.repeat }, options = this.options, interval = options.interval, existingImages = options.images, hasExistingImages = !!existingImages.length, height = options.gifHeight, width = options.gifWidth, gifWriter = new GifWriter(buffer, width, height, gifOptions), onRenderProgressCallback = this.onRenderProgressCallback, delay = hasExistingImages ? interval * 100 : 0, bufferToString, gif;
      this.generatingGIF = true;
      utils.each(frames, function (iterator, frame) {
        var framePalette = frame.palette;
        onRenderProgressCallback(0.75 + 0.25 * frame.position * 1 / frames.length);
        gifWriter.addFrame(0, 0, width, height, frame.pixels, {
          palette: framePalette,
          delay: delay
        });
      });
      gifWriter.end();
      onRenderProgressCallback(1);
      this.frames = [];
      this.generatingGIF = false;
      if (utils.isFunction(callback)) {
        bufferToString = this.bufferToString(buffer);
        gif = 'data:image/gif;base64,' + utils.btoa(bufferToString);
        callback(gif);
      }
    },
    'setRepeat': function (r) {
      this.repeat = r;
    },
    'addFrame': function (element, gifshotOptions) {
      gifshotOptions = utils.isObject(gifshotOptions) ? gifshotOptions : {};
      var self = this, ctx = self.ctx, options = self.options, width = options.gifWidth, height = options.gifHeight, gifHeight = gifshotOptions.gifHeight, gifWidth = gifshotOptions.gifWidth, text = gifshotOptions.text, fontWeight = gifshotOptions.fontWeight, fontSize = utils.getFontSize(gifshotOptions), fontFamily = gifshotOptions.fontFamily, fontColor = gifshotOptions.fontColor, textAlign = gifshotOptions.textAlign, textBaseline = gifshotOptions.textBaseline, textXCoordinate = gifshotOptions.textXCoordinate ? gifshotOptions.textXCoordinate : textAlign === 'left' ? 1 : textAlign === 'right' ? width : width / 2, textYCoordinate = gifshotOptions.textYCoordinate ? gifshotOptions.textYCoordinate : textBaseline === 'top' ? 1 : textBaseline === 'center' ? height / 2 : height, font = fontWeight + ' ' + fontSize + ' ' + fontFamily, imageData;
      try {
        ctx.drawImage(element, 0, 0, width, height);
        if (text) {
          ctx.font = font;
          ctx.fillStyle = fontColor;
          ctx.textAlign = textAlign;
          ctx.textBaseline = textBaseline;
          ctx.fillText(text, textXCoordinate, textYCoordinate);
        }
        imageData = ctx.getImageData(0, 0, width, height);
        self.addFrameImageData(imageData);
      } catch (e) {
        return '' + e;
      }
    },
    'addFrameImageData': function (imageData) {
      var frames = this.frames, imageDataArray = imageData.data;
      this.frames.push({
        'data': imageDataArray,
        'width': imageData.width,
        'height': imageData.height,
        'palette': null,
        'dithering': null,
        'done': false,
        'beingProcessed': false,
        'position': frames.length
      });
    },
    'onRenderProgress': function (callback) {
      this.onRenderProgressCallback = callback;
    },
    'isRendering': function () {
      return this.generatingGIF;
    },
    'getBase64GIF': function (completeCallback) {
      var self = this, onRenderComplete = function (gif) {
          self.destroyWorkers();
          utils.requestTimeout(function () {
            completeCallback(gif);
          }, 0);
        };
      self.startRendering(onRenderComplete);
    },
    'destroyWorkers': function () {
      if (this.workerError) {
        return;
      }
      var workers = this.workers;
      utils.each(workers, function (iterator, workerObj) {
        var worker = workerObj.worker, objectUrl = workerObj.objectUrl;
        worker.terminate();
        utils.URL.revokeObjectURL(objectUrl);
      });
    }
  };
  return AnimatedGIF;
}(utils, processFrameWorker, NeuQuant, gifWriter);
getBase64GIF = function getBase64GIF(animatedGifInstance, callback) {
  animatedGifInstance.getBase64GIF(function (image) {
    callback({
      'error': false,
      'errorCode': '',
      'errorMsg': '',
      'image': image
    });
  });
};
existingImages = function (obj) {
  var images = obj.images, imagesLength = obj.imagesLength, callback = obj.callback, options = obj.options, skipObj = {
      'getUserMedia': true,
      'window.URL': true
    }, errorObj = error.validate(skipObj), loadedImages = [], loadedImagesLength = 0, tempImage, ag;
  if (errorObj.error) {
    return callback(errorObj);
  }
  ag = new AnimatedGIF(options);
  utils.each(images, function (index, currentImage) {
    if (utils.isElement(currentImage)) {
      if (options.crossOrigin) {
        currentImage.crossOrigin = options.crossOrigin;
      }
      loadedImages[index] = currentImage;
      loadedImagesLength += 1;
      if (loadedImagesLength === imagesLength) {
        addLoadedImagesToGif();
      }
    } else if (utils.isString(currentImage)) {
      tempImage = document.createElement('img');
      if (options.crossOrigin) {
        tempImage.crossOrigin = options.crossOrigin;
      }
      tempImage.onerror = function (e) {
        if (loadedImages.length > index) {
          loadedImages[index] = undefined;
        }
      }(function (tempImage) {
        tempImage.onload = function () {
          loadedImages[index] = tempImage;
          loadedImagesLength += 1;
          if (loadedImagesLength === imagesLength) {
            addLoadedImagesToGif();
          }
          utils.removeElement(tempImage);
        };
      }(tempImage));
      tempImage.src = currentImage;
      utils.setCSSAttr(tempImage, {
        'position': 'fixed',
        'opacity': '0'
      });
      document.body.appendChild(tempImage);
    }
  });
  function addLoadedImagesToGif() {
    utils.each(loadedImages, function (index, loadedImage) {
      if (loadedImage) {
        ag.addFrame(loadedImage, options);
      }
    });
    getBase64GIF(ag, callback);
  }
};
screenShot = {
  getGIF: function (options, callback) {
    callback = utils.isFunction(callback) ? callback : utils.noop;
    var canvas = document.createElement('canvas'), context, existingImages = options.images, hasExistingImages = !!existingImages.length, videoElement = options.videoElement, keepCameraOn = options.keepCameraOn, webcamVideoElement = options.webcamVideoElement, cameraStream = options.cameraStream, gifWidth = +options.gifWidth, gifHeight = +options.gifHeight, videoWidth = options.videoWidth, videoHeight = options.videoHeight, sampleInterval = +options.sampleInterval, numWorkers = +options.numWorkers, crop = options.crop, interval = +options.interval, waitBetweenFrames = hasExistingImages ? 0 : interval * 1000, progressCallback = options.progressCallback, savedRenderingContexts = options.savedRenderingContexts, saveRenderingContexts = options.saveRenderingContexts, renderingContextsToSave = [], numFrames = savedRenderingContexts.length ? savedRenderingContexts.length : options.numFrames, pendingFrames = numFrames, ag = new AnimatedGIF(options), text = options.text, fontWeight = options.fontWeight, fontSize = utils.getFontSize(options), fontFamily = options.fontFamily, fontColor = options.fontColor, textAlign = options.textAlign, textBaseline = options.textBaseline, textXCoordinate = options.textXCoordinate ? options.textXCoordinate : textAlign === 'left' ? 1 : textAlign === 'right' ? gifWidth : gifWidth / 2, textYCoordinate = options.textYCoordinate ? options.textYCoordinate : textBaseline === 'top' ? 1 : textBaseline === 'center' ? gifHeight / 2 : gifHeight, font = fontWeight + ' ' + fontSize + ' ' + fontFamily, sourceX = crop ? Math.floor(crop.scaledWidth / 2) : 0, sourceWidth = crop ? videoWidth - crop.scaledWidth : 0, sourceY = crop ? Math.floor(crop.scaledHeight / 2) : 0, sourceHeight = crop ? videoHeight - crop.scaledHeight : 0, captureFrames = function captureFrame() {
        var framesLeft = pendingFrames - 1;
        if (savedRenderingContexts.length) {
          context.putImageData(savedRenderingContexts[numFrames - pendingFrames], 0, 0);
          finishCapture();
        } else {
          drawVideo();
        }
        function drawVideo() {
          try {
            if (sourceWidth > videoWidth) {
              sourceWidth = videoWidth;
            }
            if (sourceHeight > videoHeight) {
              sourceHeight = videoHeight;
            }
            if (sourceX < 0) {
              sourceX = 0;
            }
            if (sourceY < 0) {
              sourceY = 0;
            }
            context.drawImage(videoElement, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, gifWidth, gifHeight);
            finishCapture();
          } catch (e) {
            if (e.name === 'NS_ERROR_NOT_AVAILABLE') {
              utils.requestTimeout(drawVideo, 100);
            } else {
              throw e;
            }
          }
        }
        function finishCapture() {
          pendingFrames = framesLeft;
          var processedFrames = numFrames - pendingFrames;
          var imageData;
          var data;
          var rgba;
          var isBlackFrame;
          if (saveRenderingContexts) {
            renderingContextsToSave.push(context.getImageData(0, 0, gifWidth, gifHeight));
          }
          if (text) {
            context.font = font;
            context.fillStyle = fontColor;
            context.textAlign = textAlign;
            context.textBaseline = textBaseline;
            context.fillText(text, textXCoordinate, textYCoordinate);
          }
          imageData = context.getImageData(0, 0, gifWidth, gifHeight);
          data = imageData.data;
          rgba = data[0] + data[1] + data[2] + data[3];
          isBlackFrame = rgba === 0;
          if (!isBlackFrame) {
            ag.addFrameImageData(imageData);
          } else if (processedFrames === 1 && numFrames === 1) {
            drawVideo();
          }
          progressCallback(processedFrames / numFrames);
          if (framesLeft > 0) {
            utils.requestTimeout(captureFrame, waitBetweenFrames);
          }
          if (!pendingFrames) {
            ag.getBase64GIF(function (image) {
              callback({
                'error': false,
                'errorCode': '',
                'errorMsg': '',
                'image': image,
                'cameraStream': cameraStream,
                'videoElement': videoElement,
                'webcamVideoElement': webcamVideoElement,
                'savedRenderingContexts': renderingContextsToSave,
                'keepCameraOn': keepCameraOn
              });
            });
          }
        }
      };
    numFrames = numFrames != null ? numFrames : 10;
    interval = interval != null ? interval : 0.1;
    canvas.width = gifWidth;
    canvas.height = gifHeight;
    context = canvas.getContext('2d');
    (function capture() {
      if (!savedRenderingContexts.length && videoElement.currentTime === 0) {
        utils.requestTimeout(capture, 100);
        return;
      }
      captureFrames();
    }());
  },
  'getCropDimensions': function (obj) {
    var width = obj.videoWidth, height = obj.videoHeight, gifWidth = obj.gifWidth, gifHeight = obj.gifHeight, result = {
        width: 0,
        height: 0,
        scaledWidth: 0,
        scaledHeight: 0
      };
    if (width > height) {
      result.width = Math.round(width * (gifHeight / height)) - gifWidth;
      result.scaledWidth = Math.round(result.width * (height / gifHeight));
    } else {
      result.height = Math.round(height * (gifWidth / width)) - gifHeight;
      result.scaledHeight = Math.round(result.height * (width / gifWidth));
    }
    return result;
  }
};
videoStream = {
  'loadedData': false,
  'defaultVideoDimensions': {
    'width': 640,
    'height': 480
  },
  'findVideoSize': function findVideoSizeMethod(obj) {
    findVideoSizeMethod.attempts = findVideoSizeMethod.attempts || 0;
    var self = this, videoElement = obj.videoElement, cameraStream = obj.cameraStream, completedCallback = obj.completedCallback;
    if (!videoElement) {
      return;
    }
    if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {
      videoElement.removeEventListener('loadeddata', self.findVideoSize);
      completedCallback({
        'videoElement': videoElement,
        'cameraStream': cameraStream,
        'videoWidth': videoElement.videoWidth,
        'videoHeight': videoElement.videoHeight
      });
    } else {
      if (findVideoSizeMethod.attempts < 10) {
        findVideoSizeMethod.attempts += 1;
        utils.requestTimeout(function () {
          self.findVideoSize(obj);
        }, 200);
      } else {
        completedCallback({
          'videoElement': videoElement,
          'cameraStream': cameraStream,
          'videoWidth': self.defaultVideoDimensions.width,
          'videoHeight': self.defaultVideoDimensions.height
        });
      }
    }
  },
  'onStreamingTimeout': function (callback) {
    if (utils.isFunction(callback)) {
      callback({
        'error': true,
        'errorCode': 'getUserMedia',
        'errorMsg': 'There was an issue with the getUserMedia API - Timed out while trying to start streaming',
        'image': null,
        'cameraStream': {}
      });
    }
  },
  'stream': function (obj) {
    var self = this, existingVideo = utils.isArray(obj.existingVideo) ? obj.existingVideo[0] : obj.existingVideo, videoElement = obj.videoElement, cameraStream = obj.cameraStream, streamedCallback = obj.streamedCallback, completedCallback = obj.completedCallback;
    if (utils.isFunction(streamedCallback)) {
      streamedCallback();
    }
    if (existingVideo) {
      if (utils.isString(existingVideo)) {
        videoElement.src = existingVideo;
        videoElement.innerHTML = '<source src="' + existingVideo + '" type="video/' + utils.getExtension(existingVideo) + '" />';
      }
    } else if (videoElement.mozSrcObject) {
      videoElement.mozSrcObject = cameraStream;
    } else if (utils.URL) {
      videoElement.src = utils.URL.createObjectURL(cameraStream);
    }
    videoElement.play();
    utils.requestTimeout(function checkLoadedData() {
      checkLoadedData.count = checkLoadedData.count || 0;
      if (self.loadedData === true) {
        self.findVideoSize({
          'videoElement': videoElement,
          'cameraStream': cameraStream,
          'completedCallback': completedCallback
        });
        self.loadedData = false;
      } else {
        checkLoadedData.count += 1;
        if (checkLoadedData.count > 10) {
          self.findVideoSize({
            'videoElement': videoElement,
            'cameraStream': cameraStream,
            'completedCallback': completedCallback
          });
        } else {
          checkLoadedData();
        }
      }
    }, 100);
  },
  'startStreaming': function (obj) {
    var self = this, errorCallback = utils.isFunction(obj.error) ? obj.error : utils.noop, streamedCallback = utils.isFunction(obj.streamed) ? obj.streamed : utils.noop, completedCallback = utils.isFunction(obj.completed) ? obj.completed : utils.noop, existingVideo = obj.existingVideo, webcamVideoElement = obj.webcamVideoElement, videoElement = utils.isElement(existingVideo) ? existingVideo : webcamVideoElement ? webcamVideoElement : document.createElement('video'), lastCameraStream = obj.lastCameraStream, crossOrigin = obj.crossOrigin, options = obj.options, cameraStream;
    if (crossOrigin) {
      videoElement.crossOrigin = options.crossOrigin;
    }
    videoElement.autoplay = true;
    videoElement.loop = true;
    videoElement.muted = true;
    videoElement.addEventListener('loadeddata', function (event) {
      self.loadedData = true;
    });
    if (existingVideo) {
      self.stream({
        'videoElement': videoElement,
        'existingVideo': existingVideo,
        'completedCallback': completedCallback
      });
    } else if (lastCameraStream) {
      self.stream({
        'videoElement': videoElement,
        'cameraStream': lastCameraStream,
        'streamedCallback': streamedCallback,
        'completedCallback': completedCallback
      });
    } else {
      utils.getUserMedia({ 'video': true }, function (stream) {
        self.stream({
          'videoElement': videoElement,
          'cameraStream': stream,
          'streamedCallback': streamedCallback,
          'completedCallback': completedCallback
        });
      }, errorCallback);
    }
  },
  startVideoStreaming: function (callback, options) {
    options = options || {};
    var self = this, noGetUserMediaSupportTimeout, timeoutLength = options.timeout !== undefined ? options.timeout : 0, originalCallback = options.callback, webcamVideoElement = options.webcamVideoElement;
    if (timeoutLength > 0) {
      noGetUserMediaSupportTimeout = utils.requestTimeout(function () {
        self.onStreamingTimeout(originalCallback);
      }, 10000);
    }
    this.startStreaming({
      'error': function () {
        originalCallback({
          'error': true,
          'errorCode': 'getUserMedia',
          'errorMsg': 'There was an issue with the getUserMedia API - the user probably denied permission',
          'image': null,
          'cameraStream': {}
        });
      },
      'streamed': function () {
        clearTimeout(noGetUserMediaSupportTimeout);
      },
      'completed': function (obj) {
        var cameraStream = obj.cameraStream, videoElement = obj.videoElement, videoWidth = obj.videoWidth, videoHeight = obj.videoHeight;
        callback({
          'cameraStream': cameraStream,
          'videoElement': videoElement,
          'videoWidth': videoWidth,
          'videoHeight': videoHeight
        });
      },
      'lastCameraStream': options.lastCameraStream,
      'webcamVideoElement': webcamVideoElement,
      'crossOrigin': options.crossOrigin,
      'options': options
    });
  },
  'stopVideoStreaming': function (obj) {
    obj = utils.isObject(obj) ? obj : {};
    var cameraStream = obj.cameraStream, videoElement = obj.videoElement, keepCameraOn = obj.keepCameraOn, webcamVideoElement = obj.webcamVideoElement;
    if (!keepCameraOn && cameraStream && utils.isFunction(cameraStream.stop)) {
      cameraStream.stop();
    }
    if (utils.isElement(videoElement) && !webcamVideoElement) {
      videoElement.pause();
      if (utils.isFunction(utils.URL.revokeObjectURL) && !utils.webWorkerError) {
        if (videoElement.src) {
          utils.URL.revokeObjectURL(videoElement.src);
        }
      }
      utils.removeElement(videoElement);
    }
  }
};
stopVideoStreaming = function (obj) {
  obj = utils.isObject(obj) ? obj : {};
  var options = utils.isObject(obj.options) ? obj.options : {}, cameraStream = obj.cameraStream, videoElement = obj.videoElement, webcamVideoElement = obj.webcamVideoElement, keepCameraOn = obj.keepCameraOn;
  videoStream.stopVideoStreaming({
    'cameraStream': cameraStream,
    'videoElement': videoElement,
    'keepCameraOn': keepCameraOn,
    'webcamVideoElement': webcamVideoElement
  });
};
createAndGetGIF = function (obj, callback) {
  var options = obj.options || {}, images = options.images, video = options.video, numFrames = +options.numFrames, cameraStream = obj.cameraStream, videoElement = obj.videoElement, videoWidth = obj.videoWidth, videoHeight = obj.videoHeight, gifWidth = +options.gifWidth, gifHeight = +options.gifHeight, cropDimensions = screenShot.getCropDimensions({
      'videoWidth': videoWidth,
      'videoHeight': videoHeight,
      'gifHeight': gifHeight,
      'gifWidth': gifWidth
    }), completeCallback = callback;
  options.crop = cropDimensions;
  options.videoElement = videoElement;
  options.videoWidth = videoWidth;
  options.videoHeight = videoHeight;
  options.cameraStream = cameraStream;
  if (!utils.isElement(videoElement)) {
    return;
  }
  videoElement.width = gifWidth + cropDimensions.width;
  videoElement.height = gifHeight + cropDimensions.height;
  if (!options.webcamVideoElement) {
    utils.setCSSAttr(videoElement, {
      'position': 'fixed',
      'opacity': '0'
    });
    document.body.appendChild(videoElement);
  }
  videoElement.play();
  screenShot.getGIF(options, function (obj) {
    if ((!images || !images.length) && (!video || !video.length)) {
      stopVideoStreaming(obj);
    }
    completeCallback(obj);
  });
};
existingVideo = function (obj) {
  var existingVideo = obj.existingVideo, callback = obj.callback, options = obj.options, skipObj = {
      'getUserMedia': true,
      'window.URL': true
    }, errorObj = error.validate(skipObj), loadedImages = 0, videoType, videoSrc, tempImage, ag;
  if (errorObj.error) {
    return callback(errorObj);
  }
  if (utils.isElement(existingVideo) && existingVideo.src) {
    videoSrc = existingVideo.src;
    videoType = utils.getExtension(videoSrc);
    if (!utils.isSupported.videoCodecs[videoType]) {
      return callback(error.messages.videoCodecs);
    }
  } else if (utils.isArray(existingVideo)) {
    utils.each(existingVideo, function (iterator, videoSrc) {
      videoType = videoSrc.substr(videoSrc.lastIndexOf('.') + 1, videoSrc.length);
      if (utils.isSupported.videoCodecs[videoType]) {
        existingVideo = videoSrc;
        return false;
      }
    });
  }
  videoStream.startStreaming({
    'completed': function (obj) {
      obj.options = options || {};
      createAndGetGIF(obj, callback);
    },
    'existingVideo': existingVideo,
    'crossOrigin': options.crossOrigin,
    'options': options
  });
};
existingWebcam = function (obj) {
  var lastCameraStream = obj.lastCameraStream, callback = obj.callback, webcamVideoElement = obj.webcamVideoElement, options = obj.options;
  if (!isWebCamGIFSupported()) {
    return callback(error.validate());
  }
  if (options.savedRenderingContexts.length) {
    screenShot.getWebcamGIF(options, function (obj) {
      callback(obj);
    });
    return;
  }
  videoStream.startVideoStreaming(function (obj) {
    obj.options = options || {};
    createAndGetGIF(obj, callback);
  }, {
    'lastCameraStream': lastCameraStream,
    'callback': callback,
    'webcamVideoElement': webcamVideoElement,
    'crossOrigin': options.crossOrigin
  });
};
createGIF = function (userOptions, callback) {
  callback = utils.isFunction(userOptions) ? userOptions : callback;
  userOptions = utils.isObject(userOptions) ? userOptions : {};
  if (!utils.isFunction(callback)) {
    return;
  }
  var options = utils.mergeOptions(defaultOptions, userOptions) || {}, lastCameraStream = userOptions.cameraStream, images = options.images, imagesLength = images ? images.length : 0, video = options.video, webcamVideoElement = options.webcamVideoElement;
  options = utils.mergeOptions(options, {
    'gifWidth': Math.floor(options.gifWidth),
    'gifHeight': Math.floor(options.gifHeight)
  });
  if (imagesLength) {
    existingImages({
      'images': images,
      'imagesLength': imagesLength,
      'callback': callback,
      'options': options
    });
  } else if (video) {
    existingVideo({
      'existingVideo': video,
      'callback': callback,
      'options': options
    });
  } else {
    existingWebcam({
      'lastCameraStream': lastCameraStream,
      'callback': callback,
      'webcamVideoElement': webcamVideoElement,
      'options': options
    });
  }
};
takeSnapShot = function (userOptions, callback) {
  callback = utils.isFunction(userOptions) ? userOptions : callback;
  userOptions = utils.isObject(userOptions) ? userOptions : {};
  if (!utils.isFunction(callback)) {
    return;
  }
  var mergedOptions = utils.mergeOptions(defaultOptions, userOptions), options = utils.mergeOptions(mergedOptions, {
      'interval': 0.1,
      'numFrames': 1,
      'gifWidth': Math.floor(mergedOptions.gifWidth),
      'gifHeight': Math.floor(mergedOptions.gifHeight)
    });
  createGIF(options, callback);
};
API = function (utils, error, defaultOptions, isSupported, isWebCamGIFSupported, isExistingImagesGIFSupported, isExistingVideoGIFSupported, createGIF, takeSnapShot, stopVideoStreaming) {
  var gifshot = {
    'utils': utils,
    'error': error,
    'defaultOptions': defaultOptions,
    'createGIF': createGIF,
    'takeSnapShot': takeSnapShot,
    'stopVideoStreaming': stopVideoStreaming,
    'isSupported': isSupported,
    'isWebCamGIFSupported': isWebCamGIFSupported,
    'isExistingVideoGIFSupported': isExistingVideoGIFSupported,
    'isExistingImagesGIFSupported': isExistingImagesGIFSupported,
    'VERSION': '0.3.2'
  };
  return gifshot;
}(utils, error, defaultOptions, isSupported, isWebCamGIFSupported, isExistingImagesGIFSupported, isExistingVideoGIFSupported, createGIF, takeSnapShot, stopVideoStreaming);
(function (API) {
  if (typeof define === 'function' && define.amd) {
    define([], function () {
      return API;
    });
  } else if (typeof exports !== 'undefined') {
    module.exports = API;
  } else {
    window.gifshot = API;
  }
}(API));
}(typeof window !== "undefined" ? window : {}, typeof document !== "undefined" ? document : { createElement: function() {} }, typeof window !== "undefined" ? window.navigator : {}));
// gif.worker.js 0.2.0 - https://github.com/jnordberg/gif.js
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND",
                f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports,
            function(e) {
                var n = t[o][1][e];
                return s(n ? n: e)
            },
            l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1 : [function(require, module, exports) {
        var NeuQuant = require("./TypedNeuQuant.js");
        var LZWEncoder = require("./LZWEncoder.js");
        function ByteArray() {
            this.page = -1;
            this.pages = [];
            this.newPage()
        }
        ByteArray.pageSize = 4096;
        ByteArray.charMap = {};
        for (var i = 0; i < 256; i++) ByteArray.charMap[i] = String.fromCharCode(i);
        ByteArray.prototype.newPage = function() {
            this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);
            this.cursor = 0
        };
        ByteArray.prototype.getData = function() {
            var rv = "";
            for (var p = 0; p < this.pages.length; p++) {
                for (var i = 0; i < ByteArray.pageSize; i++) {
                    rv += ByteArray.charMap[this.pages[p][i]]
                }
            }
            return rv
        };
        ByteArray.prototype.writeByte = function(val) {
            if (this.cursor >= ByteArray.pageSize) this.newPage();
            this.pages[this.page][this.cursor++] = val
        };
        ByteArray.prototype.writeUTFBytes = function(string) {
            for (var l = string.length,
            i = 0; i < l; i++) this.writeByte(string.charCodeAt(i))
        };
        ByteArray.prototype.writeBytes = function(array, offset, length) {
            for (var l = length || array.length,
            i = offset || 0; i < l; i++) this.writeByte(array[i])
        };
        function GIFEncoder(width, height) {
            this.width = ~~width;
            this.height = ~~height;
            this.transparent = null;
            this.transIndex = 0;
            this.repeat = -1;
            this.delay = 0;
            this.image = null;
            this.pixels = null;
            this.indexedPixels = null;
            this.colorDepth = null;
            this.colorTab = null;
            this.neuQuant = null;
            this.usedEntry = new Array;
            this.palSize = 7;
            this.dispose = -1;
            this.firstFrame = true;
            this.sample = 10;
            this.dither = false;
            this.globalPalette = false;
            this.out = new ByteArray
        }
        GIFEncoder.prototype.setDelay = function(milliseconds) {
            this.delay = Math.round(milliseconds / 10)
        };
        GIFEncoder.prototype.setFrameRate = function(fps) {
            this.delay = Math.round(100 / fps)
        };
        GIFEncoder.prototype.setDispose = function(disposalCode) {
            if (disposalCode >= 0) this.dispose = disposalCode
        };
        GIFEncoder.prototype.setRepeat = function(repeat) {
            this.repeat = repeat
        };
        GIFEncoder.prototype.setTransparent = function(color) {
            this.transparent = color
        };
        GIFEncoder.prototype.addFrame = function(imageData) {
            this.image = imageData;
            this.colorTab = this.globalPalette && this.globalPalette.slice ? this.globalPalette: null;
            this.getImagePixels();
            this.analyzePixels();
            if (this.globalPalette === true) this.globalPalette = this.colorTab;
            if (this.firstFrame) {
                this.writeLSD();
                this.writePalette();
                if (this.repeat >= 0) {
                    this.writeNetscapeExt()
                }
            }
            this.writeGraphicCtrlExt();
            this.writeImageDesc();
            if (!this.firstFrame && !this.globalPalette) this.writePalette();
            this.writePixels();
            this.firstFrame = false
        };
        GIFEncoder.prototype.finish = function() {
            this.out.writeByte(59)
        };
        GIFEncoder.prototype.setQuality = function(quality) {
            if (quality < 1) quality = 1;
            this.sample = quality
        };
        GIFEncoder.prototype.setDither = function(dither) {
            if (dither === true) dither = "FloydSteinberg";
            this.dither = dither
        };
        GIFEncoder.prototype.setGlobalPalette = function(palette) {
            this.globalPalette = palette
        };
        GIFEncoder.prototype.getGlobalPalette = function() {
            return this.globalPalette && this.globalPalette.slice && this.globalPalette.slice(0) || this.globalPalette
        };
        GIFEncoder.prototype.writeHeader = function() {
            this.out.writeUTFBytes("GIF89a")
        };
        GIFEncoder.prototype.analyzePixels = function() {
            if (!this.colorTab) {
                this.neuQuant = new NeuQuant(this.pixels, this.sample);
                this.neuQuant.buildColormap();
                this.colorTab = this.neuQuant.getColormap()
            }
            if (this.dither) {
                this.ditherPixels(this.dither.replace("-serpentine", ""), this.dither.match(/-serpentine/) !== null)
            } else {
                this.indexPixels()
            }
            this.pixels = null;
            this.colorDepth = 8;
            this.palSize = 7;
            if (this.transparent !== null) {
                this.transIndex = this.findClosest(this.transparent, true)
            }
        };
        GIFEncoder.prototype.indexPixels = function(imgq) {
            var nPix = this.pixels.length / 3;
            this.indexedPixels = new Uint8Array(nPix);
            var k = 0;
            for (var j = 0; j < nPix; j++) {
                var index = this.findClosestRGB(this.pixels[k++] & 255, this.pixels[k++] & 255, this.pixels[k++] & 255);
                this.usedEntry[index] = true;
                this.indexedPixels[j] = index
            }
        };
        GIFEncoder.prototype.ditherPixels = function(kernel, serpentine) {
            var kernels = {
                FalseFloydSteinberg: [[3 / 8, 1, 0], [3 / 8, 0, 1], [2 / 8, 1, 1]],
                FloydSteinberg: [[7 / 16, 1, 0], [3 / 16, -1, 1], [5 / 16, 0, 1], [1 / 16, 1, 1]],
                Stucki: [[8 / 42, 1, 0], [4 / 42, 2, 0], [2 / 42, -2, 1], [4 / 42, -1, 1], [8 / 42, 0, 1], [4 / 42, 1, 1], [2 / 42, 2, 1], [1 / 42, -2, 2], [2 / 42, -1, 2], [4 / 42, 0, 2], [2 / 42, 1, 2], [1 / 42, 2, 2]],
                Atkinson: [[1 / 8, 1, 0], [1 / 8, 2, 0], [1 / 8, -1, 1], [1 / 8, 0, 1], [1 / 8, 1, 1], [1 / 8, 0, 2]]
            };
            if (!kernel || !kernels[kernel]) {
                throw "Unknown dithering kernel: " + kernel
            }
            var ds = kernels[kernel];
            var index = 0,
            height = this.height,
            width = this.width,
            data = this.pixels;
            var direction = serpentine ? -1 : 1;
            this.indexedPixels = new Uint8Array(this.pixels.length / 3);
            for (var y = 0; y < height; y++) {
                if (serpentine) direction = direction * -1;
                for (var x = direction == 1 ? 0 : width - 1, xend = direction == 1 ? width: 0; x !== xend; x += direction) {
                    index = y * width + x;
                    var idx = index * 3;
                    var r1 = data[idx];
                    var g1 = data[idx + 1];
                    var b1 = data[idx + 2];
                    idx = this.findClosestRGB(r1, g1, b1);
                    this.usedEntry[idx] = true;
                    this.indexedPixels[index] = idx;
                    idx *= 3;
                    var r2 = this.colorTab[idx];
                    var g2 = this.colorTab[idx + 1];
                    var b2 = this.colorTab[idx + 2];
                    var er = r1 - r2;
                    var eg = g1 - g2;
                    var eb = b1 - b2;
                    for (var i = direction == 1 ? 0 : ds.length - 1, end = direction == 1 ? ds.length: 0; i !== end; i += direction) {
                        var x1 = ds[i][1];
                        var y1 = ds[i][2];
                        if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {
                            var d = ds[i][0];
                            idx = index + x1 + y1 * width;
                            idx *= 3;
                            data[idx] = Math.max(0, Math.min(255, data[idx] + er * d));
                            data[idx + 1] = Math.max(0, Math.min(255, data[idx + 1] + eg * d));
                            data[idx + 2] = Math.max(0, Math.min(255, data[idx + 2] + eb * d))
                        }
                    }
                }
            }
        };
        GIFEncoder.prototype.findClosest = function(c, used) {
            return this.findClosestRGB((c & 16711680) >> 16, (c & 65280) >> 8, c & 255, used)
        };
        GIFEncoder.prototype.findClosestRGB = function(r, g, b, used) {
            if (this.colorTab === null) return - 1;
            if (this.neuQuant && !used) {
                return this.neuQuant.lookupRGB(r, g, b)
            }
            var c = b | g << 8 | r << 16;
            var minpos = 0;
            var dmin = 256 * 256 * 256;
            var len = this.colorTab.length;
            for (var i = 0,
            index = 0; i < len; index++) {
                var dr = r - (this.colorTab[i++] & 255);
                var dg = g - (this.colorTab[i++] & 255);
                var db = b - (this.colorTab[i++] & 255);
                var d = dr * dr + dg * dg + db * db;
                if ((!used || this.usedEntry[index]) && d < dmin) {
                    dmin = d;
                    minpos = index
                }
            }
            return minpos
        };
        GIFEncoder.prototype.getImagePixels = function() {
            var w = this.width;
            var h = this.height;
            this.pixels = new Uint8Array(w * h * 3);
            var data = this.image;
            var srcPos = 0;
            var count = 0;
            for (var i = 0; i < h; i++) {
                for (var j = 0; j < w; j++) {
                    this.pixels[count++] = data[srcPos++];
                    this.pixels[count++] = data[srcPos++];
                    this.pixels[count++] = data[srcPos++];
                    srcPos++
                }
            }
        };
        GIFEncoder.prototype.writeGraphicCtrlExt = function() {
            this.out.writeByte(33);
            this.out.writeByte(249);
            this.out.writeByte(4);
            var transp, disp;
            if (this.transparent === null) {
                transp = 0;
                disp = 0
            } else {
                transp = 1;
                disp = 2
            }
            if (this.dispose >= 0) {
                disp = dispose & 7
            }
            disp <<= 2;
            this.out.writeByte(0 | disp | 0 | transp);
            this.writeShort(this.delay);
            this.out.writeByte(this.transIndex);
            this.out.writeByte(0)
        };
        GIFEncoder.prototype.writeImageDesc = function() {
            this.out.writeByte(44);
            this.writeShort(0);
            this.writeShort(0);
            this.writeShort(this.width);
            this.writeShort(this.height);
            if (this.firstFrame || this.globalPalette) {
                this.out.writeByte(0)
            } else {
                this.out.writeByte(128 | 0 | 0 | 0 | this.palSize)
            }
        };
        GIFEncoder.prototype.writeLSD = function() {
            this.writeShort(this.width);
            this.writeShort(this.height);
            this.out.writeByte(128 | 112 | 0 | this.palSize);
            this.out.writeByte(0);
            this.out.writeByte(0)
        };
        GIFEncoder.prototype.writeNetscapeExt = function() {
            this.out.writeByte(33);
            this.out.writeByte(255);
            this.out.writeByte(11);
            this.out.writeUTFBytes("NETSCAPE2.0");
            this.out.writeByte(3);
            this.out.writeByte(1);
            this.writeShort(this.repeat);
            this.out.writeByte(0)
        };
        GIFEncoder.prototype.writePalette = function() {
            this.out.writeBytes(this.colorTab);
            var n = 3 * 256 - this.colorTab.length;
            for (var i = 0; i < n; i++) this.out.writeByte(0)
        };
        GIFEncoder.prototype.writeShort = function(pValue) {
            this.out.writeByte(pValue & 255);
            this.out.writeByte(pValue >> 8 & 255)
        };
        GIFEncoder.prototype.writePixels = function() {
            var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);
            enc.encode(this.out)
        };
        GIFEncoder.prototype.stream = function() {
            return this.out
        };
        module.exports = GIFEncoder
    },
    {
        "./LZWEncoder.js": 2,
        "./TypedNeuQuant.js": 3
    }],
    2 : [function(require, module, exports) {
        var EOF = -1;
        var BITS = 12;
        var HSIZE = 5003;
        var masks = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535];
        function LZWEncoder(width, height, pixels, colorDepth) {
            var initCodeSize = Math.max(2, colorDepth);
            var accum = new Uint8Array(256);
            var htab = new Int32Array(HSIZE);
            var codetab = new Int32Array(HSIZE);
            var cur_accum, cur_bits = 0;
            var a_count;
            var free_ent = 0;
            var maxcode;
            var clear_flg = false;
            var g_init_bits, ClearCode, EOFCode;
            function char_out(c, outs) {
                accum[a_count++] = c;
                if (a_count >= 254) flush_char(outs)
            }
            function cl_block(outs) {
                cl_hash(HSIZE);
                free_ent = ClearCode + 2;
                clear_flg = true;
                output(ClearCode, outs)
            }
            function cl_hash(hsize) {
                for (var i = 0; i < hsize; ++i) htab[i] = -1
            }
            function compress(init_bits, outs) {
                var fcode, c, i, ent, disp, hsize_reg, hshift;
                g_init_bits = init_bits;
                clear_flg = false;
                n_bits = g_init_bits;
                maxcode = MAXCODE(n_bits);
                ClearCode = 1 << init_bits - 1;
                EOFCode = ClearCode + 1;
                free_ent = ClearCode + 2;
                a_count = 0;
                ent = nextPixel();
                hshift = 0;
                for (fcode = HSIZE; fcode < 65536; fcode *= 2)++hshift;
                hshift = 8 - hshift;
                hsize_reg = HSIZE;
                cl_hash(hsize_reg);
                output(ClearCode, outs);
                outer_loop: while ((c = nextPixel()) != EOF) {
                    fcode = (c << BITS) + ent;
                    i = c << hshift ^ ent;
                    if (htab[i] === fcode) {
                        ent = codetab[i];
                        continue
                    } else if (htab[i] >= 0) {
                        disp = hsize_reg - i;
                        if (i === 0) disp = 1;
                        do {
                            if ((i -= disp) < 0) i += hsize_reg;
                            if (htab[i] === fcode) {
                                ent = codetab[i];
                                continue outer_loop
                            }
                        } while ( htab [ i ] >= 0)
                    }
                    output(ent, outs);
                    ent = c;
                    if (free_ent < 1 << BITS) {
                        codetab[i] = free_ent++;
                        htab[i] = fcode
                    } else {
                        cl_block(outs)
                    }
                }
                output(ent, outs);
                output(EOFCode, outs)
            }
            function encode(outs) {
                outs.writeByte(initCodeSize);
                remaining = width * height;
                curPixel = 0;
                compress(initCodeSize + 1, outs);
                outs.writeByte(0)
            }
            function flush_char(outs) {
                if (a_count > 0) {
                    outs.writeByte(a_count);
                    outs.writeBytes(accum, 0, a_count);
                    a_count = 0
                }
            }
            function MAXCODE(n_bits) {
                return (1 << n_bits) - 1
            }
            function nextPixel() {
                if (remaining === 0) return EOF; --remaining;
                var pix = pixels[curPixel++];
                return pix & 255
            }
            function output(code, outs) {
                cur_accum &= masks[cur_bits];
                if (cur_bits > 0) cur_accum |= code << cur_bits;
                else cur_accum = code;
                cur_bits += n_bits;
                while (cur_bits >= 8) {
                    char_out(cur_accum & 255, outs);
                    cur_accum >>= 8;
                    cur_bits -= 8
                }
                if (free_ent > maxcode || clear_flg) {
                    if (clear_flg) {
                        maxcode = MAXCODE(n_bits = g_init_bits);
                        clear_flg = false
                    } else {++n_bits;
                        if (n_bits == BITS) maxcode = 1 << BITS;
                        else maxcode = MAXCODE(n_bits)
                    }
                }
                if (code == EOFCode) {
                    while (cur_bits > 0) {
                        char_out(cur_accum & 255, outs);
                        cur_accum >>= 8;
                        cur_bits -= 8
                    }
                    flush_char(outs)
                }
            }
            this.encode = encode
        }
        module.exports = LZWEncoder
    },
    {}],
    3 : [function(require, module, exports) {
        var ncycles = 100;
        var netsize = 256;
        var maxnetpos = netsize - 1;
        var netbiasshift = 4;
        var intbiasshift = 16;
        var intbias = 1 << intbiasshift;
        var gammashift = 10;
        var gamma = 1 << gammashift;
        var betashift = 10;
        var beta = intbias >> betashift;
        var betagamma = intbias << gammashift - betashift;
        var initrad = netsize >> 3;
        var radiusbiasshift = 6;
        var radiusbias = 1 << radiusbiasshift;
        var initradius = initrad * radiusbias;
        var radiusdec = 30;
        var alphabiasshift = 10;
        var initalpha = 1 << alphabiasshift;
        var alphadec;
        var radbiasshift = 8;
        var radbias = 1 << radbiasshift;
        var alpharadbshift = alphabiasshift + radbiasshift;
        var alpharadbias = 1 << alpharadbshift;
        var prime1 = 499;
        var prime2 = 491;
        var prime3 = 487;
        var prime4 = 503;
        var minpicturebytes = 3 * prime4;
        function NeuQuant(pixels, samplefac) {
            var network;
            var netindex;
            var bias;
            var freq;
            var radpower;
            function init() {
                network = [];
                netindex = new Int32Array(256);
                bias = new Int32Array(netsize);
                freq = new Int32Array(netsize);
                radpower = new Int32Array(netsize >> 3);
                var i, v;
                for (i = 0; i < netsize; i++) {
                    v = (i << netbiasshift + 8) / netsize;
                    network[i] = new Float64Array([v, v, v, 0]);
                    freq[i] = intbias / netsize;
                    bias[i] = 0
                }
            }
            function unbiasnet() {
                for (var i = 0; i < netsize; i++) {
                    network[i][0] >>= netbiasshift;
                    network[i][1] >>= netbiasshift;
                    network[i][2] >>= netbiasshift;
                    network[i][3] = i
                }
            }
            function altersingle(alpha, i, b, g, r) {
                network[i][0] -= alpha * (network[i][0] - b) / initalpha;
                network[i][1] -= alpha * (network[i][1] - g) / initalpha;
                network[i][2] -= alpha * (network[i][2] - r) / initalpha
            }
            function alterneigh(radius, i, b, g, r) {
                var lo = Math.abs(i - radius);
                var hi = Math.min(i + radius, netsize);
                var j = i + 1;
                var k = i - 1;
                var m = 1;
                var p, a;
                while (j < hi || k > lo) {
                    a = radpower[m++];
                    if (j < hi) {
                        p = network[j++];
                        p[0] -= a * (p[0] - b) / alpharadbias;
                        p[1] -= a * (p[1] - g) / alpharadbias;
                        p[2] -= a * (p[2] - r) / alpharadbias
                    }
                    if (k > lo) {
                        p = network[k--];
                        p[0] -= a * (p[0] - b) / alpharadbias;
                        p[1] -= a * (p[1] - g) / alpharadbias;
                        p[2] -= a * (p[2] - r) / alpharadbias
                    }
                }
            }
            function contest(b, g, r) {
                var bestd = ~ (1 << 31);
                var bestbiasd = bestd;
                var bestpos = -1;
                var bestbiaspos = bestpos;
                var i, n, dist, biasdist, betafreq;
                for (i = 0; i < netsize; i++) {
                    n = network[i];
                    dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);
                    if (dist < bestd) {
                        bestd = dist;
                        bestpos = i
                    }
                    biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);
                    if (biasdist < bestbiasd) {
                        bestbiasd = biasdist;
                        bestbiaspos = i
                    }
                    betafreq = freq[i] >> betashift;
                    freq[i] -= betafreq;
                    bias[i] += betafreq << gammashift
                }
                freq[bestpos] += beta;
                bias[bestpos] -= betagamma;
                return bestbiaspos
            }
            function inxbuild() {
                var i, j, p, q, smallpos, smallval, previouscol = 0,
                startpos = 0;
                for (i = 0; i < netsize; i++) {
                    p = network[i];
                    smallpos = i;
                    smallval = p[1];
                    for (j = i + 1; j < netsize; j++) {
                        q = network[j];
                        if (q[1] < smallval) {
                            smallpos = j;
                            smallval = q[1]
                        }
                    }
                    q = network[smallpos];
                    if (i != smallpos) {
                        j = q[0];
                        q[0] = p[0];
                        p[0] = j;
                        j = q[1];
                        q[1] = p[1];
                        p[1] = j;
                        j = q[2];
                        q[2] = p[2];
                        p[2] = j;
                        j = q[3];
                        q[3] = p[3];
                        p[3] = j
                    }
                    if (smallval != previouscol) {
                        netindex[previouscol] = startpos + i >> 1;
                        for (j = previouscol + 1; j < smallval; j++) netindex[j] = i;
                        previouscol = smallval;
                        startpos = i
                    }
                }
                netindex[previouscol] = startpos + maxnetpos >> 1;
                for (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos
            }
            function inxsearch(b, g, r) {
                var a, p, dist;
                var bestd = 1e3;
                var best = -1;
                var i = netindex[g];
                var j = i - 1;
                while (i < netsize || j >= 0) {
                    if (i < netsize) {
                        p = network[i];
                        dist = p[1] - g;
                        if (dist >= bestd) i = netsize;
                        else {
                            i++;
                            if (dist < 0) dist = -dist;
                            a = p[0] - b;
                            if (a < 0) a = -a;
                            dist += a;
                            if (dist < bestd) {
                                a = p[2] - r;
                                if (a < 0) a = -a;
                                dist += a;
                                if (dist < bestd) {
                                    bestd = dist;
                                    best = p[3]
                                }
                            }
                        }
                    }
                    if (j >= 0) {
                        p = network[j];
                        dist = g - p[1];
                        if (dist >= bestd) j = -1;
                        else {
                            j--;
                            if (dist < 0) dist = -dist;
                            a = p[0] - b;
                            if (a < 0) a = -a;
                            dist += a;
                            if (dist < bestd) {
                                a = p[2] - r;
                                if (a < 0) a = -a;
                                dist += a;
                                if (dist < bestd) {
                                    bestd = dist;
                                    best = p[3]
                                }
                            }
                        }
                    }
                }
                return best
            }
            function learn() {
                var i;
                var lengthcount = pixels.length;
                var alphadec = 30 + (samplefac - 1) / 3;
                var samplepixels = lengthcount / (3 * samplefac);
                var delta = ~~ (samplepixels / ncycles);
                var alpha = initalpha;
                var radius = initradius;
                var rad = radius >> radiusbiasshift;
                if (rad <= 1) rad = 0;
                for (i = 0; i < rad; i++) radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));
                var step;
                if (lengthcount < minpicturebytes) {
                    samplefac = 1;
                    step = 3
                } else if (lengthcount % prime1 !== 0) {
                    step = 3 * prime1
                } else if (lengthcount % prime2 !== 0) {
                    step = 3 * prime2
                } else if (lengthcount % prime3 !== 0) {
                    step = 3 * prime3
                } else {
                    step = 3 * prime4
                }
                var b, g, r, j;
                var pix = 0;
                i = 0;
                while (i < samplepixels) {
                    b = (pixels[pix] & 255) << netbiasshift;
                    g = (pixels[pix + 1] & 255) << netbiasshift;
                    r = (pixels[pix + 2] & 255) << netbiasshift;
                    j = contest(b, g, r);
                    altersingle(alpha, j, b, g, r);
                    if (rad !== 0) alterneigh(rad, j, b, g, r);
                    pix += step;
                    if (pix >= lengthcount) pix -= lengthcount;
                    i++;
                    if (delta === 0) delta = 1;
                    if (i % delta === 0) {
                        alpha -= alpha / alphadec;
                        radius -= radius / radiusdec;
                        rad = radius >> radiusbiasshift;
                        if (rad <= 1) rad = 0;
                        for (j = 0; j < rad; j++) radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad))
                    }
                }
            }
            function buildColormap() {
                init();
                learn();
                unbiasnet();
                inxbuild()
            }
            this.buildColormap = buildColormap;
            function getColormap() {
                var map = [];
                var index = [];
                for (var i = 0; i < netsize; i++) index[network[i][3]] = i;
                var k = 0;
                for (var l = 0; l < netsize; l++) {
                    var j = index[l];
                    map[k++] = network[j][0];
                    map[k++] = network[j][1];
                    map[k++] = network[j][2]
                }
                return map
            }
            this.getColormap = getColormap;
            this.lookupRGB = inxsearch
        }
        module.exports = NeuQuant
    },
    {}],
    4 : [function(require, module, exports) {
        var GIFEncoder, renderFrame;
        GIFEncoder = require("./GIFEncoder.js");
        renderFrame = function(frame) {
            var encoder, page, stream, transfer;
            encoder = new GIFEncoder(frame.width, frame.height);
            if (frame.index === 0) {
                encoder.writeHeader()
            } else {
                encoder.firstFrame = false
            }
            encoder.setTransparent(frame.transparent);
            encoder.setRepeat(frame.repeat);
            encoder.setDelay(frame.delay);
            encoder.setQuality(frame.quality);
            encoder.setDither(frame.dither);
            encoder.setGlobalPalette(frame.globalPalette);
            encoder.addFrame(frame.data);
            if (frame.last) {
                encoder.finish()
            }
            if (frame.globalPalette === true) {
                frame.globalPalette = encoder.getGlobalPalette()
            }
            stream = encoder.stream();
            frame.data = stream.pages;
            frame.cursor = stream.cursor;
            frame.pageSize = stream.constructor.pageSize;
            if (frame.canTransfer) {
                transfer = function() {
                    var i, len, ref, results;
                    ref = frame.data;
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        page = ref[i];
                        results.push(page.buffer)
                    }
                    return results
                } ();
                return self.postMessage(frame, transfer)
            } else {
                return self.postMessage(frame)
            }
        };
        self.onmessage = function(event) {
            return renderFrame(event.data)
        }
    },
    {
        "./GIFEncoder.js": 1
    }]
},
{},
[4]);
//# sourceMappingURL=gif.worker.js.map

/**
 * Created by xumenglei on 2017/6/14.
 * 依赖gif.js、gif.worker.js
 */
Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
	value: function (callback, type, quality) {

		var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
			len = binStr.length,
			arr = new Uint8Array(len);

		for (var i=0; i<len; i++ ) {
			arr[i] = binStr.charCodeAt(i);
		}

		callback( new Blob( [arr], {type: 'image/png'} ) );
	}
});

snip={
	/**
     * 准备图片（产品图片，底图）
     * @param ele 产品
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @param srcLatLngBounds 产品图片的范围
     * @param destlatLngBounds 出图的范围
     * @param destSize 出图的大小
     * @param unders {Promise[]}放在下面的底图
     * @param aboves {Promise[]}放在上面的底图
     */
        //保存bolob对象
    blobObject:{},
	prepare:function (ele,startTime,endTime,srcLatLngBounds,destlatLngBounds,destSize,unders,aboves) {
		//截取图片的一部分
		//$(".apiImg button").eq(0).attr("disabled",true);
		//$(".popupApi").fadeIn(1000);
		//$(".popup_innerApi").text("图片数据预加载中...");
		var _part = function (imageArr,latLngBounds) {
			return imageArr.map(function (image) {
				return snip.part(image,latLngBounds,destlatLngBounds);
			})
		};

		var promise = new Promise(function (resolve,reject) {
			Promise.all([snip.toUrlArr(ele,startTime,endTime),
				Promise.all(unders),Promise.all(aboves)]).then(function (values) {
					var latLngBounds = values[0][0];
					var canvasArr = values[0].slice(1);
				var imageArr = _part(canvasArr,latLngBounds),
					unders = values[1],
					aboves = values[2];
				snip.pack(imageArr,unders,aboves,destSize).then(resolve);
			});
		})
		return promise;
	},

	/**
     	* 组装
     	* @param imageArr {Image[]}按destLatLngBounds裁剪过的图片
     	* @param unders {Image[]}按destLatLngBounds裁剪过的底图，放在下面
     	* @param aboves {Image[]}按destLatLngBounds裁剪过的底图，放在上面
     	* @param size {L.Point}最终合成的图片的大小
     	*/
	pack: function (imageArr,unders,aboves,size) {

		var canvasArr= imageArr.map(function (image) {
			return snip.combine(image,unders,aboves,size);
		});
		//多张图出gif
        if(canvasArr.length>1){
            return snip.toGif(canvasArr);
        }else {//单张图出png
            var promise = new Promise(function (resolve) {
                canvasArr[0].toBlob(function (blob) {
                	  resolve(blob);
                    snip.blobObject=blob;
                    //resolve(URL.createObjectURL(blob));
                });//chrome 未实现toBlob方法
                //},'image/jpeg',0.5);//chrome 未实现toBlob方法
            });
            return promise;
        }
	},

	/**
     * 拼出图片的url
     * @param ele 要素（产品名称）
     * @param startTime
     * @param endTime
     */

	toUrlArr:function (ele,startTime,endTime) {
		var futrueDta;
		var urls;
		var currtime=curT;
		var preIndex;
		var lastIndex;
		var fileName="";
		var step = 1;
		var urls=[];
		var test=[];
		for(var i=0;i<nwfdData.length;i++){
			if(ele==nwfdData[i].name){
                if(newLujing){
                    var eleObj=$("li.liPage_liSelect").text();
                }else{
                    var eleObj=$(".select").siblings().find("input[name=radioButton]:checked").siblings().html();
                }

				for(var j=0;j<nwfdData[i].children.length;j++){
					if(eleObj==nwfdData[i].children[j].name){

						futrueDta=nwfdData[i].children[j];
						if(futrueDta.time[0] == 1){
							step = 3;
						}else if(futrueDta.time[0] == 3){
							step = 3;
						}
						if(currtime.getHours()>=18){
							currtime.setHours(20);
						}else if(currtime.getHours()<18&&currtime.getHours()>=6){
							currtime.setHours(8);
						}else{
							currtime=moment(currtime).subtract(1,"day").toDate();
							currtime.setHours(20);
						}
						for(var k=0;k<futrueDta.time.length;k++){
							var hour=futrueDta.time[k];
							if(startTime==moment(currtime).subtract(-hour,"hour").toDate().format("yyyy-MM-dd HH:00")){
								preIndex=k;
							}
						}
						for(var k2=0;k2<futrueDta.time.length;k2++){
							var hour=futrueDta.time[k2];
							if(endTime==moment(currtime).subtract(-hour,"hour").toDate().format("yyyy-MM-dd HH:00")){
								lastIndex=k2;
							}
						}
						if((lastIndex-preIndex) > 39){
							step = 6;
						}else if((lastIndex-preIndex) > 19){
							step = 3;
						}

						if(currtime.getHours()>=18){
							fileName1=currtime.format("yyyyMMdd")+"20.";
						}else{
							fileName1=currtime.format("yyyyMMdd")+"08.";
						}
						
						var latLngBounds = null;
						var _part = function (tempMetas) {
							var promises = tempMetas.map(function (tempMeta) {
								  var promise = new Promise(function (resolve) {
								  		var glLayer = new BinLayer({color:futrueDta.color,meta:tempMeta,ratio:2,attribution:tempMeta}).addTo(map);
											var tmpGl = glLayer._layers.glLayer;
											
											tmpGl.on("updated",function(){
												 resolve(tmpGl._container);
												 latLngBounds = tmpGl._latLngBounds;
												 map.removeLayer(glLayer);
											});
								  });
									return promise;
							});
							return Promise.all(promises);
						};
						
						var tempMetas = [];
						for(var l=preIndex;l<=lastIndex;l+=step){
							preIndex=l;
							if(futrueDta.time[preIndex]<10){
								fileName="00"+futrueDta.time[preIndex];
							}else if(futrueDta.time[preIndex]>=10&&futrueDta.time[preIndex]<100){
								fileName="0"+futrueDta.time[preIndex];
							}else{
								fileName=futrueDta.time[preIndex];
							}
							//urls.push(path+futrueDta.relativepath+"/"+fileName1+fileName+".1.png?v=1.0.83");
							
							var tempFileName = fileName1+fileName;
							var tempMeta = new Meta(futrueDta.relativepath,tempFileName.split(".")[0],tempFileName.split(".")[1]);
							tempMetas.push(tempMeta);
						}
						
						var promise = new Promise(function (resolve,reject) {
							  _part(tempMetas).then(function(urls){
							  	  //记录webgl绘制的数据范围
							  		urls.unshift(latLngBounds);
							  		resolve(urls);
							  });
						});
						return promise;
						
					}
				}
			}

		}
		// return urls;
		// urls = ["gridrain24/2017061520.024.2.png"];
		//urls = ["gridrain24/2017061520.024.2.png","gridrain24/2017061520.048.2.png"];
		//urls = ["gridrain24/2017061520.024.2.png","gridrain24/2017061520.048.2.png","gridrain24/2017061520.072.2.png","gridrain24/2017061520.096.2.png"];
        console.log(urls)
		return Promise.resolve(urls);
	},
	/**
	 * 下载图片
	 * @param urlArr
	 * @return {Promise<Image[]>}
	 */
	toImageArr:function (urlArr) {
		var promises = urlArr.map(function (url) {
			var img=new Image();
			img.crossOrigin = 'Anonymous'; //解决跨域
			var promise = new Promise(function (resolve) {
				img.onload=function () {
					resolve(img);
				}
				img.src = url;
			});
			return promise;
		});

		return Promise.all(promises);
	},
	/**
     * 截取图片的一部分，只适用于等经纬度投影
     * @param image
     * @param srcBounds {L.LatLngBounds} image的经纬度范围
     * @param destBounds {L.LatLngBounds}截取的经纬度范围
     * @return {Canvas}
     */
	/*part:function (image,srcBounds,destBounds) {
		var offset_x,offset_y,width,height;
		//像素/度,只适用于等经纬度投影
		var ppd_x = image.width/(srcBounds.getEast()-srcBounds.getWest());
		var ppd_y = image.height/(srcBounds.getNorth()-srcBounds.getSouth());

		offset_x = (destBounds.getWest()-srcBounds.getWest())*ppd_x;
		offset_y = (destBounds.getNorth()-srcBounds.getNorth())*ppd_y;
		width = (destBounds.getEast()-destBounds.getWest())*ppd_x;
		height = (destBounds.getNorth()-destBounds.getSouth())*ppd_y;
		//console.log(width);
		//console.log(height)
		var canvas = document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var ctx = canvas.getContext("2d");

		ctx.drawImage(image,-offset_x,offset_y);
        
		return canvas;
	},*/
	/**
     * 截取图片的一部分，支持（等经纬度投影、墨卡托投影）
     * @param image
     * @param srcBounds {L.LatLngBounds} image的经纬度范围
     * @param destBounds {L.LatLngBounds}截取的经纬度范围
     * @return {Canvas}
     */
	part:function (image,srcBounds,destBounds) {
		var offset_x,offset_y,width,height;
		var point1 = map.latLngToLayerPoint(L.latLng(srcBounds.getNorth(), srcBounds.getWest()));
		var point2 = map.latLngToLayerPoint(L.latLng(destBounds.getNorth(), destBounds.getWest()));
		var point3 = map.latLngToLayerPoint(L.latLng(destBounds.getSouth(), destBounds.getEast()));
		
		offset_x = point2.x - point1.x;
		offset_y = point2.y - point1.y;
		width = point3.x - point2.x;
		height = point3.y - point2.y;
		
		var canvas = document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var ctx = canvas.getContext("2d");
		
		ctx.drawImage(image,offset_x,offset_y,width,height,0,0,width,height);
    
		return canvas;
	},
	/**
     * 合并底图，按最终的图片大小放缩
     * @param image 要被加底图的图片
     * @param unders 下面的图层
     * @param aboves 上面的图层
     * @return {Canvas}
     */
	combine:function (image,unders,aboves,size) {
		var layers=[].concat(unders,image,aboves);

		var canvas = document.createElement("canvas");
		canvas.width = size.width;
		canvas.height = size.height;
		var ctx = canvas.getContext("2d");

		layers.forEach(function (layer,index) {
			if(index == 1){
				ctx.globalAlpha = 0.5;
			}else{
				ctx.globalAlpha = 1.0;
			}
			ctx.drawImage(layer,0,0,layer.width,layer.height,0,0,canvas.width,canvas.height);
		});
		return canvas;
	},
	/**
     * 从一系列canvas生成gif
     * @param canvasArr {Array}
     * (尝试过想通过压缩Canvas来减小gif文件的大小，发现这样会导致图像不清晰，并且形成的gif文件大小反而会增大)
     */
	toGif:function (canvasArr) {
		var gif = new GIF({
			workers: 2,
			quality: 10
		});
		canvasArr.forEach(function (canvas) {
			//var img = new Image();
			//img.src = canvas.toDataURL('image/jpeg',0.5);
			gif.addFrame(canvas);
		});
		var promise = new Promise(function (resolve,reject) {
			gif.on('finished', function(blob) {
				resolve(blob);
				snip.blobObject=blob;
				//resolve(URL.createObjectURL(blob));
				//window.open(URL.createObjectURL(blob));
			});
			gif.render();
		})
		return promise;
	},

	/**
     * 下载
     */
    toSave:function (blob) {
        //todo 指定图片名称，下载图片
        console.log(blob);
        
        var brow=$.browser;
        var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
        if (userAgent.indexOf("Chrome") > -1){  //判断是否谷歌浏览器
        	  var url = URL.createObjectURL(blob);
        		var a=document.createElement("a");
		        a.href=url;
		        a.download="下载";
		        a.click();
		        window.open(a);
        }else if (userAgent.indexOf("Firefox") > -1) {  //判断是否Firefox浏览器
        	  var url = URL.createObjectURL(blob);
        		var a=document.createElement("a");
		        a.href=url;
		        a.download="下载";
		        a.click();
		        window.open(a);
        }else if (brow.msie) {  //判断是否IE浏览器
        	  var a = new FileReader();
        		a.onload = function (e) { toHtml(e.target.result); }
        		a.readAsDataURL(blob);
        		
        		toHtml = function (url) {
        			  /*var a=document.createElement("a");
				        a.href=url;
				        a.download="下载";
				        a.click();
				        window.open(a);*/
				    	  var html = ''
				                + '<body style="margin:0; padding:0;">'
				                + '<img src="' + url + '" style="max-width:100%;" title="" />'
				                + '</body>';
				            var tab = window.open();
				            tab.document.write(html);
				    }
        }else if(brow.mozilla){  //判断是否IE浏览器
			var a = new FileReader();
			a.onload = function (e) { toHtml(e.target.result); }
			a.readAsDataURL(blob);

			toHtml = function (url) {
				/*var a=document.createElement("a");
				 a.href=url;
				 a.download="下载";
				 a.click();
				 window.open(a);*/
				var html = ''
					+ '<body style="margin:0; padding:0;">'
					+ '<img src="' + url + '" style="max-width:100%;" title="" />'
					+ '</body>';
				var tab = window.open();
				tab.document.write(html);
			}
		}

		$(".apiImg button").eq(0).attr("disabled",false);
		$(".popup_innerApi").text("出图完成.");
		$(".popupApi").fadeOut(1000);
	},

	toAdd:function(blob){
        //todo 指定图片名称，下载图片
        //console.log(url);
        $(".apiImg button").eq(0).attr("disabled",false);
        $(".popup_innerApi").text("图片数据加载完成.");
        $(".popupApi").fadeOut(1000);
        var url = URL.createObjectURL(blob);
        var a=document.createElement("a");
        var img=document.createElement("img");
        a.href=url;
        img.src=url;
        a.appendChild(img);
        a.download="下载";
        $("#imgBox").html(a);
        //a.click();
    }


}


/**
 * Created by xumenglei on 2017/6/14.
 * 可交互的矩形框
 * 五个控制点
 * 2        3
 *      0
 * 1        4
 */
Re_Rectangle = L.LayerGroup.extend({
	options:{
		fill:false,
		weight:2,
		dashArray:[10,5]
	},
	initialize:function (latLngBounds,options) {
		this._layers = {};
		this.rectangle = L.rectangle(latLngBounds,options);
		this.addLayer(this.rectangle);
		var vertexes = this.rectangle.getLatLngs()[0];
		var lat=(vertexes[0].lat+vertexes[1].lat)/2;
		var lng=(vertexes[2].lng+vertexes[1].lng)/2;
		var han0= L.latLng([lat,lng]);
		var index;
		//  2   3
		//  1   4
		this.handle0 = L.marker(
			han0,{
				draggable: true,
				icon:L.divIcon({className:"re-rectangle-handle-0",iconSize:[30,30]})
			});
		for(var i=1;i<=4;i++){
			this["handle"+i] = L.marker(
				vertexes[i-1],{
					draggable: true,
					icon:L.divIcon({className:"re-rectangle-handle-"+i,iconSize:[7,7]})
				});
		}
		[0,1,2,3,4].forEach(function(idx){
			this["handle"+idx].on("dragstart",function (e) {
				this._oldHandlePosition = e.target._latlng;
				//console.log("woshi"+e.latlng)
				document.ondragstart= function(){return false;};
			},this).on("drag",function (e) {
				this["onHandle"+idx+"Drag"](e.latlng);
			},this).on("dragend",function(){
				$("#fwei").children("option").eq(0).attr("selected",true);
			},this);
			this.addLayer(this["handle"+idx])
		},this);
	},
	/**
	 * 中心的控制点
	 * @param latlng
	 */
	onHandle0Drag:function (latlng) {
		var oldLatLng = this._oldHandlePosition;

		this._oldHandlePosition = latlng;
		//偏移量

		var offset = L.latLng([latlng.lat-oldLatLng.lat,latlng.lng-oldLatLng.lng]);

		console.log(offset.lat);
		//移动handler 1 2 3 4
		var mapView=map.getBounds();
		for(var i=1;i<=4;i++){
			var handle = this["handle"+i];
			oldLatLng = handle.getLatLng();
			var lat=oldLatLng.lat+offset.lat;
			var lng=oldLatLng.lng+offset.lng;
			if(lat<mapView._southWest.lat){
				lat=mapView._southWest.lat;
			}else if(lat>mapView._northEast.lat){
				lat=mapView._northEast.lat;
			}
			if(lng<mapView._southWest.lng){
				lng=mapView._southWest.lng;
			}else if(lng>mapView._northEast.lng){
				lng=mapView._northEast.lng;
			}
			handle.setLatLng([lat,lng]);
		}
		this._moveRectangle();
	},
	/**
	 * 左下角的控制点
	 * @param latlng
	 */
	onHandle1Drag:function (latlng) {
		var oldLatLng = this._oldHandlePosition;
		var mapView=map.getBounds();
		this._oldHandlePosition = latlng;
		//移动 2横-x-lng 4竖-y-lat
		//2
		oldLatLng = this.handle2.getLatLng();
		if(oldLatLng.lat<mapView._southWest.lat){
			oldLatLng.lat=mapView._southWest.lat;
		}else if(oldLatLng.lat>mapView._northEast.lat){
			oldLatLng.lat=mapView._northEast.lat;
		}
		if(latlng.lng<mapView._southWest.lng){
			latlng.lng=mapView._southWest.lng;
		}else if(latlng.lng>mapView._northEast.lng){
			latlng.lng=mapView._northEast.lng;
		}
		this.handle2.setLatLng([oldLatLng.lat,latlng.lng]);
		//4
		oldLatLng = this.handle4.getLatLng();
		if(latlng.lat<mapView._southWest.lat){
			latlng.lat=mapView._southWest.lat;
		}else if(latlng.lat>mapView._northEast.lat){
			latlng.lat=mapView._northEast.lat;
		}
		if(oldLatLng.lng<mapView._southWest.lng){
			oldLatLng.lng=mapView._southWest.lng;
		}else if(oldLatLng.lng>mapView._northEast.lng){
			oldLatLng.lng=mapView._northEast.lng;
		}
		this.handle4.setLatLng([latlng.lat,oldLatLng.lng]);
		this.handle3.setLatLng([this.handle2.getLatLng().lat,this.handle4.getLatLng().lng]);
		this._moveRectangle();
	},
	/**
	 * 左上角的控制点
	 * @param latlng
	 */
	onHandle2Drag:function (latlng) {
//todo
		var oldLatLng = this._oldHandlePosition;
		var mapView=map.getBounds();
		this._oldHandlePosition = latlng;
		//移动 1横-x-lng 3竖-y-lat
		//1
		oldLatLng = this.handle1.getLatLng();
		if(oldLatLng.lat<mapView._southWest.lat){
			oldLatLng.lat=mapView._southWest.lat;
		}else if(oldLatLng.lat>mapView._northEast.lat){
			oldLatLng.lat=mapView._northEast.lat;
		}
		if(latlng.lng<mapView._southWest.lng){
			latlng.lng=mapView._southWest.lng;
		}else if(latlng.lng>mapView._northEast.lng){
			latlng.lng=mapView._northEast.lng;
		}
		//this.handle1.setLatLng(oldLatLng.lat,this.handle2.lng);
		this.handle1.setLatLng([oldLatLng.lat,latlng.lng]);
		//3

		oldLatLng = this.handle3.getLatLng();
		if(latlng.lat<mapView._southWest.lat){
			latlng.lat=mapView._southWest.lat;
		}else if(latlng.lat>mapView._northEast.lat){
			latlng.lat=mapView._northEast.lat;
		}
		if(oldLatLng.lng<mapView._southWest.lng){
			oldLatLng.lng=mapView._southWest.lng;
		}else if(oldLatLng.lng>mapView._northEast.lng){
			oldLatLng.lng=mapView._northEast.lng;
		}
		//this.handle3.setLatLng(this.handle2.lat,oldLatLng.lng);
		this.handle3.setLatLng([latlng.lat,oldLatLng.lng]);
		this.handle4.setLatLng([this.handle1.getLatLng().lat,this.handle3.getLatLng().lng]);

		this._moveRectangle();
	},
	/**
	 * 右上角的控制点
	 * @param latlng
	 */
	onHandle3Drag:function (latlng) {
//todo
		var oldLatLng = this._oldHandlePosition;
		var mapView=map.getBounds();
		this._oldHandlePosition = latlng;
		//移动 4横-x-lng 2竖-y-lat
		//4
		oldLatLng = this.handle4.getLatLng();
		if(oldLatLng.lat<mapView._southWest.lat){
			oldLatLng.lat=mapView._southWest.lat;
		}else if(oldLatLng.lat>mapView._northEast.lat){
			oldLatLng.lat=mapView._northEast.lat;
		}
		if(latlng.lng<mapView._southWest.lng){
			latlng.lng=mapView._southWest.lng;
		}else if(latlng.lng>mapView._northEast.lng){
			latlng.lng=mapView._northEast.lng;
		}
		this.handle4.setLatLng([oldLatLng.lat,latlng.lng]);
		//2
		oldLatLng = this.handle2.getLatLng();
		if(latlng.lat<mapView._southWest.lat){
			latlng.lat=mapView._southWest.lat;
		}else if(latlng.lat>mapView._northEast.lat){
			latlng.lat=mapView._northEast.lat;
		}
		if(oldLatLng.lng<mapView._southWest.lng){
			oldLatLng.lng=mapView._southWest.lng;
		}else if(oldLatLng.lat>mapView._northEast.lng){
			oldLatLng.lng=mapView._northEast.lng;
		}
		this.handle2.setLatLng([latlng.lat,oldLatLng.lng]);
		this.handle1.setLatLng([this.handle4.getLatLng().lat,this.handle2.getLatLng().lng]);

		this._moveRectangle();
	},
	/**
	 * 右下角的控制点
	 * @param latlng
	 */
	onHandle4Drag:function (latlng) {
//todo
		var oldLatLng = this._oldHandlePosition;
		var mapView=map.getBounds();
		this._oldHandlePosition = latlng;
		//移动 3横-x-lng 1竖-y-lat
		//3
		oldLatLng = this.handle3.getLatLng();
		if(oldLatLng.lat<mapView._southWest.lat){
			oldLatLng.lat=mapView._southWest.lat;
		}else if(oldLatLng.lat>mapView._northEast.lat){
			oldLatLng.lat=mapView._northEast.lat;
		}
		if(latlng.lng<mapView._southWest.lng){
			latlng.lng=mapView._southWest.lng;
		}else if(latlng.lng>mapView._northEast.lng){
			latlng.lng=mapView._northEast.lng;
		}
		this.handle3.setLatLng([oldLatLng.lat,latlng.lng]);
		//1
		oldLatLng = this.handle1.getLatLng();
		if(latlng.lat<mapView._southWest.lat){
			latlng.lat=mapView._southWest.lat;
		}else if(oldLatLng.lat>mapView._northEast.lat){
			latlng.lat=mapView._northEast.lat;
		}
		if(oldLatLng.lng<mapView._southWest.lng){
			oldLatLng.lng=mapView._southWest.lng;
		}else if(oldLatLng.lng>mapView._northEast.lng){
			oldLatLng.lng=mapView._northEast.lng;
		}
		this.handle1.setLatLng([latlng.lat,oldLatLng.lng]);
		this.handle2.setLatLng([this.handle3.getLatLng().lat,this.handle1.getLatLng().lng]);

		this._moveRectangle();
	},

	_moveRectangle:function () {
		var latlngs = [];
		for(var i=1;i<=4;i++){
			latlngs.push(this["handle"+i].getLatLng());
		}
		this.rectangle.setLatLngs(latlngs);
		this.handle0.setLatLng(this.rectangle.getCenter());

	},
	_getCheckedFeatureData:function(obj){
		var featureData = null;
		for(var i=0;i<nwfdData.length;i++){
			if(obj==nwfdData[i].name){
                if(newLujing){

                }else{

                }
				if(nwfdData[i].children.length==1){
					featureData = nwfdData[i].children[0];
				}else {
					var obj = $(".select").siblings().find("input[name=radioButton]:checked").siblings().html();
					var values = nwfdData[i].children;
					for(var j = 0; j < values.length; j++){
						if(obj == values[j].name){
							featureData = values[j];
							break;
						}
					}
				}
				break;
			}
		}
		return featureData;
	},
	_collage:function() {
		var clientWidth=document.body.offsetWidth;
		var clientHeight=document.body.offsetHeight;
		var tileLayer;
		map.eachLayer(function(layer) {
			if (layer instanceof L.TileLayer) {
				tileLayer = layer;
			}
		});
		var canvas = document.createElement("canvas");
		var ctx = canvas.getContext("2d");
		canvas.width=clientWidth;
		canvas.height=clientHeight;
		var mapRect = map.getContainer().getBoundingClientRect();
		var tilesBox = tileLayer.getContainer();
		var div = tilesBox.firstElementChild;
		do{
			var tile = div.firstElementChild;
			if(!tile)continue;
			do {
				var tileRect = tile.getBoundingClientRect();
				var tilePos = {left: tileRect.left - mapRect.left, top: tileRect.top - mapRect.top};

				ctx.drawImage(tile, tilePos.left, tilePos.top, tileRect.width, tileRect.height);
			} while (tile = tile.nextElementSibling)
		}while (div = div.nextElementSibling)

		return canvas;
	}
});